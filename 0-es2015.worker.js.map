{"version":3,"sources":["webpack/bootstrap","./src/app/core.worker.ts","./node_modules/simplex-noise/simplex-noise.js","./node_modules/tslib/tslib.es6.js","./src/app/ai/ai-player.ts","./src/app/core/area.ts","./src/app/core/areas-manager.ts","./src/app/core/buildings.ts","./src/app/core/cities-manager.ts","./src/app/core/city.ts","./src/app/core/collector.ts","./src/app/core/debug.ts","./src/app/core/game.ts","./src/app/core/idle-product.ts","./src/app/core/pathfinding.ts","./src/app/core/player.ts","./src/app/core/product.ts","./src/app/core/serialization/channel.ts","./src/app/core/serialization/dump.ts","./src/app/core/tile-improvements.ts","./src/app/core/tile.ts","./src/app/core/tiles-map.ts","./src/app/core/unit-actions.ts","./src/app/core/unit-manager.ts","./src/app/core/unit.ts","./src/app/core/yields.ts","./src/app/data/buildings.ts","./src/app/data/idle-products.ts","./src/app/data/units.ts","./src/app/map-generators/simplex.ts","./src/app/map-generators/utils.ts","./src/app/shared/hex-math.ts","./src/app/shared/index.ts","./src/app/shared/tile.interface.ts"],"names":[],"mappings":"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;AACA,4BAA4B;AAC5B;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,kCAAkC;AAClC;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,mCAAmC;AACnC,qBAAqB;AACrB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yBAAyB;AACzB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,gDAAgD;AAChD;AACA;;AAEA;AACA,MAAM,IAA2C,EAAE,mCAAO,YAAY,qBAAqB;AAAA,oGAAC;AAC5F;AACA,MAAM,IAA8B;AACpC;AACA,OAAO,EAAsE;AAC7E;AACA,MAAM,IAA6B;AACnC;AACA;;AAEA,CAAC;;;;;;;;;;;;;ACxdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAA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","file":"0-es2015.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/@ngtools/webpack/src/index.js!./src/app/core.worker.ts\");\n","/// <reference lib=\"webworker\" />\n\nimport { SimplexMapGenerator } from \"./map-generators/simplex\";\nimport { MapGeneratorOptions } from \"./api/game.interface\";\nimport { Game } from \"./core/game\";\nimport { PlayerCore, PLAYER_COLORS } from \"./core/player\";\nimport { AIPlayer } from \"./ai/ai-player\";\nimport { collector } from \"./core/collector\";\nimport { UnitAction } from \"./core/unit-actions\";\nimport { UnitOrder, UNITS_MAP } from \"./core/unit\";\nimport { findPath } from \"./core/pathfinding\";\nimport { BaseTile, PlayerTask } from \"./shared\";\nimport { BUILDINGS_MAP } from \"./core/buildings\";\nimport { IDLE_PRODUCTS_MAP } from \"./core/idle-product\";\nimport {\n  gameToChannel,\n  trackedPlayerToChannel,\n  unitDetailsToChannel,\n  cityDetailsToChannel,\n  GameChanneled,\n} from \"./core/serialization/channel\";\nimport { dumpGame, loadGame } from \"./core/serialization/dump\";\n\nlet game: Game;\n\nconst HANDLERS = {\n  \"game.new\": newGameHandler,\n  \"game.saveDump\": saveDumpHandler,\n  \"game.loadDump\": loadDumpHandler,\n  \"game.nextPlayer\": nextPlayerHandler,\n\n  \"trackedPlayer.revealWorld\": revealWorld,\n  \"trackedPlayer.set\": setTrackedPlayer,\n\n  \"unit.getDetails\": getUnitDetails,\n  \"unit.doAction\": unitDoAction,\n  \"unit.setOrder\": unitSetOrder,\n  \"unit.findPath\": unitFindPath,\n  \"unit.disband\": unitDisband,\n  \"unit.moveAlongPath\": unitMoveAlongPath,\n  \"unit.getRange\": unitGetRange,\n  \"unit.getFailedActionRequirements\": unitGetFailedActionRequirements,\n\n  \"tile.update\": tileUpdate,\n  \"tile.bulkUpdate\": tileBulkUpdate,\n\n  \"city.getDetails\": getCityDetails,\n  \"city.produce\": cityProduce,\n  \"city.getRange\": cityGetRange,\n  \"city.getWorkTiles\": cityGetWorkTiles,\n  \"city.workTile\": cityWorkTile,\n  \"city.unworkTile\": cityUnworkTile,\n  \"city.optimizeYields\": cityOptimizeYields,\n\n  \"area.getTiles\": getAreaTiles,\n};\n\naddEventListener(\"message\", ({ data }) => {\n  const handler = HANDLERS[data.command];\n  if (!handler) {\n    console.error(`No handler for command \"${data.command}\".`);\n    return;\n  }\n\n  const result = handler(data.data);\n\n  const changes = collector.flush();\n\n  game.trackedPlayer.updateCitiesWithoutProduction();\n  game.trackedPlayer.updateUnitsWithoutOrders();\n  const nextTask = getNextTask();\n\n  postMessage({ result, changes, nextTask });\n});\n\nfunction getNextTask(): PlayerTask | null {\n  const p = game.trackedPlayer;\n\n  if (p.citiesWithoutProduction.length) {\n    return {\n      task: \"city\",\n      id: p.citiesWithoutProduction[0].id,\n    };\n  }\n\n  if (p.unitsWithoutOrders.length) {\n    return {\n      task: \"unit\",\n      id: p.unitsWithoutOrders[0].id,\n    };\n  }\n\n  return null;\n}\n\nfunction newGameHandler(data: MapGeneratorOptions): GameChanneled {\n  game = new Game();\n\n  for (let i = 0; i < data.humanPlayersCount + data.aiPlayersCount; i++) {\n    const player = new PlayerCore(game, PLAYER_COLORS[i]);\n\n    if (i >= data.humanPlayersCount) {\n      player.ai = new AIPlayer(player);\n    }\n\n    game.addPlayer(player);\n  }\n\n  const generator = new SimplexMapGenerator(game.players.length);\n  game.map = generator.generate(\n    data.width,\n    data.height,\n    data.seed,\n    data.uniformity,\n    data.seaLevel,\n  );\n  game.map.precompute();\n\n  for (let i = 0; i < game.players.length; i++) {\n    game.unitsManager.spawn(\n      \"settler\",\n      generator.getStartingLocations()[i],\n      game.players[i],\n    );\n  }\n\n  game.start();\n\n  return gameToChannel(game);\n}\n\nfunction saveDumpHandler(): string {\n  // TODO we might compress the save\n  return JSON.stringify(dumpGame(game));\n}\n\nfunction loadDumpHandler(data: string) {\n  game = loadGame(JSON.parse(data));\n  return gameToChannel(game);\n}\n\nfunction nextPlayerHandler() {\n  game.nextPlayer();\n}\n\nfunction revealWorld() {\n  for (let x = 0; x < game.map.width; x++) {\n    game.trackedPlayer.exploreTiles(game.map.tiles[x]);\n  }\n}\n\nfunction setTrackedPlayer(playerId: number) {\n  const player = game.players.find((p) => p.id === playerId);\n\n  if (!player) {\n    return;\n  }\n\n  game.trackedPlayer = player;\n\n  return trackedPlayerToChannel(game.trackedPlayer);\n}\n\nfunction getUnitDetails(unitId: number) {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return null;\n  }\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitDoAction(data: { unitId: number; action: UnitAction }) {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  if (!unit) {\n    return null;\n  }\n\n  unit.doAction(data.action);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitSetOrder(data: { unitId: number; order: UnitOrder }) {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  if (!unit) {\n    return null;\n  }\n\n  unit.setOrder(data.order);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitFindPath(data: { unitId: number; destinationId: number }) {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  const tile = game.map.tilesMap.get(data.destinationId);\n  if (!unit || !tile) {\n    return null;\n  }\n\n  unit.path = findPath(unit, tile);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitDisband(unitId: number) {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return null;\n  }\n\n  game.unitsManager.destroy(unit);\n}\n\nfunction unitMoveAlongPath(unitId: number) {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return null;\n  }\n\n  game.unitsManager.moveAlongPath(unit);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitGetRange(unitId: number): number[] {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return [];\n  }\n\n  const tiles = unit.getRange();\n\n  return Array.from(tiles).map((tile) => tile.id);\n}\n\nfunction unitGetFailedActionRequirements(data): string[] {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  if (!unit) {\n    return [];\n  }\n\n  return unit.getFailedActionRequirements(data.action);\n}\n\nexport function tileUpdate(tile: Partial<BaseTile>) {\n  const tileCore = game.map.tilesMap.get(tile.id!);\n  if (!tileCore) {\n    return;\n  }\n\n  Object.assign(tileCore, tile);\n  tileCore.update();\n}\n\nexport function tileBulkUpdate(tiles: Partial<BaseTile>[]) {\n  for (const tile of tiles) {\n    tileUpdate(tile);\n  }\n}\n\nexport function getCityDetails(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n  if (!city) {\n    return;\n  }\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityProduce(data) {\n  const city = game.citiesManager.citiesMap.get(data.cityId);\n\n  if (!city) {\n    return;\n  }\n\n  if (data.type === \"building\") {\n    city.produceBuilding(BUILDINGS_MAP.get(data.productId)!);\n  } else if (data.type === \"unit\") {\n    city.produceUnit(UNITS_MAP.get(data.productId)!);\n  } else {\n    city.workOnIdleProduct(IDLE_PRODUCTS_MAP.get(data.productId)!);\n  }\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityGetRange(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n\n  if (!city) {\n    return;\n  }\n\n  return Array.from(city.tiles).map((tile) => tile.id);\n}\n\nexport function cityGetWorkTiles(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n\n  if (!city) {\n    return {};\n  }\n\n  return {\n    workedTiles: Array.from(city.workedTiles).map((tile) => tile.id),\n    notWorkedTiles: Array.from(city.notWorkedTiles).map((tile) => tile.id),\n  };\n}\n\nexport function cityWorkTile(data) {\n  const city = game.citiesManager.citiesMap.get(data.cityId);\n  const tile = game.map.tilesMap.get(data.tileId);\n\n  if (!city || !tile) {\n    return null;\n  }\n\n  city.workTile(tile);\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityUnworkTile(data) {\n  const city = game.citiesManager.citiesMap.get(data.cityId);\n  const tile = game.map.tilesMap.get(data.tileId);\n\n  if (!city || !tile) {\n    return null;\n  }\n\n  city.unworkTile(tile);\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityOptimizeYields(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n\n  if (!city) {\n    return null;\n  }\n\n  city.optimizeYields();\n\n  return cityDetailsToChannel(city);\n}\n\nexport function getAreaTiles(areaId: number): number[] {\n  const area = game.areasManager.areasMap.get(areaId);\n  if (!area) {\n    return [];\n  }\n\n  return Array.from(area.tiles).map((tile) => tile.id);\n}\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { PlayerCore } from \"../core/player\";\nimport { IDLE_PRODUCTS_MAP } from \"../core/idle-product\";\nimport { UnitCore, UNITS_MAP } from \"../core/unit\";\nimport { TileCore } from \"../core/tile\";\nimport { findPath } from \"../core/pathfinding\";\nimport { CityCore } from \"../core/city\";\n\nexport class AIPlayer {\n  constructor(private player: PlayerCore) {}\n\n  nextTurn() {\n    for (const unit of this.player.unitsWithoutOrders) {\n      if (unit.order) {\n        continue;\n      }\n\n      if (unit.definition.actions.includes(\"foundCity\")) {\n        this.processSettler(unit);\n      }\n    }\n\n    for (const city of this.player.citiesWithoutProduction) {\n      city.updateProductsList();\n\n      if (!city.product) {\n        this.produceNext(city);\n      }\n    }\n  }\n\n  processSettler(unit: UnitCore) {\n    const destination = unit.getPathDestination();\n    if (!destination || destination.areaOf) {\n      const bestCityLocation = this.findCityLocation(unit.tile);\n      if (!bestCityLocation) {\n        unit.order = \"sleep\";\n        return;\n      }\n\n      if (unit.tile === bestCityLocation) {\n        unit.doAction(\"foundCity\");\n      } else {\n        unit.path = findPath(unit, bestCityLocation);\n      }\n    }\n\n    if (unit.path) {\n      this.player.game.unitsManager.moveAlongPath(unit);\n    }\n  }\n\n  produceNext(city: CityCore) {\n    const settler = UNITS_MAP.get(\"settler\")!;\n    if (Math.random() > 0.7 && city.canProduce(settler)) {\n      const newCityLocation = this.findCityLocation(city.tile);\n      if (newCityLocation) {\n        city.produceUnit(settler);\n        return;\n      }\n    }\n\n    const buildings = city.availableBuildings.filter(\n      (b) => !city.disabledBuildings.has(b),\n    );\n    if (buildings.length) {\n      city.produceBuilding(buildings[0]);\n    } else {\n      city.workOnIdleProduct(IDLE_PRODUCTS_MAP.get(\"culture\")!);\n    }\n  }\n\n  findCityLocation(startTile: TileCore): TileCore | null {\n    const tiles = startTile.getTilesInRange(5);\n\n    let bestSweetSpotValue = 0;\n    let bestTile: TileCore | null = null;\n    for (const tile of tiles) {\n      if (startTile.passableArea !== tile.passableArea) {\n        continue;\n      }\n\n      if (tile.sweetSpotValue > bestSweetSpotValue) {\n        bestSweetSpotValue = tile.sweetSpotValue;\n        bestTile = tile;\n      }\n    }\n    return bestTile;\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { collector } from \"./collector\";\n\nexport class AreaCore {\n  id = 0;\n\n  tiles = new Set<TileCore>();\n\n  add(tile: TileCore) {\n    this.tiles.add(tile);\n    collector.addAreaTiles(this.id, [tile]);\n  }\n\n  addBulk(tiles: TileCore[]) {\n    for (const tile of tiles) {\n      this.tiles.add(tile);\n    }\n    collector.addAreaTiles(this.id, tiles);\n  }\n\n  remove(tile: TileCore) {\n    this.tiles.delete(tile);\n    collector.removeAreaTiles(this.id, [tile]);\n  }\n\n  removeBulk(tiles: TileCore[]) {\n    for (const tile of tiles) {\n      this.tiles.delete(tile);\n    }\n    collector.removeAreaTiles(this.id, tiles);\n  }\n}\n","import { AreaCore } from \"./area\";\n\nexport class AreasManager {\n  areas: AreaCore[] = [];\n\n  areasMap = new Map<number, AreaCore>();\n\n  lastId = 0;\n\n  make() {\n    const area = new AreaCore();\n    area.id = this.lastId++;\n    this.areas.push(area);\n    this.areasMap.set(area.id, area);\n    return area;\n  }\n\n  destroy(area: AreaCore) {\n    this.areasMap.delete(area.id);\n    const index = this.areas.indexOf(area);\n    if (index !== -1) {\n      this.areas.splice(index, 1);\n    }\n  }\n}\n","import { Bonuses } from \"./bonus\";\nimport { BUILDINGS } from \"../data/buildings\";\nimport { ProductDefinition } from \"./product\";\n\nexport interface Building extends ProductDefinition {\n  bonuses: Bonuses;\n}\n\nexport const BUILDINGS_MAP = new Map<string, Building>();\n\nfor (const definition of BUILDINGS) {\n  BUILDINGS_MAP.set(definition.id, definition);\n}\n","import { CityCore } from \"./city\";\nimport { PlayerCore } from \"./player\";\nimport { TileRoad } from \"./tile-improvements\";\nimport { TileCore } from \"./tile\";\nimport { LandForm, SeaLevel } from \"../shared\";\nimport { collector } from \"./collector\";\n\nexport class CitiesManager {\n  cities: CityCore[] = [];\n\n  citiesMap = new Map<number, CityCore>();\n\n  lastId = 0;\n\n  spawn(tile: TileCore, player: PlayerCore, isNew = true) {\n    if (tile.city) {\n      return null;\n    }\n\n    if (\n      tile.landForm === LandForm.mountains ||\n      tile.seaLevel !== SeaLevel.none\n    ) {\n      return null;\n    }\n\n    const city = new CityCore(tile, player);\n    city.id = this.lastId++;\n    city.size = 1;\n    city.name = `City ${city.id}`;\n    city.tile = tile;\n    this.cities.push(city);\n    this.citiesMap.set(city.id, city);\n\n    for (const neighbour of tile.neighbours) {\n      city.addTile(neighbour);\n    }\n\n    player.addCity(city);\n\n    tile.city = city;\n    tile.forest = false;\n    tile.wetlands = false;\n    tile.road = TileRoad.road;\n    tile.update();\n\n    for (const t of tile.getTilesInRange(3)) {\n      t.sweetSpotValue = 0;\n    }\n\n    if (isNew) {\n      city.optimizeYields();\n    }\n\n    collector.cities.add(city);\n\n    return city;\n  }\n\n  destroy(city: CityCore) {\n    // TODO rewrite to sets for better performance?\n    let index = this.cities.indexOf(city);\n    if (index !== -1) {\n      this.cities.splice(index, 1);\n    }\n\n    this.citiesMap.delete(city.id);\n\n    index = city.player.cities.indexOf(city);\n    if (index !== -1) {\n      city.player.cities.splice(index, 1);\n    }\n\n    city.tile.city = null;\n\n    for (const tile of city.tiles) {\n      city.removeTile(tile);\n    }\n\n    collector.citiesDestroyed.add(city.id);\n  }\n\n  nextTurn() {\n    for (const city of this.cities) {\n      city.nextTurn();\n    }\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { PlayerCore } from \"./player\";\nimport { UnitDefinition } from \"./unit.interface\";\nimport { Building } from \"./buildings\";\nimport { ProductDefinition } from \"./product\";\nimport { IdleProduct } from \"./idle-product\";\nimport { Bonuses } from \"./bonus\";\nimport {\n  EMPTY_YIELDS,\n  Yields,\n  zeroYields,\n  addYields,\n  copyYields,\n  roundYields,\n} from \"./yields\";\n\nimport { UNITS_DEFINITIONS } from \"../data/units\";\nimport { BUILDINGS } from \"../data/buildings\";\nimport { IDLE_PRODUCTS } from \"../data/idle-products\";\nimport { collector } from \"./collector\";\n\nexport type ProductType = \"unit\" | \"building\" | \"idleProduct\";\n\nexport interface Product {\n  type: ProductType;\n  productDefinition: ProductDefinition;\n}\n\nexport class CityCore {\n  id: number;\n  name: string;\n  size: number;\n\n  totalFood = 0;\n  foodToGrow = 20;\n  foodConsumed = 1;\n\n  totalCulture = 0;\n  cultureToExpand = 20;\n\n  tileYields: Yields = { ...EMPTY_YIELDS };\n  yields: Yields = { ...EMPTY_YIELDS };\n  perTurn: Yields = { ...EMPTY_YIELDS };\n\n  product: Product | null = null;\n  totalProduction = 0;\n\n  buildings: Building[] = [];\n  buildingsIds = new Set<string>();\n\n  tiles = new Set<TileCore>();\n\n  workedTiles = new Set<TileCore>();\n\n  notWorkedTiles = new Set<TileCore>();\n\n  availableBuildings: Building[] = [];\n  disabledBuildings = new Set<Building>();\n\n  availableUnits: UnitDefinition[] = [];\n  disabledUnits = new Set<UnitDefinition>();\n\n  availableIdleProducts: IdleProduct[] = [];\n  disabledIdleProducts = new Set<IdleProduct>();\n\n  changedSize = false;\n\n  constructor(public tile: TileCore, public player: PlayerCore) {\n    this.addTile(tile);\n  }\n\n  nextTurn() {\n    this.changedSize = false;\n\n    this.progressExpansion();\n    this.progressProduction();\n    this.progressGrowth();\n    this.updateYields();\n\n    if (this.player === this.player.game.trackedPlayer || this.changedSize) {\n      collector.cities.add(this);\n    }\n  }\n\n  private progressProduction() {\n    if (!this.product) {\n      return;\n    }\n\n    this.totalProduction += this.yields.production;\n\n    if (this.totalProduction >= this.product.productDefinition.productionCost) {\n      if (this.product.type === \"unit\") {\n        this.player.game.unitsManager.spawn(\n          this.product.productDefinition.id,\n          this.tile,\n          this.player,\n        );\n      } else if (this.product.type === \"building\") {\n        this.buildings.push(this.product.productDefinition as Building);\n        this.buildingsIds.add(this.product.productDefinition.id);\n      }\n      this.totalProduction = 0;\n      this.product = null;\n    }\n  }\n\n  private progressGrowth() {\n    this.totalFood += this.yields.food - this.foodConsumed;\n    if (this.totalFood >= this.foodToGrow) {\n      this.size++;\n      this.changedSize = true;\n      const bestWorkableTile = this.pickBestTileToWork(this.notWorkedTiles);\n      if (bestWorkableTile) {\n        this.workTile(bestWorkableTile);\n      }\n      this.totalFood -= this.foodToGrow;\n    } else if (this.totalFood < 0) {\n      if (this.size > 1) {\n        this.size--;\n        this.changedSize = true;\n        this.totalFood += this.foodToGrow;\n      } else {\n        this.totalFood = 0;\n      }\n    }\n    this.foodToGrow = 15 * Math.pow(1.2, this.size);\n  }\n\n  private progressExpansion() {\n    this.totalCulture += this.perTurn.culture;\n    if (this.totalCulture >= this.cultureToExpand) {\n      this.totalCulture -= this.cultureToExpand;\n      this.cultureToExpand = 5 * Math.pow(1.2, this.tiles.size);\n\n      const tile = this.pickBestTileToExpand(\n        this.tile,\n        this.getTilesAvailableForExpansion(),\n      );\n      if (tile) {\n        this.addTile(tile);\n        tile.sweetSpotValue = 0;\n      }\n    }\n  }\n\n  produceUnit(unit: UnitDefinition) {\n    this.startProducing({\n      type: \"unit\",\n      productDefinition: unit,\n    });\n  }\n\n  produceBuilding(building: Building) {\n    if (this.canConstruct(building)) {\n      this.startProducing({\n        type: \"building\",\n        productDefinition: building,\n      });\n    }\n  }\n\n  workOnIdleProduct(idleProduct: IdleProduct) {\n    this.startProducing({\n      type: \"idleProduct\",\n      productDefinition: idleProduct,\n    });\n    this.updateYields();\n    this.player.updateYields();\n  }\n\n  cancelProduction() {\n    if (this.product) {\n      const type = this.product.type;\n      this.product = null;\n      if (type === \"idleProduct\") {\n        this.updateYields();\n        this.player.updateYields();\n      }\n    }\n  }\n\n  private startProducing(product: Product) {\n    if (!this.canProduce(product.productDefinition)) {\n      return;\n    }\n\n    this.cancelProduction();\n\n    this.product = product;\n    this.totalProduction = 0;\n    collector.cities.add(this);\n  }\n\n  get turnsToGrow() {\n    if (this.perTurn.food >= 0) {\n      const remainingFood = this.foodToGrow - this.totalFood;\n      return Math.ceil(remainingFood / this.perTurn.food);\n    } else {\n      return Math.ceil(this.totalFood / this.perTurn.food) - 1;\n    }\n  }\n\n  get turnsToProductionEnd() {\n    if (!this.product) {\n      return null;\n    }\n    const remainingProduction =\n      this.product.productDefinition.productionCost - this.totalProduction;\n\n    return Math.ceil(remainingProduction / this.yields.production);\n  }\n\n  get turnsToExpand() {\n    const remainingCulture = this.cultureToExpand - this.totalCulture;\n    return Math.ceil(remainingCulture / this.perTurn.culture);\n  }\n\n  getTurnsToProduce(unit: UnitDefinition) {\n    return Math.ceil(unit.productionCost / this.yields.production);\n  }\n\n  updateYields() {\n    zeroYields(this.tileYields);\n\n    this.tileYields.food = 2;\n    this.tileYields.production = 1;\n\n    for (const tile of this.workedTiles) {\n      addYields(this.tileYields, tile.yields);\n    }\n\n    this.tileYields.production += this.freeTileWorkers;\n\n    copyYields(this.yields, this.tileYields);\n\n    for (const building of this.buildings) {\n      this.applyBonuses(building.bonuses);\n    }\n\n    if (this.product?.type === \"idleProduct\") {\n      const idleProduct = this.product.productDefinition as IdleProduct;\n      this.applyBonuses(idleProduct.bonuses);\n    }\n    roundYields(this.yields);\n\n    this.foodConsumed = this.size;\n\n    copyYields(this.perTurn, this.yields);\n    this.perTurn.food -= this.foodConsumed;\n  }\n\n  applyBonuses(bonuses: Bonuses) {\n    this.yields.food += bonuses.yieldValue?.food || 0;\n    this.yields.production += bonuses.yieldValue?.production || 0;\n    this.yields.culture += bonuses.yieldValue?.culture || 0;\n    this.yields.publicWorks += bonuses.yieldValue?.publicWorks || 0;\n\n    if (bonuses.yieldFactor?.food) {\n      this.yields.food += this.tileYields.food * bonuses.yieldFactor.food;\n    }\n    if (bonuses.yieldFactor?.production) {\n      this.yields.production +=\n        this.tileYields.production * bonuses.yieldFactor.production;\n    }\n    if (bonuses.yieldFactor?.culture) {\n      this.yields.culture +=\n        this.tileYields.culture * bonuses.yieldFactor.culture;\n    }\n    if (bonuses.yieldFactor?.publicWorks) {\n      this.yields.publicWorks +=\n        this.tileYields.publicWorks * bonuses.yieldFactor.publicWorks;\n    }\n\n    if (bonuses.transferProductionToFood) {\n      this.yields.food +=\n        this.yields.production * bonuses.transferProductionToFood;\n    }\n\n    if (bonuses.transferProductionToCulture) {\n      this.yields.culture +=\n        this.yields.production * bonuses.transferProductionToCulture;\n    }\n\n    if (bonuses.transferProductionToPublicWorks) {\n      this.yields.publicWorks +=\n        this.yields.production * bonuses.transferProductionToPublicWorks;\n    }\n  }\n\n  addTile(tile: TileCore) {\n    if (!tile.areaOf) {\n      this.tiles.add(tile);\n      this.notWorkedTiles.add(tile);\n      tile.areaOf = this;\n      this.player.area.add(tile);\n      this.player.exploreTiles([tile]);\n      this.player.exploreTiles(tile.neighbours);\n      collector.tiles.add(tile);\n    }\n  }\n\n  removeTile(tile: TileCore) {\n    if (this.tiles.has(tile)) {\n      this.tiles.delete(tile);\n      tile.areaOf = null;\n      this.player.area.remove(tile);\n      collector.tiles.add(tile);\n    }\n  }\n\n  workTile(tile: TileCore, updateYields = true) {\n    if (this.freeTileWorkers && this.tiles.has(tile)) {\n      this.workedTiles.add(tile);\n      this.notWorkedTiles.delete(tile);\n      if (updateYields) {\n        this.updateYields();\n      }\n    }\n  }\n\n  unworkTile(tile: TileCore, updateYields = true) {\n    this.workedTiles.delete(tile);\n    this.notWorkedTiles.add(tile);\n    if (updateYields) {\n      this.updateYields();\n    }\n  }\n\n  getTilesAvailableForExpansion(): Set<TileCore> {\n    const availableTiles = new Set<TileCore>();\n    for (const tile of this.tiles) {\n      for (const neighbour of tile.neighbours) {\n        if (!neighbour.areaOf) {\n          availableTiles.add(neighbour);\n        }\n      }\n    }\n    return availableTiles;\n  }\n\n  pickBestTileToWork(tiles: Set<TileCore>): TileCore | null {\n    let bestTile: TileCore | null = null;\n    let bestYields = 0;\n\n    for (const tile of tiles) {\n      const yields = tile.totalYields;\n      if (yields > bestYields) {\n        bestYields = yields;\n        bestTile = tile;\n      }\n    }\n\n    return bestTile;\n  }\n\n  pickBestTileToExpand(\n    cityTile: TileCore,\n    tiles: Set<TileCore>,\n  ): TileCore | null {\n    let bestTile: TileCore | null = null;\n    let bestScore = -Infinity;\n\n    for (const tile of tiles) {\n      const score = tile.totalYields - cityTile.getDistanceTo(tile) / 2;\n      if (score > bestScore) {\n        bestScore = score;\n        bestTile = tile;\n      }\n    }\n\n    return bestTile;\n  }\n\n  get freeTileWorkers() {\n    return this.size - this.workedTiles.size;\n  }\n\n  optimizeYields() {\n    this.workedTiles.clear();\n    this.notWorkedTiles = new Set(this.tiles);\n    while (this.freeTileWorkers && this.notWorkedTiles.size) {\n      const tile = this.pickBestTileToWork(this.notWorkedTiles);\n      if (!tile) {\n        break;\n      }\n      this.workTile(tile, false);\n    }\n    this.updateYields();\n  }\n\n  canConstruct(building: Building) {\n    return !this.buildings.includes(building);\n  }\n\n  canProduce(product: ProductDefinition): boolean {\n    for (const r of product.requirements) {\n      if (!r.check(this)) {\n        return false;\n      }\n    }\n\n    for (const r of product.weakRequirements) {\n      if (!r.check(this)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private getAvailableProducts<T extends ProductDefinition>(\n    products: T[],\n    city: CityCore,\n  ): T[] {\n    const results: T[] = [];\n    for (const p of products) {\n      let ok = true;\n      for (const r of p.requirements) {\n        if (!r.check(city)) {\n          ok = false;\n          break;\n        }\n      }\n      if (ok) {\n        results.push(p);\n      }\n    }\n    return results;\n  }\n\n  private getDisabledProducts<T extends ProductDefinition>(\n    products: T[],\n    city: CityCore,\n  ): Set<T> {\n    const results = new Set<T>();\n    for (const p of products) {\n      for (const r of p.weakRequirements) {\n        if (!r.check(city)) {\n          results.add(p);\n        }\n      }\n    }\n    return results;\n  }\n\n  updateProductsList() {\n    this.availableUnits = this.getAvailableProducts<UnitDefinition>(\n      UNITS_DEFINITIONS,\n      this,\n    );\n    this.disabledUnits = this.getDisabledProducts<UnitDefinition>(\n      this.availableUnits,\n      this,\n    );\n\n    const notBuildBuildings = BUILDINGS.filter(\n      (b) =>\n        this.product?.productDefinition !== b && !this.buildings.includes(b),\n    );\n\n    this.availableBuildings = this.getAvailableProducts<Building>(\n      notBuildBuildings,\n      this,\n    );\n    this.disabledBuildings = this.getDisabledProducts<Building>(\n      this.availableBuildings,\n      this,\n    );\n\n    this.availableIdleProducts = IDLE_PRODUCTS;\n  }\n\n  changeOwner(newOwner: PlayerCore) {\n    if (this.player === newOwner) {\n      return;\n    }\n\n    const oldOwner = this.player;\n\n    this.player = newOwner;\n\n    const cityTiles = Array.from(this.tiles);\n\n    let index = oldOwner.cities.indexOf(this);\n    if (index !== -1) {\n      oldOwner.cities.splice(index, 1);\n      oldOwner.area.removeBulk(cityTiles);\n    }\n\n    newOwner.cities.push(this);\n    newOwner.area.addBulk(cityTiles);\n\n    newOwner.updateYields();\n    oldOwner.updateYields();\n\n    // TODO explored area should be bigger then city tiles. Change this once fog of war is implement (probably a city should store it's visible tiles)\n    newOwner.exploreTiles(this.tiles);\n\n    collector.cities.add(this);\n    for (const tile of this.tiles) {\n      collector.tiles.add(tile);\n    }\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { UnitCore } from \"./unit\";\nimport { CityCore } from \"./city\";\nimport { PlayerCore } from \"./player\";\nimport {\n  tileToChannel,\n  unitToChannel,\n  cityToChannel,\n  trackedPlayerToChannel,\n} from \"./serialization/channel\";\nimport { PlayerYields } from \"../shared\";\n\nclass Collector {\n  tiles = new Set<TileCore>();\n\n  units = new Set<UnitCore>();\n  unitsDestroyed = new Set<number>();\n\n  cities = new Set<CityCore>();\n  citiesDestroyed = new Set<number>();\n\n  areaTilesAdded = new Map<number, TileCore[]>();\n  areaTilesRemoved = new Map<number, TileCore[]>();\n\n  trackedPlayer: PlayerCore | undefined;\n  trackedPlayerYields: PlayerYields | undefined;\n  tilesExplored = new Set<number>();\n\n  turn = 0;\n\n  flush() {\n    const changes: any[] = [];\n\n    for (const unit of this.units) {\n      changes.push({ type: \"unit.updated\", data: unitToChannel(unit) });\n    }\n    for (const id of this.unitsDestroyed) {\n      changes.push({ type: \"unit.destroyed\", data: id });\n    }\n\n    for (const city of this.cities) {\n      changes.push({ type: \"city.updated\", data: cityToChannel(city) });\n    }\n    for (const id of this.citiesDestroyed) {\n      changes.push({ type: \"city.destroyed\", data: id });\n    }\n\n    if (this.tiles.size) {\n      changes.push({\n        type: \"tiles.updated\",\n        data: Array.from(this.tiles).map((tile) => tileToChannel(tile)),\n      });\n    }\n\n    for (const [id, tiles] of this.areaTilesAdded.entries()) {\n      changes.push({\n        type: \"area.tilesAdded\",\n        data: { id, tiles: tiles.map((t) => t.id) },\n      });\n    }\n    for (const [id, tiles] of this.areaTilesRemoved.entries()) {\n      changes.push({\n        type: \"area.tilesRemoved\",\n        data: { id, tiles: tiles.map((t) => t.id) },\n      });\n    }\n\n    if (this.turn) {\n      changes.push({ type: \"game.turn\", data: this.turn });\n    }\n\n    if (this.trackedPlayer) {\n      changes.push({\n        type: \"trackedPlayer.set\",\n        data: trackedPlayerToChannel(this.trackedPlayer),\n      });\n    }\n    if (this.trackedPlayerYields) {\n      changes.push({\n        type: \"trackedPlayer.yields\",\n        data: this.trackedPlayerYields,\n      });\n    }\n    if (this.tilesExplored.size) {\n      changes.push({\n        type: \"trackedPlayer.tilesExplored\",\n        data: Array.from(this.tilesExplored),\n      });\n    }\n\n    this.tiles.clear();\n\n    this.unitsDestroyed.clear();\n    this.units.clear();\n\n    this.cities.clear();\n    this.citiesDestroyed.clear();\n\n    this.areaTilesAdded.clear();\n    this.areaTilesRemoved.clear();\n\n    this.trackedPlayer = undefined;\n    this.tilesExplored.clear();\n\n    this.turn = 0;\n\n    return changes;\n  }\n\n  addAreaTiles(areaId: number, tiles: TileCore[]) {\n    if (!this.areaTilesAdded.has(areaId)) {\n      this.areaTilesAdded.set(areaId, tiles);\n    } else {\n      this.areaTilesAdded.get(areaId)!.push(...tiles);\n    }\n  }\n\n  removeAreaTiles(areaId: number, tiles: TileCore[]) {\n    if (!this.areaTilesRemoved.has(areaId)) {\n      this.areaTilesRemoved.set(areaId, tiles);\n    } else {\n      this.areaTilesRemoved.get(areaId)!.push(...tiles);\n    }\n  }\n}\n\nexport const collector = new Collector();\n","export class Debug {\n  revealMap = false;\n}\n","import { PlayerCore } from \"./player\";\nimport { TilesMapCore } from \"./tiles-map\";\nimport { UnitsManager } from \"./unit-manager\";\nimport { Debug } from \"./debug\";\nimport { CitiesManager } from \"./cities-manager\";\nimport { AreasManager } from \"./areas-manager\";\nimport { collector } from \"./collector\";\n\nexport class Game {\n  debug = new Debug();\n\n  map: TilesMapCore;\n\n  players: PlayerCore[] = [];\n\n  activePlayerIndex = -1;\n\n  trackedPlayer: PlayerCore;\n\n  humanPlayer: PlayerCore | null = null;\n\n  turn = 1;\n\n  areasManager = new AreasManager();\n\n  unitsManager = new UnitsManager(this);\n\n  citiesManager = new CitiesManager();\n\n  start() {\n    this.activePlayerIndex = -1;\n    this.nextPlayer();\n  }\n\n  addPlayer(player: PlayerCore) {\n    player.id = this.players.length;\n    this.players.push(player);\n    if (!this.trackedPlayer) {\n      this.trackedPlayer = player;\n    }\n  }\n\n  nextPlayer() {\n    this.activePlayerIndex++;\n    if (this.activePlayerIndex >= this.players.length) {\n      this.nextTurn();\n      this.activePlayerIndex = 0;\n    }\n    if (this.activePlayer.ai) {\n      this.activePlayer.ai.nextTurn();\n      this.nextPlayer();\n    } else {\n      if (this.trackedPlayer !== this.activePlayer) {\n        this.trackedPlayer = this.activePlayer;\n        collector.trackedPlayer = this.trackedPlayer;\n      }\n    }\n  }\n\n  nextTurn() {\n    this.unitsManager.nextTurn();\n    this.citiesManager.nextTurn();\n    for (const player of this.players) {\n      player.nextTurn();\n    }\n    this.turn++;\n    collector.turn = this.turn;\n  }\n\n  get activePlayer() {\n    return this.players[this.activePlayerIndex];\n  }\n}\n","import { ProductDefinition } from \"./product\";\nimport { Bonuses } from \"./bonus\";\nimport { IDLE_PRODUCTS } from \"../data/idle-products\";\n\nexport interface IdleProduct extends ProductDefinition {\n  bonuses: Bonuses;\n}\n\nexport const IDLE_PRODUCTS_MAP = new Map<string, IdleProduct>();\n\nfor (const definition of IDLE_PRODUCTS) {\n  IDLE_PRODUCTS_MAP.set(definition.id, definition);\n}\n","import { TileCore } from \"./tile\";\nimport { UnitCore } from \"./unit\";\n\nexport function findPath(unit: UnitCore, end: TileCore): TileCore[][] | null {\n  const startTime = performance.now();\n  const start = unit.tile;\n\n  if (start === end) {\n    return null;\n  }\n\n  if (start.passableArea !== end.passableArea) {\n    return null;\n  }\n\n  const visitedTiles = new Set<TileCore>();\n  const tilesToVisit = new Map<TileCore, number>();\n  const cameFrom = new Map<TileCore, [number, number, TileCore | null]>();\n  const costsSoFar = new Map<TileCore, number>();\n\n  const turnCost = 1 / unit.definition.actionPoints;\n  tilesToVisit.set(start, 0);\n  costsSoFar.set(start, 0);\n  cameFrom.set(start, [0, unit.definition.actionPoints, null]);\n\n  while (tilesToVisit.size) {\n    let nextTile!: TileCore;\n    let minEstimatedCost = Infinity;\n\n    for (const [tile, estimatedCost] of tilesToVisit.entries()) {\n      if (estimatedCost < minEstimatedCost) {\n        minEstimatedCost = estimatedCost;\n        nextTile = tile;\n      }\n    }\n\n    let [turn, actionPointsLeft, ..._] = cameFrom.get(nextTile)!;\n\n    if (!actionPointsLeft) {\n      actionPointsLeft = unit.definition.actionPoints;\n      turn++;\n    }\n\n    visitedTiles.add(nextTile);\n    tilesToVisit.delete(nextTile);\n\n    if (nextTile === end) {\n      const endTime = performance.now();\n      console.debug(`pathfinding took ${Math.round(endTime - startTime)}ms`);\n      return reconstructPath(cameFrom, end);\n    }\n\n    for (const neighbour of nextTile.neighbours) {\n      if (!visitedTiles.has(neighbour)) {\n        const isExplored = unit.player.exploredTiles.has(neighbour);\n        let moveCost = isExplored\n          ? nextTile.neighboursCosts.get(neighbour)!\n          : 1;\n\n        if (moveCost === Infinity) {\n          continue;\n        }\n\n        let newActionPointsLeft = Math.max(0, actionPointsLeft - moveCost);\n\n        moveCost *= turnCost;\n\n        if (!newActionPointsLeft) {\n          moveCost = 1; // ??\n        }\n\n        const costSoFar = costsSoFar.get(nextTile)! + moveCost;\n\n        if (\n          !costsSoFar.has(neighbour) ||\n          costSoFar < costsSoFar.get(neighbour)!\n        ) {\n          costsSoFar.set(neighbour, costSoFar);\n          tilesToVisit.set(\n            neighbour,\n            costSoFar + getEuclideanDistance(neighbour, end) * turnCost,\n          );\n          cameFrom.set(neighbour, [turn, newActionPointsLeft, nextTile]);\n        }\n      }\n    }\n  }\n\n  const endTime = performance.now();\n  console.debug(`pathfinding took ${Math.round(endTime - startTime)}ms`);\n  return null;\n}\n\nfunction getEuclideanDistance(start: TileCore, end: TileCore) {\n  return Math.sqrt(\n    (start.x - end.x) * (start.x - end.x) +\n      (start.y - end.y) * (start.y - end.y),\n  );\n}\n\nfunction reconstructPath(\n  cameFrom: Map<TileCore, [number, number, TileCore | null]>,\n  target: TileCore,\n): TileCore[][] {\n  let lastTile = target;\n  let lastTurn: number | null = null;\n\n  let turnPath: TileCore[] = [target];\n  const path: TileCore[][] = [turnPath];\n  while (true) {\n    const [turn, _, tile] = cameFrom.get(lastTile)!;\n    if (!tile || !cameFrom.has(tile)) {\n      return path;\n    }\n    if (turn !== lastTurn) {\n      lastTurn = turn;\n      turnPath = [];\n      path.unshift(turnPath);\n    }\n    turnPath.unshift(tile!);\n    lastTile = tile!;\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { UnitCore } from \"./unit\";\nimport { Game } from \"./game\";\nimport { CityCore } from \"./city\";\nimport { AIPlayer } from \"../ai/ai-player\";\nimport {\n  EMPTY_YIELDS,\n  zeroYields,\n  addYields,\n  subtractYields,\n  copyYields,\n} from \"./yields\";\nimport { collector } from \"./collector\";\nimport { PlayerYields } from \"../shared\";\n\nexport const PLAYER_COLORS: number[] = [\n  0xff0000,\n  0x00ff00,\n  0x0000ff,\n  0xffff00,\n  0x00ffff,\n  0xff00ff,\n  0x999999,\n  0xdddddd,\n  0xfbacac,\n  0xe6b873,\n  0x39862b,\n  0x2e716e,\n  0x7457bb,\n  0xab57bb,\n  0x79583c,\n  0xb6bbe6,\n  0xb6bce6,\n];\n\nexport class PlayerCore {\n  id: number;\n\n  exploredTiles = new Set<TileCore>();\n\n  visibleTiles = new Set<TileCore>();\n\n  units: UnitCore[] = [];\n\n  cities: CityCore[] = [];\n\n  citiesWithoutProduction: CityCore[] = [];\n\n  unitsWithoutOrders: UnitCore[] = [];\n\n  yields: PlayerYields = {\n    costs: { ...EMPTY_YIELDS },\n    income: { ...EMPTY_YIELDS },\n    total: { ...EMPTY_YIELDS },\n    perTurn: { ...EMPTY_YIELDS },\n  };\n\n  area = this.game.areasManager.make();\n\n  ai: AIPlayer | null = null;\n\n  constructor(public game: Game, public color: number) {}\n\n  exploreTiles(tiles: Iterable<TileCore>) {\n    for (const tile of tiles) {\n      if (!this.exploredTiles.has(tile)) {\n        this.exploredTiles.add(tile);\n        if (this.id === this.game.trackedPlayer.id) {\n          collector.tilesExplored.add(tile.id);\n        }\n      }\n    }\n  }\n\n  updateYields() {\n    zeroYields(this.yields.income);\n    zeroYields(this.yields.costs);\n    zeroYields(this.yields.perTurn);\n\n    for (const city of this.cities) {\n      for (const tile of city.tiles) {\n        if (!tile.city) {\n          if (tile.improvement !== null) {\n            this.yields.costs.publicWorks++;\n          }\n          if (tile.road !== null) {\n            this.yields.costs.publicWorks++;\n          }\n        }\n      }\n      addYields(this.yields.income, city.yields);\n    }\n\n    copyYields(this.yields.perTurn, this.yields.income);\n    subtractYields(this.yields.perTurn, this.yields.costs);\n\n    if (this === this.game.trackedPlayer) {\n      collector.trackedPlayerYields = this.yields;\n    }\n  }\n\n  nextTurn() {\n    this.updateYields();\n    addYields(this.yields.total, this.yields.perTurn);\n    this.yields.total.publicWorks = Math.max(0, this.yields.total.publicWorks);\n\n    this.updateCitiesWithoutProduction();\n    this.updateUnitsWithoutOrders();\n  }\n\n  updateCitiesWithoutProduction() {\n    this.citiesWithoutProduction = this.cities.filter((c) => !c.product);\n  }\n\n  updateUnitsWithoutOrders() {\n    this.unitsWithoutOrders = this.units.filter(\n      (c) => !c.order && c.actionPointsLeft,\n    );\n  }\n\n  addCity(city: CityCore) {\n    this.cities.push(city);\n  }\n}\n","import { CityCore } from \"./city\";\n\nexport abstract class ProductRequirement {\n  static id: string;\n  abstract check(city: CityCore): boolean;\n}\n\nexport interface ProductDefinition {\n  id: string;\n  name: string;\n  productionCost: number;\n\n  // product will be hidden from products list\n  requirements: ProductRequirement[];\n\n  // product will be disabled on the products list\n  weakRequirements: ProductRequirement[];\n}\n\nexport class BuildingRequirement extends ProductRequirement {\n  id = \"building\";\n\n  constructor(public buildingId: string) {\n    super();\n  }\n\n  check(city: CityCore) {\n    return city.buildingsIds.has(this.buildingId);\n  }\n}\n\nexport class SizeRequirement extends ProductRequirement {\n  id = \"size\";\n\n  constructor(public size: number) {\n    super();\n  }\n\n  check(city: CityCore) {\n    return city.size >= this.size;\n  }\n}\n","import { Yields } from \"../yields\";\nimport { ProductType, CityCore } from \"../city\";\nimport { Game } from \"../game\";\nimport { PlayerCore } from \"../player\";\nimport { BaseTile, PlayerYields } from \"src/app/shared\";\nimport { TilesMapCore } from \"../tiles-map\";\nimport { UnitOrder, UnitCore } from \"../unit\";\nimport { TileCore } from \"../tile\";\n\nexport interface GameChanneled {\n  turn: number;\n  map: MapChanneled;\n  players: PlayerChanneled[];\n  trackedPlayer: TrackedPlayerChanneled;\n  units: UnitChanneled[];\n  cities: CityChanneled[];\n}\n\nexport interface MapChanneled {\n  width: number;\n  height: number;\n  tiles: TileChanneled[][];\n}\n\nexport interface TileChanneled extends BaseTile {\n  areaOf: number | null;\n  cityId: number | null;\n  unitsIds: number[];\n}\n\nexport interface CityChanneled {\n  id: number;\n  name: string;\n  size: number;\n  tileId: number;\n  playerId: number;\n\n  totalFood: number;\n  foodToGrow: number;\n  foodPerTurn: number;\n  turnsToGrow: number;\n\n  totalProduction: number;\n  productionPerTurn: number;\n  productionRequired: number | null;\n  turnsToProductionEnd: number | null;\n  productName: string | null;\n}\n\nexport interface CityDetailsChanneled {\n  id: number;\n  name: string;\n  size: number;\n  tileId: number;\n  playerId: number;\n\n  totalFood: number;\n  foodToGrow: number;\n  turnsToGrow: number;\n\n  totalProduction: number;\n  turnsToProductionEnd: number | null;\n  foodConsumed: number;\n\n  totalCulture: number;\n  cultureToExpand: number;\n\n  tileYields: Yields;\n  yields: Yields;\n  perTurn: Yields;\n\n  productId: string | null;\n  productType: ProductType | null;\n\n  buildingsIds: string[];\n\n  tiles: number[];\n\n  workedTiles: number[];\n\n  availableBuildings: string[];\n\n  disabledBuildings: string[];\n\n  availableUnits: string[];\n  disabledUnits: string[];\n\n  availableIdleProducts: string[];\n  disabledIdleProducts: string[];\n}\n\nexport interface PlayerChanneled {\n  id: number;\n  color: number;\n  areaId: number;\n}\n\nexport interface TrackedPlayerChanneled {\n  id: number;\n  color: number;\n  exploredTiles: number[];\n  units: number[];\n  cities: number[];\n\n  yields: PlayerYields;\n}\n\nexport interface UnitChanneled {\n  id: number;\n  tileId: number;\n  definitionId: string;\n  playerId: number;\n}\n\nexport interface UnitDetailsChanneled {\n  id: number;\n  tileId: number;\n  definitionId: string;\n  playerId: number;\n  actionPointsLeft: number;\n  order: UnitOrder;\n  path: number[][] | null;\n}\n\nexport function gameToChannel(game: Game): GameChanneled {\n  return {\n    turn: game.turn,\n    map: mapToChannel(game.map),\n    players: game.players.map((p) => playerToChannel(p)),\n    trackedPlayer: trackedPlayerToChannel(game.trackedPlayer),\n    units: game.unitsManager.units.map((u) => unitToChannel(u)),\n    cities: game.citiesManager.cities.map((c) => cityToChannel(c)),\n  };\n}\n\nexport function mapToChannel(map: TilesMapCore): MapChanneled {\n  const tiles: TileChanneled[][] = [];\n  for (let x = 0; x < map.width; x++) {\n    const row: TileChanneled[] = [];\n    tiles.push(row);\n    for (let y = 0; y < map.height; y++) {\n      row.push(tileToChannel(map.tiles[x][y]));\n    }\n  }\n\n  return {\n    width: map.width,\n    height: map.height,\n    tiles,\n  };\n}\n\nexport function tileToChannel(tile: TileCore): TileChanneled {\n  return {\n    id: tile.id,\n    x: tile.x,\n    y: tile.y,\n    climate: tile.climate,\n    forest: tile.forest,\n    improvement: tile.improvement,\n    landForm: tile.landForm,\n    riverParts: tile.riverParts,\n    road: tile.road,\n    seaLevel: tile.seaLevel,\n    wetlands: tile.wetlands,\n    yields: tile.yields,\n    areaOf: tile.areaOf ? tile.areaOf.id : null,\n    unitsIds: tile.units.map((u) => u.id),\n    cityId: tile.city ? tile.city.id : null,\n  };\n}\n\nexport function cityToChannel(city: CityCore): CityChanneled {\n  return {\n    id: city.id,\n    name: city.name,\n    size: city.size,\n    playerId: city.player.id,\n    tileId: city.tile.id,\n\n    totalFood: city.totalFood,\n    foodToGrow: city.foodToGrow,\n    foodPerTurn: city.perTurn.food,\n    turnsToGrow: city.turnsToGrow,\n\n    totalProduction: city.totalProduction,\n    productionPerTurn: city.yields.production,\n    productionRequired: city.product\n      ? city.product.productDefinition.productionCost\n      : null,\n    turnsToProductionEnd: city.turnsToProductionEnd,\n    productName: city.product ? city.product.productDefinition.name : null,\n  };\n}\n\nexport function cityDetailsToChannel(city: CityCore): CityDetailsChanneled {\n  city.updateProductsList();\n\n  return {\n    id: city.id,\n    name: city.name,\n    size: city.size,\n    playerId: city.player.id,\n    tileId: city.tile.id,\n\n    totalFood: city.totalFood,\n    foodToGrow: city.foodToGrow,\n    turnsToGrow: city.turnsToGrow,\n\n    totalProduction: city.totalProduction,\n    turnsToProductionEnd: city.turnsToProductionEnd,\n    availableBuildings: city.availableBuildings.map((b) => b.id),\n    availableIdleProducts: city.availableIdleProducts.map((p) => p.id),\n    availableUnits: city.availableUnits.map((u) => u.id),\n    buildingsIds: Array.from(city.buildingsIds),\n    cultureToExpand: city.cultureToExpand,\n    disabledBuildings: Array.from(city.disabledBuildings).map((b) => b.id),\n    disabledIdleProducts: Array.from(city.disabledIdleProducts).map(\n      (p) => p.id,\n    ),\n    disabledUnits: Array.from(city.disabledUnits).map((u) => u.id),\n    foodConsumed: city.foodConsumed,\n    perTurn: city.perTurn,\n    productId: city.product?.productDefinition.id || null,\n    productType: city.product?.type || null,\n    tileYields: city.tileYields,\n    tiles: Array.from(city.tiles).map((t) => t.id),\n    totalCulture: city.totalCulture,\n    workedTiles: Array.from(city.workedTiles).map((t) => t.id),\n    yields: city.yields,\n  };\n}\n\nexport function playerToChannel(player: PlayerCore): PlayerChanneled {\n  return {\n    id: player.id,\n    color: player.color,\n    areaId: player.area.id,\n  };\n}\n\nexport function trackedPlayerToChannel(\n  player: PlayerCore,\n): TrackedPlayerChanneled {\n  return {\n    id: player.id,\n    color: player.color,\n    exploredTiles: Array.from(player.exploredTiles).map((t) => t.id),\n    units: player.units.map((u) => u.id),\n    cities: player.cities.map((c) => c.id),\n    yields: player.yields,\n  };\n}\n\nexport function unitToChannel(unit: UnitCore): UnitChanneled {\n  return {\n    id: unit.id,\n    tileId: unit.tile.id,\n    definitionId: unit.definition.id,\n    playerId: unit.player.id,\n  };\n}\n\nexport function unitDetailsToChannel(unit: UnitCore): UnitDetailsChanneled {\n  return {\n    id: unit.id,\n    tileId: unit.tile.id,\n    definitionId: unit.definition.id,\n    playerId: unit.player.id,\n    actionPointsLeft: unit.actionPointsLeft,\n    order: unit.order,\n    path: unit.path?.map((row) => row.map((tile) => tile.id)) || null,\n  };\n}\n","import { Game } from \"../game\";\nimport { ProductDefinition } from \"../product\";\nimport { ProductType, CityCore } from \"../city\";\nimport { BUILDINGS_MAP } from \"../buildings\";\nimport { IDLE_PRODUCTS_MAP } from \"../idle-product\";\nimport { Yields } from \"../yields\";\nimport { PlayerCore } from \"../player\";\nimport { AIPlayer } from \"src/app/ai/ai-player\";\nimport { Climate, LandForm, SeaLevel, TileDirection } from \"src/app/shared\";\nimport { TileImprovement, TileRoad } from \"../tile-improvements\";\nimport { TileCore } from \"../tile\";\nimport { TilesMapCore } from \"../tiles-map\";\nimport { UnitCore, UnitOrder } from \"../unit\";\n\nexport interface GameSerialized {\n  turn: number;\n  map: MapSerialized;\n  players: PlayerSerialized[];\n  activePlayerIndex: number;\n  trackedPlayerId: number;\n  units: UnitSerialized[];\n  cities: CitySerialized[];\n}\n\ninterface MapSerialized {\n  width: number;\n  height: number;\n  tiles: TileSerialized[];\n}\n\ninterface TileSerialized {\n  climate?: Climate;\n  landForm?: LandForm;\n  seaLevel?: SeaLevel;\n  improvement?: TileImprovement | null;\n  road?: TileRoad | null;\n  riverParts?: TileDirection[];\n  forest?: boolean;\n  wetlands?: boolean;\n}\n\ninterface ProductSerialized {\n  type: ProductType;\n  id: string;\n}\n\ninterface CitySerialized {\n  id: number;\n  name: string;\n  size: number;\n  tile: number;\n  player: number;\n  totalFood: number;\n  totalCulture: number;\n  totalProduction: number;\n  product: ProductSerialized | null;\n  tiles: number[];\n  workedTiles: number[];\n  buildings: string[];\n}\n\ninterface PlayerSerialized {\n  id: number;\n  ai: boolean;\n  color: number;\n  exploredTiles: number[];\n  yieldsTotal: Yields;\n}\n\ninterface UnitSerialized {\n  id: number;\n  tile: number;\n  definition: string;\n  actionPointsLeft: number;\n  player: number;\n  order: UnitOrder;\n  path: number[][] | null;\n}\n\nexport function dumpGame(game: Game): GameSerialized {\n  return {\n    turn: game.turn,\n    trackedPlayerId: game.trackedPlayer.id,\n    activePlayerIndex: game.activePlayerIndex,\n    map: dumpMap(game.map),\n    players: game.players.map((p) => dumpPlayer(p)),\n    units: game.unitsManager.units.map((u) => dumpUnit(u)),\n    cities: game.citiesManager.cities.map((c) => dumpCity(c)),\n  };\n}\n\nexport function loadGame(data: GameSerialized) {\n  const game = new Game();\n\n  game.turn = data.turn;\n\n  // First deserialize map as other entities depend on it.\n  game.map = loadMap(data.map);\n\n  // Then players as unit deserialization needs them.\n  for (const playerData of data.players) {\n    const player = loadPlayer(game, playerData);\n    game.addPlayer(player);\n  }\n  game.activePlayerIndex = data.activePlayerIndex;\n\n  for (const unit of data.units) {\n    loadUnit(game, unit);\n  }\n\n  for (const city of data.cities) {\n    loadCity(game, city);\n  }\n\n  for (const player of game.players) {\n    player.updateCitiesWithoutProduction();\n    player.updateUnitsWithoutOrders();\n    player.updateYields();\n  }\n\n  return game;\n}\n\nfunction dumpMap(map: TilesMapCore): MapSerialized {\n  return {\n    width: map.width,\n    height: map.height,\n    tiles: dumpTiles(map),\n  };\n}\n\nfunction dumpTiles(map: TilesMapCore): TileSerialized[] {\n  // Store only changes from the last tile to keep save size minimal\n  const result: Partial<TileCore>[] = [];\n  let lastTile: Partial<TileCore> = {};\n  for (let x = 0; x < map.width; x++) {\n    for (let y = 0; y < map.height; y++) {\n      const tile = map.tiles[x][y];\n      const diff: Partial<TileCore> = {};\n\n      if (tile.seaLevel !== lastTile.seaLevel) {\n        diff.seaLevel = tile.seaLevel;\n      }\n      if (tile.climate !== lastTile.climate) {\n        diff.climate = tile.climate;\n      }\n      if (tile.landForm !== lastTile.landForm) {\n        diff.landForm = tile.landForm;\n      }\n      if (tile.forest !== lastTile.forest) {\n        diff.forest = tile.forest;\n      }\n      if (tile.wetlands !== lastTile.wetlands) {\n        diff.wetlands = tile.wetlands;\n      }\n      if (tile.improvement !== lastTile.improvement) {\n        diff.improvement = tile.improvement;\n      }\n      if (tile.road !== lastTile.road) {\n        diff.road = tile.road;\n      }\n\n      // The rivers tends to not repeat in subsequent tiles so instead of using diff let's just ignore empty rivers.\n      if (tile.riverParts.length) {\n        diff.riverParts = tile.riverParts;\n      }\n\n      result.push(diff);\n      lastTile = tile;\n    }\n  }\n  return result;\n}\n\nfunction loadMap(mapData: MapSerialized) {\n  const map = new TilesMapCore(mapData.width, mapData.height);\n  let lastTile: TileCore = map.tiles[0][0];\n  let index = 0;\n\n  for (let x = 0; x < mapData.width; x++) {\n    for (let y = 0; y < mapData.height; y++) {\n      const tileData = mapData.tiles[index];\n      const tile = map.tiles[x][y];\n\n      tile.climate =\n        tileData.climate !== undefined ? tileData.climate! : lastTile.climate;\n\n      tile.seaLevel =\n        tileData.seaLevel !== undefined\n          ? tileData.seaLevel!\n          : lastTile.seaLevel;\n\n      tile.landForm =\n        tileData.landForm !== undefined\n          ? tileData.landForm!\n          : lastTile.landForm;\n\n      tile.improvement =\n        tileData.improvement !== undefined\n          ? tileData.improvement!\n          : lastTile.improvement;\n\n      tile.road = tileData.road !== undefined ? tileData.road! : lastTile.road;\n\n      tile.riverParts = tileData.riverParts || [];\n\n      tile.forest =\n        tileData.forest !== undefined ? tileData.forest! : lastTile.forest;\n\n      lastTile = tile;\n      index++;\n    }\n  }\n\n  map.precompute();\n\n  return map;\n}\n\nfunction dumpPlayer(player: PlayerCore): PlayerSerialized {\n  return {\n    id: player.id,\n    ai: !!player.ai,\n    color: player.color,\n    exploredTiles: Array.from(player.exploredTiles).map((t) => t.id),\n    yieldsTotal: player.yields.total,\n  };\n}\n\nfunction loadPlayer(game: Game, data: PlayerSerialized) {\n  const player = new PlayerCore(game, data.color || 0);\n\n  if (data.ai) {\n    player.ai = new AIPlayer(player);\n  }\n\n  for (const tileId of data.exploredTiles) {\n    player.exploredTiles.add(game.map.tilesMap.get(tileId)!);\n  }\n  player.yields.total = data.yieldsTotal;\n  player.updateYields();\n  return player;\n}\n\nfunction loadCity(game: Game, cityData: CitySerialized) {\n  const tile = game.map.tilesMap.get(cityData.tile)!;\n  const player = game.players[cityData.player];\n  const city = game.citiesManager.spawn(tile, player, false);\n\n  if (!city) {\n    return;\n  }\n\n  city.name = cityData.name;\n  city.size = cityData.size;\n  city.totalFood = cityData.totalFood;\n  city.totalProduction = cityData.totalProduction;\n  city.totalCulture = cityData.totalCulture;\n\n  for (const tileIndex of cityData.tiles) {\n    city.addTile(game.map.tilesMap.get(tileIndex)!);\n  }\n\n  for (const tileIndex of cityData.workedTiles) {\n    city.workTile(game.map.tilesMap.get(tileIndex)!);\n  }\n\n  if (cityData.product) {\n    let productDefinition: ProductDefinition;\n\n    if (cityData.product.type === \"unit\") {\n      productDefinition = game.unitsManager.definitions.get(\n        cityData.product.id,\n      )!;\n    } else if (cityData.product.type === \"building\") {\n      productDefinition = BUILDINGS_MAP.get(cityData.product.id)!;\n    } else {\n      productDefinition = IDLE_PRODUCTS_MAP.get(cityData.product.id)!;\n    }\n\n    city.product = {\n      type: cityData.product.type,\n      productDefinition,\n    };\n  }\n\n  city.buildings = cityData.buildings.map((b) => BUILDINGS_MAP.get(b)!);\n  city.buildingsIds = new Set(city.buildings.map((b) => b.id));\n  city.updateYields();\n}\n\nfunction dumpCity(city: CityCore): CitySerialized {\n  return {\n    id: city.id,\n    name: city.name,\n    size: city.size,\n    player: city.player.id,\n    tile: city.tile.id,\n    totalFood: city.totalFood,\n    totalProduction: city.totalProduction,\n    totalCulture: city.totalCulture,\n    product: city.product\n      ? {\n          type: city.product.type,\n          id: city.product.productDefinition.id,\n        }\n      : null,\n    tiles: Array.from(city.tiles).map((tile) => tile.id),\n    workedTiles: Array.from(city.workedTiles).map((tile) => tile.id),\n    buildings: city.buildings.map((b) => b.id),\n  };\n}\n\nfunction dumpUnit(unit: UnitCore): UnitSerialized {\n  return {\n    id: unit.id,\n    tile: unit.tile.id,\n    definition: unit.definition.id,\n    actionPointsLeft: unit.actionPointsLeft,\n    player: unit.player.id,\n    order: unit.order,\n    path: unit.path?.map((row) => row.map((tile) => tile.id)) || null,\n  };\n}\n\nfunction loadUnit(game: Game, unitData: UnitSerialized) {\n  const tile = game.map.tilesMap.get(unitData.tile)!;\n  const player = game.players[unitData.player];\n  const unit = game.unitsManager.spawn(unitData.definition, tile, player);\n  unit.actionPointsLeft = unitData.actionPointsLeft;\n  unit.order = unitData.order;\n\n  unit.path =\n    unitData.path?.map((row) =>\n      row.map((tileId) => game.map.tilesMap.get(tileId)!),\n    ) || null;\n}\n","export enum TileImprovement {\n  farm,\n  mine,\n  sawmill,\n}\n\nexport enum TileRoad {\n  road,\n}\n\nexport const IMPROVEMENT_PUBLIC_WORKS_COSTS: Record<TileImprovement, number> = {\n  [TileImprovement.farm]: 15,\n  [TileImprovement.mine]: 15,\n  [TileImprovement.sawmill]: 15,\n};\n\nexport const IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN: Record<\n  TileImprovement,\n  number\n> = {\n  [TileImprovement.farm]: 1,\n  [TileImprovement.mine]: 1,\n  [TileImprovement.sawmill]: 1,\n};\n\nexport const ROAD_PUBLIC_WORKS_COSTS: Record<TileRoad, number> = {\n  [TileRoad.road]: 15,\n};\n\nexport const ROAD_PUBLIC_WORKS_COSTS_PER_TURN: Record<TileRoad, number> = {\n  [TileRoad.road]: 1,\n};\n","import { Yields, EMPTY_YIELDS } from \"./yields\";\nimport { TileImprovement, TileRoad } from \"./tile-improvements\";\nimport {\n  Climate,\n  LandForm,\n  SeaLevel,\n  TileDirection,\n  BaseTile,\n} from \"../shared\";\nimport { UnitCore } from \"./unit\";\nimport { CityCore } from \"./city\";\nimport { collector } from \"./collector\";\n\nconst BASE_CLIMATE_YIELDS: Record<Climate, Yields> = {\n  [Climate.arctic]: { ...EMPTY_YIELDS },\n  [Climate.continental]: { ...EMPTY_YIELDS, food: 1, production: 1 },\n  [Climate.desert]: {\n    ...EMPTY_YIELDS,\n  },\n  [Climate.oceanic]: { ...EMPTY_YIELDS, food: 2, production: 1 },\n  [Climate.savanna]: { ...EMPTY_YIELDS, food: 1, production: 1 },\n  [Climate.tropical]: { ...EMPTY_YIELDS, food: 1 },\n  [Climate.tundra]: { ...EMPTY_YIELDS, production: 1 },\n};\n\nconst BASE_LAND_FORM_YIELDS: Record<LandForm, Yields> = {\n  [LandForm.plains]: { ...EMPTY_YIELDS },\n  [LandForm.hills]: { ...EMPTY_YIELDS, food: -1 },\n  [LandForm.mountains]: { ...EMPTY_YIELDS, food: -Infinity, production: -5 },\n};\n\nexport class TileCore implements BaseTile {\n  climate = Climate.continental;\n  landForm = LandForm.plains;\n  seaLevel = SeaLevel.deep;\n  riverParts: TileDirection[] = [];\n  forest = false;\n  wetlands = false;\n  improvement: TileImprovement | null = null;\n  road: TileRoad | null = null;\n\n  units: UnitCore[] = [];\n  city: CityCore | null = null;\n  areaOf: CityCore | null = null;\n\n  yields: Yields = { ...EMPTY_YIELDS };\n\n  // cached data\n  neighbours: TileCore[] = [];\n  fullNeighbours: (TileCore | null)[] = []; // keeps neighbours in all directions, null if map border, can be indexed with TileDirection\n  neighboursCosts = new Map<TileCore, number>();\n  sweetSpotValue = 0; // used by ai to find good city location\n  passableArea = 0; // used by pathfinding to quickly decide if a path between two tiles exists\n\n  constructor(public id: number, public x: number, public y: number) {}\n\n  computeMovementCosts() {\n    for (const neighbour of this.neighbours) {\n      const dir = this.getDirectionTo(neighbour);\n      let cost = 1;\n      if (neighbour.seaLevel !== SeaLevel.none) {\n        cost = Infinity;\n      } else if (neighbour.landForm === LandForm.mountains) {\n        cost = Infinity;\n      } else if (neighbour.landForm === LandForm.hills) {\n        cost = 2;\n      } else {\n        if (this.riverParts.includes(dir)) {\n          cost = 3;\n        } else if (this.riverParts.length && neighbour.riverParts.length) {\n          cost = 0.5;\n        }\n      }\n      if (neighbour.road === TileRoad.road) {\n        cost /= 3;\n      }\n      this.neighboursCosts.set(neighbour, cost);\n    }\n  }\n\n  getDirectionTo(tile: TileCore): TileDirection {\n    if (tile.x === this.x - (this.y % 2 ? 0 : 1) && tile.y === this.y - 1) {\n      return TileDirection.NW;\n    }\n    if (tile.x === this.x + (this.y % 2 ? 1 : 0) && tile.y === this.y - 1) {\n      return TileDirection.NE;\n    }\n    if (tile.x === this.x + 1 && tile.y === this.y) {\n      return TileDirection.E;\n    }\n    if (tile.x === this.x + (this.y % 2 ? 1 : 0) && tile.y === this.y + 1) {\n      return TileDirection.SE;\n    }\n    if (tile.x === this.x - (this.y % 2 ? 0 : 1) && tile.y === this.y + 1) {\n      return TileDirection.SW;\n    }\n    if (tile.x === this.x - 1 && tile.y === this.y) {\n      return TileDirection.W;\n    }\n    return TileDirection.NONE;\n  }\n\n  getDistanceTo(tile: TileCore) {\n    // This is imprecise but good enough for now.\n    return Math.abs(this.x - tile.x) + Math.abs(this.y - tile.y);\n  }\n\n  computeYields() {\n    if (this.seaLevel === SeaLevel.deep) {\n      this.yields.food = 0;\n      this.yields.production = 0;\n    } else if (this.seaLevel === SeaLevel.shallow) {\n      this.yields.food = 1;\n      this.yields.production = 0;\n    } else {\n      const climateYields = BASE_CLIMATE_YIELDS[this.climate];\n      const landFormYields = BASE_LAND_FORM_YIELDS[this.landForm];\n      this.yields.food = climateYields.food + landFormYields.food;\n      this.yields.production =\n        climateYields.production + landFormYields.production;\n\n      if (this.forest) {\n        this.yields.food--;\n        this.yields.production++;\n      }\n\n      if (this.wetlands) {\n        this.yields.food--;\n        this.yields.production--;\n      }\n\n      if (this.riverParts.length) {\n        this.yields.food += this.climate === Climate.desert ? 3 : 1;\n      }\n\n      if (this.improvement === TileImprovement.farm) {\n        this.yields.food++;\n      } else if (this.improvement === TileImprovement.mine) {\n        this.yields.production++;\n      } else if (this.improvement === TileImprovement.sawmill) {\n        this.yields.production++;\n      }\n\n      this.yields.food = Math.max(0, this.yields.food);\n      this.yields.production = Math.max(0, this.yields.production);\n    }\n  }\n\n  get totalYields(): number {\n    return this.yields.food + this.yields.production;\n  }\n\n  getTilesInRange(range: number): Set<TileCore> {\n    const result = new Set<TileCore>([this]);\n    for (let i = 0; i < range; i++) {\n      let neighbours = new Set<TileCore>();\n      for (const tile of result) {\n        for (const neighbour of tile.neighbours) {\n          neighbours.add(neighbour);\n        }\n      }\n      for (const tile of neighbours) {\n        result.add(tile);\n      }\n    }\n    return result;\n  }\n\n  computeSweetSpotValue() {\n    this.sweetSpotValue = 0;\n    if (\n      this.areaOf ||\n      this.landForm === LandForm.mountains ||\n      this.seaLevel !== SeaLevel.none\n    ) {\n      return;\n    }\n    const tiles = this.getTilesInRange(3);\n    for (const tile of tiles) {\n      this.sweetSpotValue += tile.yields.food;\n      this.sweetSpotValue += tile.yields.production;\n    }\n  }\n\n  update() {\n    this.computeYields();\n    this.computeMovementCosts();\n    for (const neighbour of this.neighbours) {\n      // TODO this loop can be optimized by computing only the cost from neighbour to this tile.\n      neighbour.computeMovementCosts();\n    }\n    collector.tiles.add(this);\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { getTileNeighbours, getTileFullNeighbours } from \"../shared/hex-math\";\nimport { LandForm, SeaLevel } from \"../shared\";\n\nexport class TilesMapCore {\n  tiles: TileCore[][] = [];\n  tilesMap = new Map<number, TileCore>();\n\n  constructor(public width: number, public height: number) {\n    for (let x = 0; x < width; x++) {\n      const row: TileCore[] = [];\n      this.tiles.push(row);\n      for (let y = 0; y < height; y++) {\n        const tile = new TileCore(x * width + y, x, y);\n        row.push(tile);\n        this.tilesMap.set(tile.id, tile);\n      }\n    }\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        this.tiles[x][y].neighbours = getTileNeighbours(this.tiles, x, y);\n        this.tiles[x][y].fullNeighbours = getTileFullNeighbours(\n          this.tiles,\n          x,\n          y,\n        );\n      }\n    }\n  }\n\n  precompute() {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.tiles[x][y];\n        tile.computeYields();\n        tile.computeMovementCosts();\n        tile.computeSweetSpotValue();\n      }\n    }\n    this.precomputePassableAreas();\n  }\n\n  private precomputePassableAreas() {\n    const visited = new Set<TileCore>();\n    let areaId = 1;\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.tiles[x][y];\n        if (visited.has(tile)) {\n          continue;\n        }\n\n        if (tile.landForm === LandForm.mountains) {\n          continue;\n        }\n\n        this.computePassableArea(tile, areaId++, visited);\n      }\n    }\n  }\n\n  private computePassableArea(\n    startTile: TileCore,\n    areaId: number,\n    visited: Set<TileCore>,\n  ) {\n    // Cannot use recursion here because it fails with too many recursion levels on bigger maps. Using queue instead.\n    const queue: TileCore[] = [startTile];\n    visited.add(startTile);\n\n    while (queue.length) {\n      const tile = queue.shift()!;\n      tile.passableArea = areaId;\n\n      for (const neighbour of tile.neighbours) {\n        if (visited.has(neighbour)) {\n          continue;\n        }\n\n        const isMountains = neighbour.landForm === LandForm.mountains;\n\n        const areBothLand =\n          tile.seaLevel === SeaLevel.none &&\n          neighbour.seaLevel === SeaLevel.none;\n\n        const areBothWater =\n          tile.seaLevel !== SeaLevel.none &&\n          neighbour.seaLevel !== SeaLevel.none;\n\n        if (!isMountains && (areBothLand || areBothWater)) {\n          visited.add(neighbour);\n          queue.push(neighbour);\n        }\n      }\n    }\n  }\n\n  get(x: number, y: number): TileCore | null {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return null;\n    }\n    return this.tiles[x][y];\n  }\n}\n","import { Game } from \"./game\";\nimport { UnitCore } from \"./unit\";\nimport {\n  TileImprovement,\n  TileRoad,\n  IMPROVEMENT_PUBLIC_WORKS_COSTS,\n  IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN,\n  ROAD_PUBLIC_WORKS_COSTS,\n  ROAD_PUBLIC_WORKS_COSTS_PER_TURN,\n} from \"./tile-improvements\";\nimport { isImprovementPossible, isRoadPossible } from \"../shared\";\n\nexport type UnitAction =\n  | \"foundCity\"\n  | \"buildRoad\"\n  | \"buildFarm\"\n  | \"buildMine\"\n  | \"buildSawmill\";\n\nconst ACTION_TO_IMPROVEMENT: Partial<Record<UnitAction, TileImprovement>> = {\n  buildFarm: TileImprovement.farm,\n  buildMine: TileImprovement.mine,\n  buildSawmill: TileImprovement.sawmill,\n};\n\nexport function getPublicWorksRequired(action: UnitAction) {\n  if (action === \"buildRoad\") {\n    return ROAD_PUBLIC_WORKS_COSTS[TileRoad.road];\n  }\n  const improvement = ACTION_TO_IMPROVEMENT[action];\n  if (improvement !== undefined) {\n    return IMPROVEMENT_PUBLIC_WORKS_COSTS[improvement];\n  }\n  return 0;\n}\n\nexport function getPublicWorksPerTurn(action: UnitAction) {\n  if (action === \"buildRoad\") {\n    return ROAD_PUBLIC_WORKS_COSTS_PER_TURN[TileRoad.road];\n  }\n  const improvement = ACTION_TO_IMPROVEMENT[action];\n  if (improvement !== undefined) {\n    return IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN[improvement];\n  }\n  return 0;\n}\n\nexport abstract class ActionRequirement {\n  static id: string;\n\n  id: string;\n\n  constructor() {\n    this.id = this.constructor[\"id\"];\n  }\n\n  abstract check(unit: UnitCore, action: UnitAction): boolean;\n}\n\nexport class OwnTileRequirement extends ActionRequirement {\n  id = \"ownTile\";\n\n  check(unit: UnitCore) {\n    return unit.tile.areaOf?.player === unit.player;\n  }\n}\n\nexport class NotForeignTileRequirement extends ActionRequirement {\n  id = \"notForeignTile\";\n\n  check(unit: UnitCore) {\n    return !unit.tile.areaOf || unit.tile.areaOf?.player === unit.player;\n  }\n}\n\nexport class ImprovementNotYetBuiltRequirement extends ActionRequirement {\n  id = \"sameImprovement\";\n\n  constructor(public improvement: TileImprovement) {\n    super();\n  }\n\n  check(unit: UnitCore) {\n    return unit.tile.improvement !== this.improvement;\n  }\n}\nexport class IsImprovementPossibleRequirement extends ActionRequirement {\n  id = \"improvementPossible\";\n\n  constructor(public improvement: TileImprovement) {\n    super();\n  }\n\n  check(unit: UnitCore) {\n    return isImprovementPossible(unit.tile, this.improvement);\n  }\n}\n\nexport class NoRoadRequirement extends ActionRequirement {\n  id = \"noRoad\";\n\n  check(unit: UnitCore) {\n    return unit.tile.road === null;\n  }\n}\n\nexport class isRoadPossibleRequirement extends ActionRequirement {\n  id = \"roadPossible\";\n\n  check(unit: UnitCore) {\n    return isRoadPossible(unit.tile);\n  }\n}\n\nexport class PublicWorksPointsRequirement extends ActionRequirement {\n  id = \"publicWorks\";\n\n  check(unit: UnitCore, action: UnitAction) {\n    return (\n      unit.player.yields.total.publicWorks >= getPublicWorksRequired(action)\n    );\n  }\n}\n\ninterface ActionDefinition {\n  action: UnitAction;\n  name: string;\n  fn: (game: Game, unit: UnitCore) => void;\n  requirements: ActionRequirement[];\n}\n\nfunction foundCity(game: Game, unit: UnitCore) {\n  const city = game.citiesManager.spawn(unit.tile, unit.player);\n  if (city) {\n    game.unitsManager.destroy(unit);\n  }\n}\n\nfunction buildImprovement(\n  game: Game,\n  unit: UnitCore,\n  improvement: TileImprovement,\n) {\n  unit.actionPointsLeft = 0;\n  unit.tile.improvement = improvement;\n  unit.tile.update();\n  unit.player.updateUnitsWithoutOrders();\n\n  unit.player.yields.total.publicWorks -=\n    IMPROVEMENT_PUBLIC_WORKS_COSTS[improvement];\n\n  unit.player.yields.costs.publicWorks +=\n    IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN[improvement];\n\n  unit.player.yields.perTurn.publicWorks -=\n    IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN[improvement];\n}\n\nfunction buildRoad(game: Game, unit: UnitCore) {\n  unit.actionPointsLeft = 0;\n  unit.tile.road = TileRoad.road;\n  unit.tile.update();\n  for (const neighbour of unit.tile.neighbours) {\n    neighbour.update();\n  }\n  unit.player.updateUnitsWithoutOrders();\n\n  unit.player.yields.total.publicWorks -=\n    ROAD_PUBLIC_WORKS_COSTS[TileRoad.road];\n\n  unit.player.yields.costs.publicWorks +=\n    ROAD_PUBLIC_WORKS_COSTS_PER_TURN[TileRoad.road];\n\n  unit.player.yields.perTurn.publicWorks -=\n    ROAD_PUBLIC_WORKS_COSTS_PER_TURN[TileRoad.road];\n}\n\nexport const ACTIONS: Record<UnitAction, ActionDefinition> = {\n  foundCity: {\n    action: \"foundCity\",\n    name: \"Found a city\",\n    fn: foundCity,\n    requirements: [new NotForeignTileRequirement()], // TODO add minimal distance to other city\n  },\n  buildFarm: {\n    action: \"buildFarm\",\n    name: \"Build a farm\",\n    fn: (game, unit) => buildImprovement(game, unit, TileImprovement.farm),\n    requirements: [\n      new OwnTileRequirement(),\n      new ImprovementNotYetBuiltRequirement(TileImprovement.farm),\n      new IsImprovementPossibleRequirement(TileImprovement.farm),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n  buildMine: {\n    action: \"buildMine\",\n    name: \"Build a mine\",\n    fn: (game, unit) => buildImprovement(game, unit, TileImprovement.mine),\n    requirements: [\n      new OwnTileRequirement(),\n      new ImprovementNotYetBuiltRequirement(TileImprovement.mine),\n      new IsImprovementPossibleRequirement(TileImprovement.mine),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n  buildSawmill: {\n    action: \"buildSawmill\",\n    name: \"Build a sawmill\",\n    fn: (game, unit) => buildImprovement(game, unit, TileImprovement.sawmill),\n    requirements: [\n      new OwnTileRequirement(),\n      new ImprovementNotYetBuiltRequirement(TileImprovement.sawmill),\n      new IsImprovementPossibleRequirement(TileImprovement.sawmill),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n  buildRoad: {\n    action: \"buildRoad\",\n    name: \"Build a road\",\n    fn: (game, unit) => buildRoad(game, unit),\n    requirements: [\n      new NoRoadRequirement(),\n      new isRoadPossibleRequirement(),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n};\n","import { UnitDefinition } from \"./unit.interface\";\nimport { UnitCore } from \"./unit\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { UNITS_DEFINITIONS } from \"../data/units\";\nimport { PlayerCore } from \"./player\";\nimport { TileCore } from \"./tile\";\nimport { Game } from \"./game\";\nimport { collector } from \"./collector\";\n\nexport class UnitsManager {\n  definitions = new Map<string, UnitDefinition>();\n\n  units: UnitCore[] = [];\n\n  unitsMap = new Map<number, UnitCore>();\n\n  private lastId = 0;\n\n  constructor(private game: Game) {\n    for (const definition of UNITS_DEFINITIONS) {\n      this.definitions.set(definition.id, definition);\n    }\n  }\n\n  spawn(id: string, tile: TileCore, player: PlayerCore) {\n    const definition = this.definitions.get(id);\n    if (!definition) {\n      throw Error(`UnitsManager: No unit with id \"${id}\"`);\n    }\n\n    const unit = new UnitCore(tile, definition, player);\n    unit.id = this.lastId++;\n\n    this.units.push(unit);\n    this.unitsMap.set(unit.id, unit);\n    player.units.push(unit);\n    tile.units.push(unit);\n\n    unit.player.exploreTiles(unit.tile.getTilesInRange(2));\n\n    unit.player.unitsWithoutOrders.push(unit);\n\n    collector.units.add(unit);\n\n    return unit;\n  }\n\n  destroy(unit: UnitCore) {\n    // TODO rewrite to sets for better performance?\n\n    this.unitsMap.delete(unit.id);\n\n    let index = this.units.indexOf(unit);\n    if (index !== -1) {\n      this.units.splice(index, 1);\n    }\n\n    index = unit.player.units.indexOf(unit);\n    if (index !== -1) {\n      unit.player.units.splice(index, 1);\n    }\n\n    index = unit.tile.units.indexOf(unit);\n    if (index !== -1) {\n      unit.tile.units.splice(index, 1);\n    }\n\n    unit.player.updateUnitsWithoutOrders();\n    collector.unitsDestroyed.add(unit.id);\n  }\n\n  private move(unit: UnitCore, tile: TileCore) {\n    if (!unit.actionPointsLeft) {\n      return;\n    }\n\n    const cost = this.getMovementCost(unit, tile);\n    if (cost === Infinity) {\n      return;\n    }\n\n    if (unit.definition.power) {\n      if (\n        tile.units.length &&\n        tile.units.find((u) => u.player !== unit.player)\n      ) {\n        // battle\n      } else if (tile.city && tile.city.player !== unit.player) {\n        tile.city.changeOwner(unit.player);\n      }\n    }\n\n    const index = unit.tile.units.indexOf(unit);\n    if (index !== -1) {\n      unit.tile.units.splice(index, 1);\n    }\n    tile.units.push(unit);\n    unit.tile = tile;\n\n    unit.actionPointsLeft = Math.max(unit.actionPointsLeft - cost, 0);\n\n    unit.player.exploreTiles(tile.getTilesInRange(2));\n  }\n\n  moveAlongPath(unit: UnitCore) {\n    if (!unit.path) {\n      unit.setOrder(null);\n      return;\n    }\n\n    unit.setOrder(unit.path.length ? \"go\" : null);\n\n    collector.units.add(unit);\n\n    while (unit.actionPointsLeft && unit.path.length) {\n      this.move(unit, unit.path[0][0]);\n      unit.path[0].shift();\n      if (!unit.path[0].length) {\n        unit.path.shift();\n      }\n      if (!unit.path.length) {\n        unit.path = null;\n        unit.setOrder(null);\n        return;\n      }\n    }\n  }\n\n  getMovementCost(unit: UnitCore, target: TileCore) {\n    return unit.tile.neighboursCosts.get(target) || Infinity;\n  }\n\n  nextTurn() {\n    for (const unit of this.units) {\n      if (unit.path) {\n        this.moveAlongPath(unit);\n      }\n      if (unit.order === \"skip\") {\n        unit.setOrder(null);\n      }\n      unit.actionPointsLeft = unit.definition.actionPoints;\n    }\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { UnitDefinition } from \"./unit.interface\";\nimport { PlayerCore } from \"./player\";\nimport { UnitAction, ACTIONS } from \"./unit-actions\";\nimport { UNITS_DEFINITIONS } from \"../data/units\";\nimport { collector } from \"./collector\";\n\nexport type UnitOrder = \"go\" | \"skip\" | \"sleep\" | null;\n\nexport const UNITS_MAP = new Map<string, UnitDefinition>();\n\nfor (const definition of UNITS_DEFINITIONS) {\n  UNITS_MAP.set(definition.id, definition);\n}\n\nexport class UnitCore {\n  id: number;\n  actionPointsLeft: number;\n  path: TileCore[][] | null;\n\n  order: UnitOrder = null;\n\n  constructor(\n    public tile: TileCore,\n    public definition: UnitDefinition,\n    public player: PlayerCore,\n  ) {\n    this.actionPointsLeft = definition.actionPoints;\n  }\n\n  doAction(action: UnitAction) {\n    if (!this.canDoAction(action)) {\n      return;\n    }\n\n    ACTIONS[action].fn(this.player.game, this);\n    collector.units.add(this);\n  }\n\n  canDoAction(action: UnitAction): boolean {\n    if (!this.actionPointsLeft) {\n      return false;\n    }\n\n    if (!this.definition.actions.includes(action)) {\n      return false;\n    }\n\n    for (const r of ACTIONS[action].requirements) {\n      if (!r.check(this, action)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getFailedActionRequirements(action: UnitAction): string[] {\n    return ACTIONS[action].requirements\n      .filter((r) => !r.check(this, action))\n      .map((r) => r.id);\n  }\n\n  setOrder(order: UnitOrder) {\n    this.order = order;\n    this.player.updateUnitsWithoutOrders();\n  }\n\n  getPathDestination(): TileCore | null {\n    if (!this.path) {\n      return null;\n    }\n\n    const lastPathTurn = this.path[this.path.length - 1];\n    return lastPathTurn[lastPathTurn.length - 1];\n  }\n\n  getRange(): Set<TileCore> {\n    const result = new Set<TileCore>();\n    const actionPointsLeftAtTile = new Map<TileCore, number>();\n\n    this._getRange(\n      this.tile,\n      this.actionPointsLeft,\n      result,\n      actionPointsLeftAtTile,\n    );\n\n    if (result.size === 1) {\n      result.delete(this.tile);\n    }\n\n    return result;\n  }\n\n  private _getRange(\n    tile = this.tile,\n    actionPointsLeft = this.actionPointsLeft,\n    result: Set<TileCore>,\n    actionPointsLeftAtTile: Map<TileCore, number>,\n  ) {\n    result.add(tile);\n\n    if (actionPointsLeft <= 0) {\n      return result;\n    }\n\n    for (const neighbour of tile.neighbours) {\n      const oldActionPointsLeft = actionPointsLeftAtTile.get(neighbour);\n\n      const cost = tile.neighboursCosts.get(neighbour)!;\n      if (cost === Infinity) {\n        continue;\n      }\n\n      const newActionPointsLeft = actionPointsLeft - cost;\n\n      if (!oldActionPointsLeft || newActionPointsLeft > oldActionPointsLeft) {\n        actionPointsLeftAtTile.set(neighbour, newActionPointsLeft);\n\n        this._getRange(\n          neighbour,\n          newActionPointsLeft,\n          result,\n          actionPointsLeftAtTile,\n        );\n      }\n    }\n\n    return result;\n  }\n}\n","export interface Yields {\n  food: number;\n  production: number;\n  culture: number;\n  publicWorks: number;\n}\n\nexport const EMPTY_YIELDS: Yields = {\n  food: 0,\n  production: 0,\n  culture: 0,\n  publicWorks: 0,\n};\n\nexport function zeroYields(yields: Yields) {\n  yields.food = 0;\n  yields.production = 0;\n  yields.culture = 0;\n  yields.publicWorks = 0;\n}\n\nexport function addYields(targetYields: Yields, yields: Yields) {\n  targetYields.food += yields.food;\n  targetYields.production += yields.production;\n  targetYields.culture += yields.culture;\n  targetYields.publicWorks += yields.publicWorks;\n}\n\nexport function subtractYields(targetYields: Yields, yields: Yields) {\n  targetYields.food -= yields.food;\n  targetYields.production -= yields.production;\n  targetYields.culture -= yields.culture;\n  targetYields.publicWorks -= yields.publicWorks;\n}\n\nexport function copyYields(targetYields: Yields, yields: Yields) {\n  targetYields.food = yields.food;\n  targetYields.production = yields.production;\n  targetYields.culture = yields.culture;\n  targetYields.publicWorks = yields.publicWorks;\n}\n\nexport function roundYields(yields: Yields) {\n  yields.food = Math.ceil(yields.food);\n  yields.production = Math.ceil(yields.production);\n  yields.culture = Math.ceil(yields.culture);\n  yields.publicWorks = Math.ceil(yields.publicWorks);\n}\n","import { Building } from \"../core/buildings\";\nimport { BuildingRequirement } from \"../core/product\";\n\nexport const BUILDINGS: Building[] = [\n  {\n    id: \"granary\",\n    name: \"Granary\",\n    productionCost: 40,\n    bonuses: { yieldValue: { food: 3 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"well\",\n    name: \"Well\",\n    productionCost: 20,\n    bonuses: { yieldValue: { food: 1 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"bigGranary\",\n    name: \"Grand granary\",\n    productionCost: 100,\n    bonuses: { yieldFactor: { food: 0.2 } },\n    requirements: [new BuildingRequirement(\"granary\")],\n    weakRequirements: [],\n  },\n  {\n    id: \"workshop\",\n    name: \"Workshop\",\n    productionCost: 80,\n    bonuses: { yieldValue: { production: 5 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"bigWorkshop\",\n    name: \"Grand workshop\",\n    productionCost: 200,\n    bonuses: { yieldFactor: { production: 0.2 } },\n    requirements: [new BuildingRequirement(\"workshop\")],\n    weakRequirements: [],\n  },\n  {\n    id: \"slaveMarket\",\n    name: \"Slave market\",\n    productionCost: 50,\n    bonuses: { yieldValue: { publicWorks: 2 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"bigWorkshop\",\n    name: \"Grand workshop\",\n    productionCost: 200,\n    bonuses: { yieldFactor: { production: 0.2 } },\n    requirements: [new BuildingRequirement(\"workshop\")],\n    weakRequirements: [],\n  },\n  {\n    id: \"monument\",\n    name: \"Monument\",\n    productionCost: 30,\n    bonuses: { yieldValue: { culture: 2 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"allDoingBuilding\",\n    name: \"All doing building\",\n    productionCost: 500,\n    bonuses: {\n      yieldValue: { food: 1, production: 1 },\n      yieldFactor: { food: 0.1, production: 0.1 },\n    },\n    requirements: [\n      new BuildingRequirement(\"bigGranary\"),\n      new BuildingRequirement(\"bigWorkshop\"),\n    ],\n    weakRequirements: [],\n  },\n];\n","import { IdleProduct } from \"../core/idle-product\";\n\nexport const IDLE_PRODUCTS: IdleProduct[] = [\n  {\n    id: \"growth\",\n    name: \"Growth\",\n    productionCost: Infinity,\n    requirements: [],\n    weakRequirements: [],\n    bonuses: { transferProductionToFood: 0.25 },\n  },\n  {\n    id: \"culture\",\n    name: \"Culture\",\n    productionCost: Infinity,\n    requirements: [],\n    weakRequirements: [],\n    bonuses: { transferProductionToCulture: 0.25 },\n  },\n  {\n    id: \"public-works\",\n    name: \"Public works\",\n    productionCost: Infinity,\n    requirements: [],\n    weakRequirements: [],\n    bonuses: { transferProductionToPublicWorks: 0.25 },\n  },\n];\n","import { UnitDefinition } from \"../core/unit.interface\";\nimport { BuildingRequirement, SizeRequirement } from \"../core/product\";\n\nexport const UNITS_DEFINITIONS: UnitDefinition[] = [\n  {\n    id: \"settler\",\n    name: \"Settler\",\n    type: \"civilian\",\n    actionPoints: 2,\n    power: 0,\n    actions: [\"foundCity\"],\n    productionCost: 50,\n    requirements: [],\n    weakRequirements: [\n      new BuildingRequirement(\"granary\"),\n      new SizeRequirement(3),\n    ],\n  },\n  {\n    id: \"worker\",\n    name: \"Worker\",\n    type: \"civilian\",\n    actionPoints: 2,\n    power: 0,\n    actions: [\"buildFarm\", \"buildMine\", \"buildSawmill\", \"buildRoad\"],\n    productionCost: 20,\n    requirements: [],\n    weakRequirements: [new SizeRequirement(2)],\n  },\n  {\n    id: \"scout\",\n    name: \"Scout\",\n    type: \"military\",\n    actionPoints: 2,\n    power: 2,\n    actions: [],\n    productionCost: 10,\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"warrior\",\n    name: \"Warrior\",\n    type: \"military\",\n    actionPoints: 2,\n    power: 5,\n    actions: [],\n    productionCost: 30,\n    requirements: [],\n    weakRequirements: [],\n  },\n];\n","import * as SimplexNoise from \"simplex-noise\";\n\nimport { MapGenerator } from \"./map-generator.interface\";\nimport { TilesMapCore } from \"../core/tiles-map\";\nimport {\n  findCoastline,\n  placeRiverBetweenTiles,\n  POSSIBLE_BORDER_PATHS,\n} from \"./utils\";\nimport { TileCore } from \"../core/tile\";\nimport {\n  LandForm,\n  Climate,\n  SeaLevel,\n  TileDirection,\n  areWetlandsPossible,\n  isForestable,\n} from \"../shared\";\nimport { getTileInDirection } from \"../shared/hex-math\";\n\ninterface TileMetadata {\n  height: number;\n  humidity: number;\n  temperature: number;\n}\n\nexport class SimplexMapGenerator implements MapGenerator {\n  private map: TilesMapCore;\n\n  private width: number;\n\n  private height: number;\n\n  private seed: string | undefined;\n\n  private uniformity: number;\n\n  private seaLevel: number;\n\n  private startingLocations: TileCore[] = [];\n\n  private riversSources: TileCore[] = [];\n\n  private metadata = new Map<TileCore, TileMetadata>();\n\n  constructor(private startingLocationsCount: number) {}\n\n  getStartingLocations() {\n    return this.startingLocations;\n  }\n\n  generate(\n    width: number,\n    height: number,\n    seed: string | undefined = undefined,\n    uniformity: number = 0.5,\n    seaLevel = 0,\n  ) {\n    this.map = new TilesMapCore(width, height);\n    this.width = width;\n    this.height = height;\n    this.seed = seed;\n    this.uniformity = uniformity;\n    this.seaLevel = seaLevel;\n\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const metadata: TileMetadata = {\n          height: 0,\n          humidity: 0,\n          temperature: 0,\n        };\n        this.metadata.set(this.map.tiles[x][y], metadata);\n      }\n    }\n\n    this.generateHeightmap();\n\n    this.generateTemperature();\n\n    this.generateHumidity();\n\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.map.tiles[x][y];\n        const metadata = this.metadata.get(tile)!;\n        if (metadata.height > 1.3) {\n          tile.landForm = LandForm.mountains;\n        } else if (metadata.height > 0.25) {\n          tile.landForm = LandForm.hills;\n        }\n\n        if (metadata.temperature < 0.2) {\n          if (metadata.temperature < 0.07) {\n            tile.climate = Climate.arctic;\n          } else {\n            tile.climate = Climate.tundra;\n          }\n          continue;\n        }\n\n        if (metadata.humidity < 0.1) {\n          tile.climate = Climate.desert;\n        } else if (metadata.humidity < 0.3) {\n          tile.climate = Climate.savanna;\n        } else if (metadata.humidity < 0.7 && metadata.temperature < 0.5) {\n          tile.climate = Climate.continental;\n        } else {\n          tile.climate =\n            metadata.temperature > 0.5 ? Climate.tropical : Climate.oceanic;\n        }\n      }\n    }\n\n    for (const [tile, value, _] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.015, 1],\n          [0.06, 1],\n          [0.3, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      const bonus = tile.climate === Climate.tropical ? 0.3 : 0;\n      if (value + bonus > -0.2 && isForestable(tile)) {\n        tile.forest = true;\n      }\n    }\n\n    this.fixShallowWater();\n\n    this.adjustHeightmap();\n\n    this.placeRivers();\n\n    this.placeWetlands();\n\n    this.findStartingPositions();\n\n    return this.map;\n  }\n\n  private generateHeightmap() {\n    const size = Math.max(this.width, this.height);\n    const noiseLayersCount = Math.floor(Math.pow(size, 0.4));\n\n    const noiseScales: number[][] = [];\n    for (let i = 0; i < noiseLayersCount; i++) {\n      noiseScales.push([Math.pow(0.6, i + 4), 1 + this.uniformity * i]);\n    }\n    const maxValue = noiseScales.reduce(\n      (total, scaleAndIntensity) => total + scaleAndIntensity[1],\n      0,\n    );\n    const seaLevel = maxValue * this.seaLevel;\n\n    const coastlineNoise = new ComplexNoise(noiseScales, this.seed);\n\n    const heightmapNoise = new ComplexNoise(\n      [\n        [0.015, 1],\n        [0.06, 1],\n        [0.3, 1],\n      ],\n      this.seed,\n    );\n\n    for (let [tile, value, _] of this.getNoisedTiles(coastlineNoise)) {\n      let height = 0;\n\n      // Adjust horizontal edges to be more likely sea.\n      const distanceToEdge = Math.min(tile.x, this.width - tile.x);\n      const edgeThrehold = this.width * 0.1;\n      if (distanceToEdge < edgeThrehold) {\n        value -=\n          (maxValue / 2) *\n          Math.cos((Math.PI / 2 / edgeThrehold) * distanceToEdge);\n      }\n\n      if (value > seaLevel) {\n        height = value;\n        tile.seaLevel = SeaLevel.none;\n        if (value > 0.05 && Math.random() > 0.97) {\n          this.riversSources.push(tile);\n        }\n        height = heightmapNoise.at(tile.x, tile.y);\n      }\n      this.metadata.get(tile)!.height = height;\n    }\n  }\n\n  private generateTemperature() {\n    for (const [tile, value, longitude] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.012, 1],\n          [0.07, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      const base = (1 - longitude) / 2;\n      const noise = ((value + 1) / 2) * (1 - longitude);\n      const metadata = this.metadata.get(tile)!;\n      metadata.temperature = Math.max(base, Math.min(1, base + noise));\n    }\n  }\n\n  private generateHumidity() {\n    for (const [tile, value, longitude] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.025, 1],\n          [0.2, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      const x = longitude * 10;\n      const base = x < Math.PI * 1.5 ? (Math.cos(x) + 1) / 2 - 0.5 : 0;\n      const noise = (value + 1) / 2;\n      const metadata = this.metadata.get(tile)!;\n      metadata.humidity = Math.max(0, Math.min(1, base * 0.8 + noise));\n    }\n  }\n\n  private *getNoisedTiles(\n    noise: ComplexNoise,\n  ): Iterable<[TileCore, number, number]> {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const noiseValue = noise.at(x, y);\n        const halfHeight = Math.floor(this.height / 2);\n        const longitude = Math.abs((y - halfHeight) / halfHeight);\n        yield [this.map.tiles[x][y], noiseValue, longitude];\n      }\n    }\n  }\n\n  private fixShallowWater() {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.map.tiles[x][y];\n        if (tile.seaLevel === SeaLevel.none) {\n          for (const neighbour of tile.neighbours) {\n            if (neighbour.seaLevel === SeaLevel.deep) {\n              neighbour.seaLevel = SeaLevel.shallow;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private adjustHeightmap() {\n    // Make heighmap suitable for rivers placement - the deeper into land the higher.\n    let currentTiles = findCoastline(this.map.tiles);\n    const nextTiles = new Set<TileCore>();\n    const visitedTiles = new Set<TileCore>(currentTiles);\n    let offset = 0;\n    while (currentTiles.length) {\n      offset += 0.7;\n      for (const tile of currentTiles) {\n        for (const neighbour of tile.neighbours) {\n          if (\n            neighbour.seaLevel === SeaLevel.none &&\n            !visitedTiles.has(neighbour)\n          ) {\n            visitedTiles.add(neighbour);\n            nextTiles.add(neighbour);\n            this.metadata.get(neighbour)!.height += offset;\n          }\n        }\n      }\n      currentTiles = Array.from(nextTiles);\n      nextTiles.clear();\n    }\n  }\n\n  private placeRivers() {\n    for (const tile of this.riversSources) {\n      if (tile.riverParts.length) {\n        continue;\n      }\n\n      let ok = true;\n      for (const neighbour of tile.neighbours) {\n        if (neighbour.seaLevel !== SeaLevel.none) {\n          ok = false;\n        }\n      }\n\n      if (ok) {\n        this.buildRiverPath(tile, Math.round(Math.random() * 5));\n      }\n    }\n  }\n\n  private buildRiverPath(tile: TileCore, direction: TileDirection) {\n    if (direction === TileDirection.NONE) {\n      return;\n    }\n\n    const possibleNeighboursDirections = POSSIBLE_BORDER_PATHS[direction];\n\n    const pairs = possibleNeighboursDirections\n      .map((pair) => {\n        return pair.map((dir) => {\n          if (dir === TileDirection.NONE) {\n            return tile;\n          }\n          return getTileInDirection(this.map.tiles, tile, dir);\n        });\n      })\n      .filter(\n        (pair) =>\n          pair[0] &&\n          pair[1] &&\n          pair[0].seaLevel === SeaLevel.none &&\n          pair[1].seaLevel === SeaLevel.none &&\n          pair[0].riverParts.length < 4 && // small loops prevention, big loops are still an issue\n          pair[1].riverParts.length < 4,\n      ) as [TileCore, TileCore][];\n\n    if (pairs.length === 0) {\n      return;\n    }\n\n    let pairToPlace: [TileCore, TileCore];\n\n    if (pairs.length === 1) {\n      pairToPlace = pairs[0];\n    } else {\n      const [pairA, pairB] = pairs;\n\n      const heightA =\n        (this.metadata.get(pairA[0])!.height +\n          this.metadata.get(pairA[1])!.height) /\n        2;\n      const heightB =\n        (this.metadata.get(pairB[0])!.height +\n          this.metadata.get(pairB[1])!.height) /\n        2;\n\n      pairToPlace = heightA < heightB ? pairA : pairB;\n    }\n\n    if (placeRiverBetweenTiles(...pairToPlace)) {\n      this.buildRiverPath(\n        pairToPlace[0],\n        pairToPlace[0].getDirectionTo(pairToPlace[1]),\n      );\n    }\n  }\n\n  placeWetlands() {\n    for (const [tile, value, _] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.021, 1],\n          [0.08, 1],\n          [0.2, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      if (value > 0 && areWetlandsPossible(tile)) {\n        tile.wetlands = true;\n      }\n    }\n  }\n\n  private findStartingPositions() {\n    const maxTries = 10000;\n    let tries = 0;\n    while (\n      tries < maxTries &&\n      this.startingLocations.length < this.startingLocationsCount\n    ) {\n      const x = Math.floor(Math.random() * this.width);\n      const y = Math.floor(Math.random() * this.height);\n      const tile = this.map.tiles[x][y];\n      if (\n        tile.seaLevel === SeaLevel.none &&\n        tile.landForm !== LandForm.mountains &&\n        !this.startingLocations.includes(tile)\n      ) {\n        this.startingLocations.push(tile);\n      }\n      tries++;\n    }\n  }\n}\n\nclass ComplexNoise {\n  private noises: SimplexNoise[];\n\n  constructor(private scales: number[][], seed: string | undefined) {\n    this.noises = scales.map(() => new SimplexNoise(seed));\n  }\n\n  at(x: number, y: number) {\n    let noiseValue = 0;\n    for (let i = 0; i < this.noises.length; i++) {\n      const [scale, intensity] = this.scales[i];\n      noiseValue += this.noises[i].noise2D(x * scale, y * scale) * intensity;\n    }\n    return noiseValue;\n  }\n}\n","import { TileCore } from \"../core/tile\";\nimport { SeaLevel, TileDirection } from \"../shared\";\n\nexport function findCoastline(tiles: TileCore[][]): TileCore[] {\n  const coastline: TileCore[] = [];\n  for (let x = 0; x < tiles.length; x++) {\n    for (let y = 0; y < tiles[x].length; y++) {\n      const tile = tiles[x][y];\n      if (tile.seaLevel !== SeaLevel.none) {\n        continue;\n      }\n      if (tile.neighbours.find((t) => t.seaLevel !== SeaLevel.none)) {\n        coastline.push(tile);\n      }\n    }\n  }\n  return coastline;\n}\n\nexport function placeRiverBetweenTiles(tileA: TileCore, tileB: TileCore) {\n  const direction = tileA.getDirectionTo(tileB);\n  if (tileA.riverParts.includes(direction)) {\n    return false;\n  }\n  tileA.riverParts.push(direction);\n  tileB.riverParts.push(OPPOSITE_DIRECTIONS[direction]);\n  return true;\n}\n\n// first direction is clockwise, second is counterclockwise\nexport const POSSIBLE_RIVER_DIRECTION_FROM_WATER_TILE: Record<\n  TileDirection,\n  [TileDirection, TileDirection]\n> = {\n  [TileDirection.NW]: [TileDirection.NE, TileDirection.W],\n  [TileDirection.NE]: [TileDirection.E, TileDirection.NW],\n  [TileDirection.E]: [TileDirection.SE, TileDirection.NE],\n  [TileDirection.SE]: [TileDirection.SW, TileDirection.E],\n  [TileDirection.SW]: [TileDirection.W, TileDirection.SE],\n  [TileDirection.W]: [TileDirection.NW, TileDirection.SW],\n  [TileDirection.NONE]: [TileDirection.NONE, TileDirection.NONE],\n};\n\n// flow is clockwise for first tile\nexport const POSSIBLE_BORDER_PATHS: Record<\n  TileDirection,\n  [[TileDirection, TileDirection], [TileDirection, TileDirection]]\n> = {\n  [TileDirection.NW]: [\n    [TileDirection.NE, TileDirection.NW],\n    [TileDirection.NONE, TileDirection.NE],\n  ],\n  [TileDirection.NE]: [\n    [TileDirection.E, TileDirection.NE],\n    [TileDirection.NONE, TileDirection.E],\n  ],\n  [TileDirection.E]: [\n    [TileDirection.SE, TileDirection.E],\n    [TileDirection.NONE, TileDirection.SE],\n  ],\n  [TileDirection.SE]: [\n    [TileDirection.SW, TileDirection.SE],\n    [TileDirection.NONE, TileDirection.SW],\n  ],\n  [TileDirection.SW]: [\n    [TileDirection.W, TileDirection.SW],\n    [TileDirection.NONE, TileDirection.W],\n  ],\n  [TileDirection.W]: [\n    [TileDirection.NW, TileDirection.W],\n    [TileDirection.NONE, TileDirection.NW],\n  ],\n  [TileDirection.NONE]: [\n    [TileDirection.NONE, TileDirection.NONE],\n    [TileDirection.NONE, TileDirection.NONE],\n  ],\n};\n\nexport const OPPOSITE_DIRECTIONS: Record<TileDirection, TileDirection> = {\n  [TileDirection.NW]: TileDirection.SE,\n  [TileDirection.NE]: TileDirection.SW,\n  [TileDirection.E]: TileDirection.W,\n  [TileDirection.SE]: TileDirection.NW,\n  [TileDirection.SW]: TileDirection.NE,\n  [TileDirection.W]: TileDirection.E,\n  [TileDirection.NONE]: TileDirection.NONE,\n};\n","import { TileDirection } from \"../shared\";\nimport { BaseTile } from \"./tile.interface\";\n\nexport function getTileFullNeighbours<T extends BaseTile>(\n  tiles: T[][],\n  x: number,\n  y: number,\n): (T | null)[] {\n  return [\n    getTileInDirection(tiles, tiles[x][y], TileDirection.NW),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.NE),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.E),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.SE),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.SW),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.W),\n  ];\n}\n\nexport function getTileNeighbours<T extends BaseTile>(\n  tiles: T[][],\n  x: number,\n  y: number,\n): T[] {\n  return getTileFullNeighbours(tiles, x, y).filter((t) => !!t) as T[];\n}\n\nexport function getTileInDirection<T extends BaseTile>(\n  tiles: T[][],\n  tile: T,\n  direction: TileDirection,\n): T | null {\n  switch (direction) {\n    case TileDirection.NW:\n      if ((tile.y % 2 === 0 && tile.x === 0) || tile.y === 0) {\n        return null;\n      }\n      return tiles[tile.x - (tile.y % 2 ? 0 : 1)][tile.y - 1];\n\n    case TileDirection.NE:\n      if ((tile.y % 2 && tile.x === tiles.length - 1) || tile.y === 0) {\n        return null;\n      }\n      return tiles[tile.x + (tile.y % 2 ? 1 : 0)][tile.y - 1];\n\n    case TileDirection.E:\n      if (tile.x === tiles.length - 1) {\n        return null;\n      }\n      return tiles[tile.x + 1][tile.y];\n\n    case TileDirection.SE:\n      if (\n        (tile.y % 2 && tile.x === tiles.length - 1) ||\n        tile.y === tiles[tile.x].length - 1\n      ) {\n        return null;\n      }\n      return tiles[tile.x + (tile.y % 2 ? 1 : 0)][tile.y + 1];\n\n    case TileDirection.SW:\n      if (\n        (tile.y % 2 === 0 && tile.x === 0) ||\n        tile.y === tiles[tile.x].length - 1\n      ) {\n        return null;\n      }\n      return tiles[tile.x - (tile.y % 2 ? 0 : 1)][tile.y + 1];\n\n    case TileDirection.W:\n      if (tile.x === 0) {\n        return null;\n      }\n      return tiles[tile.x - 1][tile.y];\n  }\n  return null;\n}\n\nexport function getDirectionTo(\n  fromtile: BaseTile,\n  toTile: BaseTile,\n): TileDirection {\n  if (\n    toTile.x === fromtile.x - (fromtile.y % 2 ? 0 : 1) &&\n    toTile.y === fromtile.y - 1\n  ) {\n    return TileDirection.NW;\n  }\n  if (\n    toTile.x === fromtile.x + (fromtile.y % 2 ? 1 : 0) &&\n    toTile.y === fromtile.y - 1\n  ) {\n    return TileDirection.NE;\n  }\n  if (toTile.x === fromtile.x + 1 && toTile.y === fromtile.y) {\n    return TileDirection.E;\n  }\n  if (\n    toTile.x === fromtile.x + (fromtile.y % 2 ? 1 : 0) &&\n    toTile.y === fromtile.y + 1\n  ) {\n    return TileDirection.SE;\n  }\n  if (\n    toTile.x === fromtile.x - (fromtile.y % 2 ? 0 : 1) &&\n    toTile.y === fromtile.y + 1\n  ) {\n    return TileDirection.SW;\n  }\n  if (toTile.x === fromtile.x - 1 && toTile.y === fromtile.y) {\n    return TileDirection.W;\n  }\n  return TileDirection.NONE;\n}\n\nexport function getTilesInRange(tile: BaseTile, range: number): Set<BaseTile> {\n  const result = new Set<BaseTile>([tile]);\n  for (let i = 0; i < range; i++) {\n    let neighbours = new Set<BaseTile>();\n    for (const tile of result) {\n      for (const neighbour of (tile as any).neighbours) {\n        // TODO fix typing\n        neighbours.add(neighbour);\n      }\n    }\n    for (const tile of neighbours) {\n      result.add(tile);\n    }\n  }\n  return result;\n}\n","import { Yields } from \"../core/yields\";\n\nexport * from \"./tile.interface\";\n\nexport interface PlayerTask {\n  task: \"city\" | \"unit\";\n  id: number;\n}\n\nexport interface PlayerYields {\n  perTurn: Yields;\n  income: Yields;\n  total: Yields;\n  costs: Yields;\n}\n","import { TileImprovement, TileRoad } from \"../core/tile-improvements\";\nimport { Yields } from \"../core/yields\";\n\nexport enum TileDirection {\n  NW,\n  NE,\n  E,\n  SE,\n  SW,\n  W,\n  NONE,\n}\n\nexport enum Climate {\n  tropical,\n  savanna,\n  desert,\n  continental,\n  oceanic,\n  tundra,\n  arctic,\n}\n\nexport enum LandForm {\n  plains,\n  hills,\n  mountains,\n}\n\nexport enum SeaLevel {\n  none,\n  shallow,\n  deep,\n}\n\nexport interface BaseTile {\n  id: number;\n\n  x: number;\n  y: number;\n\n  climate: Climate;\n  landForm: LandForm;\n  seaLevel: SeaLevel;\n  riverParts: TileDirection[];\n  forest: boolean;\n  wetlands: boolean;\n  improvement: TileImprovement | null;\n  road: TileRoad | null;\n\n  yields: Yields;\n}\n\nexport const FORESTABLE_CLIMATES = new Set<Climate>([\n  Climate.continental,\n  Climate.oceanic,\n  Climate.tropical,\n  Climate.tundra,\n]);\n\nexport const WETLANDS_CLIMATES = new Set<Climate>([\n  Climate.continental,\n  Climate.oceanic,\n  Climate.tropical,\n]);\n\nexport function isForestable(tile: BaseTile): boolean {\n  return (\n    tile.seaLevel === SeaLevel.none &&\n    tile.landForm === LandForm.plains &&\n    FORESTABLE_CLIMATES.has(tile.climate)\n  );\n}\n\nexport function areWetlandsPossible(tile: BaseTile): boolean {\n  return !!(\n    tile.seaLevel === SeaLevel.none &&\n    tile.landForm === LandForm.plains &&\n    tile.riverParts.length &&\n    WETLANDS_CLIMATES.has(tile.climate)\n  );\n}\n\nexport function isImprovementPossible(\n  tile: BaseTile,\n  improvement: TileImprovement | null,\n): boolean {\n  if (improvement === null) {\n    return true;\n  } else if (improvement === TileImprovement.farm) {\n    return (\n      tile.seaLevel === SeaLevel.none &&\n      tile.landForm === LandForm.plains &&\n      tile.climate !== Climate.arctic &&\n      !tile.forest &&\n      !tile.wetlands\n    );\n  } else if (improvement === TileImprovement.mine) {\n    return tile.landForm === LandForm.hills;\n  } else if (improvement === TileImprovement.sawmill) {\n    return tile.forest && !tile.wetlands;\n  } else {\n    return false;\n  }\n}\n\nexport function isRoadPossible(tile: BaseTile) {\n  return (\n    tile.seaLevel === SeaLevel.none && tile.landForm !== LandForm.mountains\n  );\n}\n"],"sourceRoot":"webpack:///"}