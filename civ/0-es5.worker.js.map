{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/app/core.worker.ts","webpack:///node_modules/simplex-noise/simplex-noise.js","webpack:///node_modules/tslib/tslib.es6.js","webpack:///src/app/ai/ai-player.ts","webpack:///src/app/core/area.ts","webpack:///src/app/core/areas-manager.ts","webpack:///src/app/core/buildings.ts","webpack:///src/app/core/cities-manager.ts","webpack:///src/app/core/city.ts","webpack:///src/app/core/collector.ts","webpack:///src/app/core/debug.ts","webpack:///src/app/core/game.ts","webpack:///src/app/core/idle-product.ts","webpack:///src/app/core/pathfinding.ts","webpack:///src/app/core/player.ts","webpack:///src/app/core/product.ts","webpack:///src/app/core/serialization/channel.ts","webpack:///src/app/core/serialization/dump.ts","webpack:///src/app/core/tile-improvements.ts","webpack:///src/app/core/tile.ts","webpack:///src/app/core/tiles-map.ts","webpack:///src/app/core/unit-actions.ts","webpack:///src/app/core/unit-manager.ts","webpack:///src/app/core/unit.ts","webpack:///src/app/core/yields.ts","webpack:///src/app/data/buildings.ts","webpack:///src/app/data/idle-products.ts","webpack:///src/app/data/units.ts","webpack:///src/app/map-generators/simplex.ts","webpack:///src/app/map-generators/utils.ts","webpack:///src/app/shared/hex-math.ts","webpack:///src/app/shared/tile.interface.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","game","HANDLERS","newGameHandler","saveDumpHandler","loadDumpHandler","nextPlayerHandler","revealWorld","setTrackedPlayer","getUnitDetails","unitDoAction","unitSetOrder","unitFindPath","unitDisband","unitMoveAlongPath","unitGetRange","unitGetFailedActionRequirements","tileUpdate","tileBulkUpdate","getCityDetails","cityProduce","cityGetRange","cityGetWorkTiles","cityWorkTile","cityUnworkTile","cityOptimizeYields","getAreaTiles","addEventListener","data","handler","command","console","error","result","changes","flush","trackedPlayer","updateCitiesWithoutProduction","updateUnitsWithoutOrders","nextTask","getNextTask","postMessage","citiesWithoutProduction","length","task","id","unitsWithoutOrders","humanPlayersCount","aiPlayersCount","player","ai","addPlayer","generator","players","map","generate","width","height","seed","uniformity","seaLevel","precompute","unitsManager","spawn","getStartingLocations","start","JSON","stringify","parse","nextPlayer","x","exploreTiles","tiles","playerId","find","unitId","unit","unitsMap","doAction","action","setOrder","order","tile","tilesMap","destinationId","path","destroy","moveAlongPath","getRange","Array","from","getFailedActionRequirements","tileCore","assign","update","cityId","city","citiesManager","citiesMap","type","produceBuilding","productId","produceUnit","workOnIdleProduct","workedTiles","notWorkedTiles","tileId","workTile","unworkTile","optimizeYields","areaId","area","areasManager","areasMap","F2","Math","sqrt","G2","F3","G3","F4","G4","SimplexNoise","randomOrSeed","random","alea","buildPermutationTable","perm","Uint8Array","permMod12","grad3","Float32Array","grad4","noise2D","xin","yin","n0","n1","n2","floor","j","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","t0","gi0","t1","gi1","t2","gi2","noise3D","zin","n3","k","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","t3","gi3","noise4D","y","z","w","n4","W0","w0","rankx","ranky","rankz","rankw","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","aux","_buildPermutationTable","s0","s1","s2","mash","masher","arguments","toString","charCodeAt","h","extendStatics","b","setPrototypeOf","__proto__","__extends","__","constructor","__assign","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","adopt","resolve","Promise","reject","fulfilled","step","next","rejected","done","then","__generator","body","_","label","sent","trys","ops","f","g","verb","iterator","v","op","TypeError","pop","push","__exportStar","__values","__read","ar","__spread","concat","__spreadArrays","il","a","jl","__await","__asyncGenerator","asyncIterator","q","resume","settle","fulfill","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__importDefault","__classPrivateFieldGet","receiver","privateMap","has","__classPrivateFieldSet","set","AIPlayer","definition","actions","includes","processSettler","updateProductsList","product","produceNext","destination","getPathDestination","areaOf","bestCityLocation","findCityLocation","settler","canProduce","newCityLocation","buildings","availableBuildings","filter","disabledBuildings","startTile","getTilesInRange","bestSweetSpotValue","bestTile","passableArea","sweetSpotValue","AreaCore","Set","add","addAreaTiles","removeAreaTiles","AreasManager","areas","Map","lastId","index","splice","BUILDINGS_MAP","CitiesManager","cities","isNew","landForm","mountains","none","size","neighbours","neighbour","addTile","addCity","forest","wetlands","road","removeTile","citiesDestroyed","nextTurn","CityCore","totalFood","foodToGrow","foodConsumed","totalCulture","cultureToExpand","tileYields","yields","perTurn","totalProduction","buildingsIds","availableUnits","disabledUnits","availableIdleProducts","disabledIdleProducts","changedSize","progressExpansion","progressProduction","progressGrowth","updateYields","production","productDefinition","productionCost","food","bestWorkableTile","pickBestTileToWork","pow","culture","pickBestTileToExpand","getTilesAvailableForExpansion","startProducing","building","canConstruct","idleProduct","cancelProduction","ceil","freeTileWorkers","applyBonuses","bonuses","yieldValue","publicWorks","yieldFactor","transferProductionToFood","transferProductionToCulture","transferProductionToPublicWorks","remove","availableTiles","bestYields","totalYields","cityTile","bestScore","Infinity","score","getDistanceTo","clear","requirements","check","weakRequirements","products","results","ok","getAvailableProducts","getDisabledProducts","notBuildBuildings","newOwner","oldOwner","cityTiles","removeBulk","addBulk","remainingFood","remainingProduction","remainingCulture","Collector","units","unitsDestroyed","areaTilesAdded","areaTilesRemoved","tilesExplored","turn","entries","trackedPlayerYields","undefined","collector","Debug","revealMap","Game","debug","activePlayerIndex","humanPlayer","activePlayer","IDLE_PRODUCTS_MAP","findPath","end","startTime","performance","now","visitedTiles","tilesToVisit","cameFrom","costsSoFar","turnCost","actionPoints","nextTile","minEstimatedCost","estimatedCost","actionPointsLeft","endTime","round","reconstructPath","isExplored","exploredTiles","moveCost","neighboursCosts","newActionPointsLeft","max","costSoFar","getEuclideanDistance","lastTile","lastTurn","turnPath","unshift","PLAYER_COLORS","PlayerCore","color","visibleTiles","costs","income","total","make","improvement","ProductRequirement","BuildingRequirement","buildingId","SizeRequirement","gameToChannel","mapToChannel","playerToChannel","trackedPlayerToChannel","u","unitToChannel","cityToChannel","row","tileToChannel","climate","riverParts","unitsIds","foodPerTurn","turnsToGrow","productionPerTurn","productionRequired","turnsToProductionEnd","productName","cityDetailsToChannel","productType","definitionId","unitDetailsToChannel","dumpGame","trackedPlayerId","dumpMap","dumpPlayer","dumpUnit","dumpCity","loadGame","loadMap","playerData","loadPlayer","loadUnit","loadCity","dumpTiles","diff","mapData","tileData","yieldsTotal","cityData","tileIndex","definitions","unitData","TileImprovement","TileRoad","IMPROVEMENT_PUBLIC_WORKS_COSTS","farm","mine","sawmill","IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN","ROAD_PUBLIC_WORKS_COSTS","ROAD_PUBLIC_WORKS_COSTS_PER_TURN","BASE_CLIMATE_YIELDS","arctic","continental","desert","oceanic","savanna","tropical","tundra","BASE_LAND_FORM_YIELDS","plains","hills","TileCore","deep","fullNeighbours","dir","getDirectionTo","cost","NW","NE","E","SE","SW","W","NONE","abs","shallow","climateYields","landFormYields","range","computeYields","computeMovementCosts","TilesMapCore","computeSweetSpotValue","precomputePassableAreas","visited","computePassableArea","queue","isMountains","areBothLand","areBothWater","ACTION_TO_IMPROVEMENT","buildFarm","buildMine","buildSawmill","getPublicWorksRequired","getPublicWorksPerTurn","ActionRequirement","OwnTileRequirement","NotForeignTileRequirement","ImprovementNotYetBuiltRequirement","IsImprovementPossibleRequirement","NoRoadRequirement","isRoadPossibleRequirement","PublicWorksPointsRequirement","foundCity","buildImprovement","buildRoad","ACTIONS","fn","UnitsManager","Error","getMovementCost","power","changeOwner","move","UNITS_MAP","UnitCore","canDoAction","lastPathTurn","actionPointsLeftAtTile","_getRange","oldActionPointsLeft","EMPTY_YIELDS","zeroYields","addYields","targetYields","subtractYields","copyYields","roundYields","BUILDINGS","IDLE_PRODUCTS","UNITS_DEFINITIONS","SimplexMapGenerator","startingLocationsCount","startingLocations","riversSources","humidity","temperature","generateHeightmap","generateTemperature","generateHumidity","getNoisedTiles","ComplexNoise","bonus","fixShallowWater","adjustHeightmap","placeRivers","placeWetlands","findStartingPositions","noiseLayersCount","noiseScales","maxValue","reduce","scaleAndIntensity","coastlineNoise","heightmapNoise","distanceToEdge","min","edgeThrehold","cos","PI","at","longitude","base","noise","noiseValue","halfHeight","currentTiles","nextTiles","offset","buildRiverPath","direction","possibleNeighboursDirections","pairs","pair","pairToPlace","pairA","pairB","heightA","heightB","maxTries","tries","scales","noises","scale","intensity","findCoastline","coastline","placeRiverBetweenTiles","tileA","tileB","OPPOSITE_DIRECTIONS","POSSIBLE_RIVER_DIRECTION_FROM_WATER_TILE","POSSIBLE_BORDER_PATHS","getTileFullNeighbours","getTileInDirection","getTileNeighbours","fromtile","toTile","TileDirection","Climate","LandForm","SeaLevel","FORESTABLE_CLIMATES","WETLANDS_CLIMATES","isForestable","areWetlandsPossible","isImprovementPossible","isRoadPossible"],"mappings":"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","file":"0-es5.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./node_modules/@ngtools/webpack/src/index.js!./src/app/core.worker.ts\");\n","/// <reference lib=\"webworker\" />\n\nimport { SimplexMapGenerator } from \"./map-generators/simplex\";\nimport { MapGeneratorOptions } from \"./api/game.interface\";\nimport { Game } from \"./core/game\";\nimport { PlayerCore, PLAYER_COLORS } from \"./core/player\";\nimport { AIPlayer } from \"./ai/ai-player\";\nimport { collector } from \"./core/collector\";\nimport { UnitAction } from \"./core/unit-actions\";\nimport { UnitOrder, UNITS_MAP } from \"./core/unit\";\nimport { findPath } from \"./core/pathfinding\";\nimport { BaseTile, PlayerTask } from \"./shared\";\nimport { BUILDINGS_MAP } from \"./core/buildings\";\nimport { IDLE_PRODUCTS_MAP } from \"./core/idle-product\";\nimport {\n  gameToChannel,\n  trackedPlayerToChannel,\n  unitDetailsToChannel,\n  cityDetailsToChannel,\n  GameChanneled,\n} from \"./core/serialization/channel\";\nimport { dumpGame, loadGame } from \"./core/serialization/dump\";\n\nlet game: Game;\n\nconst HANDLERS = {\n  \"game.new\": newGameHandler,\n  \"game.saveDump\": saveDumpHandler,\n  \"game.loadDump\": loadDumpHandler,\n  \"game.nextPlayer\": nextPlayerHandler,\n\n  \"trackedPlayer.revealWorld\": revealWorld,\n  \"trackedPlayer.set\": setTrackedPlayer,\n\n  \"unit.getDetails\": getUnitDetails,\n  \"unit.doAction\": unitDoAction,\n  \"unit.setOrder\": unitSetOrder,\n  \"unit.findPath\": unitFindPath,\n  \"unit.disband\": unitDisband,\n  \"unit.moveAlongPath\": unitMoveAlongPath,\n  \"unit.getRange\": unitGetRange,\n  \"unit.getFailedActionRequirements\": unitGetFailedActionRequirements,\n\n  \"tile.update\": tileUpdate,\n  \"tile.bulkUpdate\": tileBulkUpdate,\n\n  \"city.getDetails\": getCityDetails,\n  \"city.produce\": cityProduce,\n  \"city.getRange\": cityGetRange,\n  \"city.getWorkTiles\": cityGetWorkTiles,\n  \"city.workTile\": cityWorkTile,\n  \"city.unworkTile\": cityUnworkTile,\n  \"city.optimizeYields\": cityOptimizeYields,\n\n  \"area.getTiles\": getAreaTiles,\n};\n\naddEventListener(\"message\", ({ data }) => {\n  const handler = HANDLERS[data.command];\n  if (!handler) {\n    console.error(`No handler for command \"${data.command}\".`);\n    return;\n  }\n\n  const result = handler(data.data);\n\n  const changes = collector.flush();\n\n  game.trackedPlayer.updateCitiesWithoutProduction();\n  game.trackedPlayer.updateUnitsWithoutOrders();\n  const nextTask = getNextTask();\n\n  postMessage({ result, changes, nextTask });\n});\n\nfunction getNextTask(): PlayerTask | null {\n  const p = game.trackedPlayer;\n\n  if (p.citiesWithoutProduction.length) {\n    return {\n      task: \"city\",\n      id: p.citiesWithoutProduction[0].id,\n    };\n  }\n\n  if (p.unitsWithoutOrders.length) {\n    return {\n      task: \"unit\",\n      id: p.unitsWithoutOrders[0].id,\n    };\n  }\n\n  return null;\n}\n\nfunction newGameHandler(data: MapGeneratorOptions): GameChanneled {\n  game = new Game();\n\n  for (let i = 0; i < data.humanPlayersCount + data.aiPlayersCount; i++) {\n    const player = new PlayerCore(game, PLAYER_COLORS[i]);\n\n    if (i >= data.humanPlayersCount) {\n      player.ai = new AIPlayer(player);\n    }\n\n    game.addPlayer(player);\n  }\n\n  const generator = new SimplexMapGenerator(game.players.length);\n  game.map = generator.generate(\n    data.width,\n    data.height,\n    data.seed,\n    data.uniformity,\n    data.seaLevel,\n  );\n  game.map.precompute();\n\n  for (let i = 0; i < game.players.length; i++) {\n    game.unitsManager.spawn(\n      \"settler\",\n      generator.getStartingLocations()[i],\n      game.players[i],\n    );\n  }\n\n  game.start();\n\n  return gameToChannel(game);\n}\n\nfunction saveDumpHandler(): string {\n  // TODO we might compress the save\n  return JSON.stringify(dumpGame(game));\n}\n\nfunction loadDumpHandler(data: string) {\n  game = loadGame(JSON.parse(data));\n  return gameToChannel(game);\n}\n\nfunction nextPlayerHandler() {\n  game.nextPlayer();\n}\n\nfunction revealWorld() {\n  for (let x = 0; x < game.map.width; x++) {\n    game.trackedPlayer.exploreTiles(game.map.tiles[x]);\n  }\n}\n\nfunction setTrackedPlayer(playerId: number) {\n  const player = game.players.find((p) => p.id === playerId);\n\n  if (!player) {\n    return;\n  }\n\n  game.trackedPlayer = player;\n\n  return trackedPlayerToChannel(game.trackedPlayer);\n}\n\nfunction getUnitDetails(unitId: number) {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return null;\n  }\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitDoAction(data: { unitId: number; action: UnitAction }) {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  if (!unit) {\n    return null;\n  }\n\n  unit.doAction(data.action);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitSetOrder(data: { unitId: number; order: UnitOrder }) {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  if (!unit) {\n    return null;\n  }\n\n  unit.setOrder(data.order);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitFindPath(data: { unitId: number; destinationId: number }) {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  const tile = game.map.tilesMap.get(data.destinationId);\n  if (!unit || !tile) {\n    return null;\n  }\n\n  unit.path = findPath(unit, tile);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitDisband(unitId: number) {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return null;\n  }\n\n  game.unitsManager.destroy(unit);\n}\n\nfunction unitMoveAlongPath(unitId: number) {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return null;\n  }\n\n  game.unitsManager.moveAlongPath(unit);\n\n  return unitDetailsToChannel(unit);\n}\n\nfunction unitGetRange(unitId: number): number[] {\n  const unit = game.unitsManager.unitsMap.get(unitId);\n  if (!unit) {\n    return [];\n  }\n\n  const tiles = unit.getRange();\n\n  return Array.from(tiles).map((tile) => tile.id);\n}\n\nfunction unitGetFailedActionRequirements(data): string[] {\n  const unit = game.unitsManager.unitsMap.get(data.unitId);\n  if (!unit) {\n    return [];\n  }\n\n  return unit.getFailedActionRequirements(data.action);\n}\n\nexport function tileUpdate(tile: Partial<BaseTile>) {\n  const tileCore = game.map.tilesMap.get(tile.id!);\n  if (!tileCore) {\n    return;\n  }\n\n  Object.assign(tileCore, tile);\n  tileCore.update();\n}\n\nexport function tileBulkUpdate(tiles: Partial<BaseTile>[]) {\n  for (const tile of tiles) {\n    tileUpdate(tile);\n  }\n}\n\nexport function getCityDetails(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n  if (!city) {\n    return;\n  }\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityProduce(data) {\n  const city = game.citiesManager.citiesMap.get(data.cityId);\n\n  if (!city) {\n    return;\n  }\n\n  if (data.type === \"building\") {\n    city.produceBuilding(BUILDINGS_MAP.get(data.productId)!);\n  } else if (data.type === \"unit\") {\n    city.produceUnit(UNITS_MAP.get(data.productId)!);\n  } else {\n    city.workOnIdleProduct(IDLE_PRODUCTS_MAP.get(data.productId)!);\n  }\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityGetRange(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n\n  if (!city) {\n    return;\n  }\n\n  return Array.from(city.tiles).map((tile) => tile.id);\n}\n\nexport function cityGetWorkTiles(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n\n  if (!city) {\n    return {};\n  }\n\n  return {\n    workedTiles: Array.from(city.workedTiles).map((tile) => tile.id),\n    notWorkedTiles: Array.from(city.notWorkedTiles).map((tile) => tile.id),\n  };\n}\n\nexport function cityWorkTile(data) {\n  const city = game.citiesManager.citiesMap.get(data.cityId);\n  const tile = game.map.tilesMap.get(data.tileId);\n\n  if (!city || !tile) {\n    return null;\n  }\n\n  city.workTile(tile);\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityUnworkTile(data) {\n  const city = game.citiesManager.citiesMap.get(data.cityId);\n  const tile = game.map.tilesMap.get(data.tileId);\n\n  if (!city || !tile) {\n    return null;\n  }\n\n  city.unworkTile(tile);\n\n  return cityDetailsToChannel(city);\n}\n\nexport function cityOptimizeYields(cityId: number) {\n  const city = game.citiesManager.citiesMap.get(cityId);\n\n  if (!city) {\n    return null;\n  }\n\n  city.optimizeYields();\n\n  return cityDetailsToChannel(city);\n}\n\nexport function getAreaTiles(areaId: number): number[] {\n  const area = game.areasManager.areasMap.get(areaId);\n  if (!area) {\n    return [];\n  }\n\n  return Array.from(area.tiles).map((tile) => tile.id);\n}\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { PlayerCore } from \"../core/player\";\nimport { IDLE_PRODUCTS_MAP } from \"../core/idle-product\";\nimport { UnitCore, UNITS_MAP } from \"../core/unit\";\nimport { TileCore } from \"../core/tile\";\nimport { findPath } from \"../core/pathfinding\";\nimport { CityCore } from \"../core/city\";\n\nexport class AIPlayer {\n  constructor(private player: PlayerCore) {}\n\n  nextTurn() {\n    for (const unit of this.player.unitsWithoutOrders) {\n      if (unit.order) {\n        continue;\n      }\n\n      if (unit.definition.actions.includes(\"foundCity\")) {\n        this.processSettler(unit);\n      }\n    }\n\n    for (const city of this.player.citiesWithoutProduction) {\n      city.updateProductsList();\n\n      if (!city.product) {\n        this.produceNext(city);\n      }\n    }\n  }\n\n  processSettler(unit: UnitCore) {\n    const destination = unit.getPathDestination();\n    if (!destination || destination.areaOf) {\n      const bestCityLocation = this.findCityLocation(unit.tile);\n      if (!bestCityLocation) {\n        unit.order = \"sleep\";\n        return;\n      }\n\n      if (unit.tile === bestCityLocation) {\n        unit.doAction(\"foundCity\");\n      } else {\n        unit.path = findPath(unit, bestCityLocation);\n      }\n    }\n\n    if (unit.path) {\n      this.player.game.unitsManager.moveAlongPath(unit);\n    }\n  }\n\n  produceNext(city: CityCore) {\n    const settler = UNITS_MAP.get(\"settler\")!;\n    if (Math.random() > 0.7 && city.canProduce(settler)) {\n      const newCityLocation = this.findCityLocation(city.tile);\n      if (newCityLocation) {\n        city.produceUnit(settler);\n        return;\n      }\n    }\n\n    const buildings = city.availableBuildings.filter(\n      (b) => !city.disabledBuildings.has(b),\n    );\n    if (buildings.length) {\n      city.produceBuilding(buildings[0]);\n    } else {\n      city.workOnIdleProduct(IDLE_PRODUCTS_MAP.get(\"culture\")!);\n    }\n  }\n\n  findCityLocation(startTile: TileCore): TileCore | null {\n    const tiles = startTile.getTilesInRange(5);\n\n    let bestSweetSpotValue = 0;\n    let bestTile: TileCore | null = null;\n    for (const tile of tiles) {\n      if (startTile.passableArea !== tile.passableArea) {\n        continue;\n      }\n\n      if (tile.sweetSpotValue > bestSweetSpotValue) {\n        bestSweetSpotValue = tile.sweetSpotValue;\n        bestTile = tile;\n      }\n    }\n    return bestTile;\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { collector } from \"./collector\";\n\nexport class AreaCore {\n  id = 0;\n\n  tiles = new Set<TileCore>();\n\n  add(tile: TileCore) {\n    this.tiles.add(tile);\n    collector.addAreaTiles(this.id, [tile]);\n  }\n\n  addBulk(tiles: TileCore[]) {\n    for (const tile of tiles) {\n      this.tiles.add(tile);\n    }\n    collector.addAreaTiles(this.id, tiles);\n  }\n\n  remove(tile: TileCore) {\n    this.tiles.delete(tile);\n    collector.removeAreaTiles(this.id, [tile]);\n  }\n\n  removeBulk(tiles: TileCore[]) {\n    for (const tile of tiles) {\n      this.tiles.delete(tile);\n    }\n    collector.removeAreaTiles(this.id, tiles);\n  }\n}\n","import { AreaCore } from \"./area\";\n\nexport class AreasManager {\n  areas: AreaCore[] = [];\n\n  areasMap = new Map<number, AreaCore>();\n\n  lastId = 0;\n\n  make() {\n    const area = new AreaCore();\n    area.id = this.lastId++;\n    this.areas.push(area);\n    this.areasMap.set(area.id, area);\n    return area;\n  }\n\n  destroy(area: AreaCore) {\n    this.areasMap.delete(area.id);\n    const index = this.areas.indexOf(area);\n    if (index !== -1) {\n      this.areas.splice(index, 1);\n    }\n  }\n}\n","import { Bonuses } from \"./bonus\";\nimport { BUILDINGS } from \"../data/buildings\";\nimport { ProductDefinition } from \"./product\";\n\nexport interface Building extends ProductDefinition {\n  bonuses: Bonuses;\n}\n\nexport const BUILDINGS_MAP = new Map<string, Building>();\n\nfor (const definition of BUILDINGS) {\n  BUILDINGS_MAP.set(definition.id, definition);\n}\n","import { CityCore } from \"./city\";\nimport { PlayerCore } from \"./player\";\nimport { TileRoad } from \"./tile-improvements\";\nimport { TileCore } from \"./tile\";\nimport { LandForm, SeaLevel } from \"../shared\";\nimport { collector } from \"./collector\";\n\nexport class CitiesManager {\n  cities: CityCore[] = [];\n\n  citiesMap = new Map<number, CityCore>();\n\n  lastId = 0;\n\n  spawn(tile: TileCore, player: PlayerCore, isNew = true) {\n    if (tile.city) {\n      return null;\n    }\n\n    if (\n      tile.landForm === LandForm.mountains ||\n      tile.seaLevel !== SeaLevel.none\n    ) {\n      return null;\n    }\n\n    const city = new CityCore(tile, player);\n    city.id = this.lastId++;\n    city.size = 1;\n    city.name = `City ${city.id}`;\n    city.tile = tile;\n    this.cities.push(city);\n    this.citiesMap.set(city.id, city);\n\n    for (const neighbour of tile.neighbours) {\n      city.addTile(neighbour);\n    }\n\n    player.addCity(city);\n\n    tile.city = city;\n    tile.forest = false;\n    tile.wetlands = false;\n    tile.road = TileRoad.road;\n    tile.update();\n\n    for (const t of tile.getTilesInRange(3)) {\n      t.sweetSpotValue = 0;\n    }\n\n    if (isNew) {\n      city.optimizeYields();\n    }\n\n    collector.cities.add(city);\n\n    return city;\n  }\n\n  destroy(city: CityCore) {\n    // TODO rewrite to sets for better performance?\n    let index = this.cities.indexOf(city);\n    if (index !== -1) {\n      this.cities.splice(index, 1);\n    }\n\n    this.citiesMap.delete(city.id);\n\n    index = city.player.cities.indexOf(city);\n    if (index !== -1) {\n      city.player.cities.splice(index, 1);\n    }\n\n    city.tile.city = null;\n\n    for (const tile of city.tiles) {\n      city.removeTile(tile);\n    }\n\n    collector.citiesDestroyed.add(city.id);\n  }\n\n  nextTurn() {\n    for (const city of this.cities) {\n      city.nextTurn();\n    }\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { PlayerCore } from \"./player\";\nimport { UnitDefinition } from \"./unit.interface\";\nimport { Building } from \"./buildings\";\nimport { ProductDefinition } from \"./product\";\nimport { IdleProduct } from \"./idle-product\";\nimport { Bonuses } from \"./bonus\";\nimport {\n  EMPTY_YIELDS,\n  Yields,\n  zeroYields,\n  addYields,\n  copyYields,\n  roundYields,\n} from \"./yields\";\n\nimport { UNITS_DEFINITIONS } from \"../data/units\";\nimport { BUILDINGS } from \"../data/buildings\";\nimport { IDLE_PRODUCTS } from \"../data/idle-products\";\nimport { collector } from \"./collector\";\n\nexport type ProductType = \"unit\" | \"building\" | \"idleProduct\";\n\nexport interface Product {\n  type: ProductType;\n  productDefinition: ProductDefinition;\n}\n\nexport class CityCore {\n  id: number;\n  name: string;\n  size: number;\n\n  totalFood = 0;\n  foodToGrow = 20;\n  foodConsumed = 1;\n\n  totalCulture = 0;\n  cultureToExpand = 20;\n\n  tileYields: Yields = { ...EMPTY_YIELDS };\n  yields: Yields = { ...EMPTY_YIELDS };\n  perTurn: Yields = { ...EMPTY_YIELDS };\n\n  product: Product | null = null;\n  totalProduction = 0;\n\n  buildings: Building[] = [];\n  buildingsIds = new Set<string>();\n\n  tiles = new Set<TileCore>();\n\n  workedTiles = new Set<TileCore>();\n\n  notWorkedTiles = new Set<TileCore>();\n\n  availableBuildings: Building[] = [];\n  disabledBuildings = new Set<Building>();\n\n  availableUnits: UnitDefinition[] = [];\n  disabledUnits = new Set<UnitDefinition>();\n\n  availableIdleProducts: IdleProduct[] = [];\n  disabledIdleProducts = new Set<IdleProduct>();\n\n  changedSize = false;\n\n  constructor(public tile: TileCore, public player: PlayerCore) {\n    this.addTile(tile);\n  }\n\n  nextTurn() {\n    this.changedSize = false;\n\n    this.progressExpansion();\n    this.progressProduction();\n    this.progressGrowth();\n    this.updateYields();\n\n    if (this.player === this.player.game.trackedPlayer || this.changedSize) {\n      collector.cities.add(this);\n    }\n  }\n\n  private progressProduction() {\n    if (!this.product) {\n      return;\n    }\n\n    this.totalProduction += this.yields.production;\n\n    if (this.totalProduction >= this.product.productDefinition.productionCost) {\n      if (this.product.type === \"unit\") {\n        this.player.game.unitsManager.spawn(\n          this.product.productDefinition.id,\n          this.tile,\n          this.player,\n        );\n      } else if (this.product.type === \"building\") {\n        this.buildings.push(this.product.productDefinition as Building);\n        this.buildingsIds.add(this.product.productDefinition.id);\n      }\n      this.totalProduction = 0;\n      this.product = null;\n    }\n  }\n\n  private progressGrowth() {\n    this.totalFood += this.yields.food - this.foodConsumed;\n    if (this.totalFood >= this.foodToGrow) {\n      this.size++;\n      this.changedSize = true;\n      const bestWorkableTile = this.pickBestTileToWork(this.notWorkedTiles);\n      if (bestWorkableTile) {\n        this.workTile(bestWorkableTile);\n      }\n      this.totalFood -= this.foodToGrow;\n    } else if (this.totalFood < 0) {\n      if (this.size > 1) {\n        this.size--;\n        this.changedSize = true;\n        this.totalFood += this.foodToGrow;\n      } else {\n        this.totalFood = 0;\n      }\n    }\n    this.foodToGrow = 15 * Math.pow(1.2, this.size);\n  }\n\n  private progressExpansion() {\n    this.totalCulture += this.perTurn.culture;\n    if (this.totalCulture >= this.cultureToExpand) {\n      this.totalCulture -= this.cultureToExpand;\n      this.cultureToExpand = 5 * Math.pow(1.2, this.tiles.size);\n\n      const tile = this.pickBestTileToExpand(\n        this.tile,\n        this.getTilesAvailableForExpansion(),\n      );\n      if (tile) {\n        this.addTile(tile);\n        tile.sweetSpotValue = 0;\n      }\n    }\n  }\n\n  produceUnit(unit: UnitDefinition) {\n    this.startProducing({\n      type: \"unit\",\n      productDefinition: unit,\n    });\n  }\n\n  produceBuilding(building: Building) {\n    if (this.canConstruct(building)) {\n      this.startProducing({\n        type: \"building\",\n        productDefinition: building,\n      });\n    }\n  }\n\n  workOnIdleProduct(idleProduct: IdleProduct) {\n    this.startProducing({\n      type: \"idleProduct\",\n      productDefinition: idleProduct,\n    });\n    this.updateYields();\n    this.player.updateYields();\n  }\n\n  cancelProduction() {\n    if (this.product) {\n      const type = this.product.type;\n      this.product = null;\n      if (type === \"idleProduct\") {\n        this.updateYields();\n        this.player.updateYields();\n      }\n    }\n  }\n\n  private startProducing(product: Product) {\n    if (!this.canProduce(product.productDefinition)) {\n      return;\n    }\n\n    this.cancelProduction();\n\n    this.product = product;\n    this.totalProduction = 0;\n    collector.cities.add(this);\n  }\n\n  get turnsToGrow() {\n    if (this.perTurn.food >= 0) {\n      const remainingFood = this.foodToGrow - this.totalFood;\n      return Math.ceil(remainingFood / this.perTurn.food);\n    } else {\n      return Math.ceil(this.totalFood / this.perTurn.food) - 1;\n    }\n  }\n\n  get turnsToProductionEnd() {\n    if (!this.product) {\n      return null;\n    }\n    const remainingProduction =\n      this.product.productDefinition.productionCost - this.totalProduction;\n\n    return Math.ceil(remainingProduction / this.yields.production);\n  }\n\n  get turnsToExpand() {\n    const remainingCulture = this.cultureToExpand - this.totalCulture;\n    return Math.ceil(remainingCulture / this.perTurn.culture);\n  }\n\n  getTurnsToProduce(unit: UnitDefinition) {\n    return Math.ceil(unit.productionCost / this.yields.production);\n  }\n\n  updateYields() {\n    zeroYields(this.tileYields);\n\n    this.tileYields.food = 2;\n    this.tileYields.production = 1;\n\n    for (const tile of this.workedTiles) {\n      addYields(this.tileYields, tile.yields);\n    }\n\n    this.tileYields.production += this.freeTileWorkers;\n\n    copyYields(this.yields, this.tileYields);\n\n    for (const building of this.buildings) {\n      this.applyBonuses(building.bonuses);\n    }\n\n    if (this.product?.type === \"idleProduct\") {\n      const idleProduct = this.product.productDefinition as IdleProduct;\n      this.applyBonuses(idleProduct.bonuses);\n    }\n    roundYields(this.yields);\n\n    this.foodConsumed = this.size;\n\n    copyYields(this.perTurn, this.yields);\n    this.perTurn.food -= this.foodConsumed;\n  }\n\n  applyBonuses(bonuses: Bonuses) {\n    this.yields.food += bonuses.yieldValue?.food || 0;\n    this.yields.production += bonuses.yieldValue?.production || 0;\n    this.yields.culture += bonuses.yieldValue?.culture || 0;\n    this.yields.publicWorks += bonuses.yieldValue?.publicWorks || 0;\n\n    if (bonuses.yieldFactor?.food) {\n      this.yields.food += this.tileYields.food * bonuses.yieldFactor.food;\n    }\n    if (bonuses.yieldFactor?.production) {\n      this.yields.production +=\n        this.tileYields.production * bonuses.yieldFactor.production;\n    }\n    if (bonuses.yieldFactor?.culture) {\n      this.yields.culture +=\n        this.tileYields.culture * bonuses.yieldFactor.culture;\n    }\n    if (bonuses.yieldFactor?.publicWorks) {\n      this.yields.publicWorks +=\n        this.tileYields.publicWorks * bonuses.yieldFactor.publicWorks;\n    }\n\n    if (bonuses.transferProductionToFood) {\n      this.yields.food +=\n        this.yields.production * bonuses.transferProductionToFood;\n    }\n\n    if (bonuses.transferProductionToCulture) {\n      this.yields.culture +=\n        this.yields.production * bonuses.transferProductionToCulture;\n    }\n\n    if (bonuses.transferProductionToPublicWorks) {\n      this.yields.publicWorks +=\n        this.yields.production * bonuses.transferProductionToPublicWorks;\n    }\n  }\n\n  addTile(tile: TileCore) {\n    if (!tile.areaOf) {\n      this.tiles.add(tile);\n      this.notWorkedTiles.add(tile);\n      tile.areaOf = this;\n      this.player.area.add(tile);\n      this.player.exploreTiles([tile]);\n      this.player.exploreTiles(tile.neighbours);\n      collector.tiles.add(tile);\n    }\n  }\n\n  removeTile(tile: TileCore) {\n    if (this.tiles.has(tile)) {\n      this.tiles.delete(tile);\n      tile.areaOf = null;\n      this.player.area.remove(tile);\n      collector.tiles.add(tile);\n    }\n  }\n\n  workTile(tile: TileCore, updateYields = true) {\n    if (this.freeTileWorkers && this.tiles.has(tile)) {\n      this.workedTiles.add(tile);\n      this.notWorkedTiles.delete(tile);\n      if (updateYields) {\n        this.updateYields();\n      }\n    }\n  }\n\n  unworkTile(tile: TileCore, updateYields = true) {\n    this.workedTiles.delete(tile);\n    this.notWorkedTiles.add(tile);\n    if (updateYields) {\n      this.updateYields();\n    }\n  }\n\n  getTilesAvailableForExpansion(): Set<TileCore> {\n    const availableTiles = new Set<TileCore>();\n    for (const tile of this.tiles) {\n      for (const neighbour of tile.neighbours) {\n        if (!neighbour.areaOf) {\n          availableTiles.add(neighbour);\n        }\n      }\n    }\n    return availableTiles;\n  }\n\n  pickBestTileToWork(tiles: Set<TileCore>): TileCore | null {\n    let bestTile: TileCore | null = null;\n    let bestYields = 0;\n\n    for (const tile of tiles) {\n      const yields = tile.totalYields;\n      if (yields > bestYields) {\n        bestYields = yields;\n        bestTile = tile;\n      }\n    }\n\n    return bestTile;\n  }\n\n  pickBestTileToExpand(\n    cityTile: TileCore,\n    tiles: Set<TileCore>,\n  ): TileCore | null {\n    let bestTile: TileCore | null = null;\n    let bestScore = -Infinity;\n\n    for (const tile of tiles) {\n      const score = tile.totalYields - cityTile.getDistanceTo(tile) / 2;\n      if (score > bestScore) {\n        bestScore = score;\n        bestTile = tile;\n      }\n    }\n\n    return bestTile;\n  }\n\n  get freeTileWorkers() {\n    return this.size - this.workedTiles.size;\n  }\n\n  optimizeYields() {\n    this.workedTiles.clear();\n    this.notWorkedTiles = new Set(this.tiles);\n    while (this.freeTileWorkers && this.notWorkedTiles.size) {\n      const tile = this.pickBestTileToWork(this.notWorkedTiles);\n      if (!tile) {\n        break;\n      }\n      this.workTile(tile, false);\n    }\n    this.updateYields();\n  }\n\n  canConstruct(building: Building) {\n    return !this.buildings.includes(building);\n  }\n\n  canProduce(product: ProductDefinition): boolean {\n    for (const r of product.requirements) {\n      if (!r.check(this)) {\n        return false;\n      }\n    }\n\n    for (const r of product.weakRequirements) {\n      if (!r.check(this)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private getAvailableProducts<T extends ProductDefinition>(\n    products: T[],\n    city: CityCore,\n  ): T[] {\n    const results: T[] = [];\n    for (const p of products) {\n      let ok = true;\n      for (const r of p.requirements) {\n        if (!r.check(city)) {\n          ok = false;\n          break;\n        }\n      }\n      if (ok) {\n        results.push(p);\n      }\n    }\n    return results;\n  }\n\n  private getDisabledProducts<T extends ProductDefinition>(\n    products: T[],\n    city: CityCore,\n  ): Set<T> {\n    const results = new Set<T>();\n    for (const p of products) {\n      for (const r of p.weakRequirements) {\n        if (!r.check(city)) {\n          results.add(p);\n        }\n      }\n    }\n    return results;\n  }\n\n  updateProductsList() {\n    this.availableUnits = this.getAvailableProducts<UnitDefinition>(\n      UNITS_DEFINITIONS,\n      this,\n    );\n    this.disabledUnits = this.getDisabledProducts<UnitDefinition>(\n      this.availableUnits,\n      this,\n    );\n\n    const notBuildBuildings = BUILDINGS.filter(\n      (b) =>\n        this.product?.productDefinition !== b && !this.buildings.includes(b),\n    );\n\n    this.availableBuildings = this.getAvailableProducts<Building>(\n      notBuildBuildings,\n      this,\n    );\n    this.disabledBuildings = this.getDisabledProducts<Building>(\n      this.availableBuildings,\n      this,\n    );\n\n    this.availableIdleProducts = IDLE_PRODUCTS;\n  }\n\n  changeOwner(newOwner: PlayerCore) {\n    if (this.player === newOwner) {\n      return;\n    }\n\n    const oldOwner = this.player;\n\n    this.player = newOwner;\n\n    const cityTiles = Array.from(this.tiles);\n\n    let index = oldOwner.cities.indexOf(this);\n    if (index !== -1) {\n      oldOwner.cities.splice(index, 1);\n      oldOwner.area.removeBulk(cityTiles);\n    }\n\n    newOwner.cities.push(this);\n    newOwner.area.addBulk(cityTiles);\n\n    newOwner.updateYields();\n    oldOwner.updateYields();\n\n    // TODO explored area should be bigger then city tiles. Change this once fog of war is implement (probably a city should store it's visible tiles)\n    newOwner.exploreTiles(this.tiles);\n\n    collector.cities.add(this);\n    for (const tile of this.tiles) {\n      collector.tiles.add(tile);\n    }\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { UnitCore } from \"./unit\";\nimport { CityCore } from \"./city\";\nimport { PlayerCore } from \"./player\";\nimport {\n  tileToChannel,\n  unitToChannel,\n  cityToChannel,\n  trackedPlayerToChannel,\n} from \"./serialization/channel\";\nimport { PlayerYields } from \"../shared\";\n\nclass Collector {\n  tiles = new Set<TileCore>();\n\n  units = new Set<UnitCore>();\n  unitsDestroyed = new Set<number>();\n\n  cities = new Set<CityCore>();\n  citiesDestroyed = new Set<number>();\n\n  areaTilesAdded = new Map<number, TileCore[]>();\n  areaTilesRemoved = new Map<number, TileCore[]>();\n\n  trackedPlayer: PlayerCore | undefined;\n  trackedPlayerYields: PlayerYields | undefined;\n  tilesExplored = new Set<number>();\n\n  turn = 0;\n\n  flush() {\n    const changes: any[] = [];\n\n    for (const unit of this.units) {\n      changes.push({ type: \"unit.updated\", data: unitToChannel(unit) });\n    }\n    for (const id of this.unitsDestroyed) {\n      changes.push({ type: \"unit.destroyed\", data: id });\n    }\n\n    for (const city of this.cities) {\n      changes.push({ type: \"city.updated\", data: cityToChannel(city) });\n    }\n    for (const id of this.citiesDestroyed) {\n      changes.push({ type: \"city.destroyed\", data: id });\n    }\n\n    if (this.tiles.size) {\n      changes.push({\n        type: \"tiles.updated\",\n        data: Array.from(this.tiles).map((tile) => tileToChannel(tile)),\n      });\n    }\n\n    for (const [id, tiles] of this.areaTilesAdded.entries()) {\n      changes.push({\n        type: \"area.tilesAdded\",\n        data: { id, tiles: tiles.map((t) => t.id) },\n      });\n    }\n    for (const [id, tiles] of this.areaTilesRemoved.entries()) {\n      changes.push({\n        type: \"area.tilesRemoved\",\n        data: { id, tiles: tiles.map((t) => t.id) },\n      });\n    }\n\n    if (this.turn) {\n      changes.push({ type: \"game.turn\", data: this.turn });\n    }\n\n    if (this.trackedPlayer) {\n      changes.push({\n        type: \"trackedPlayer.set\",\n        data: trackedPlayerToChannel(this.trackedPlayer),\n      });\n    }\n    if (this.trackedPlayerYields) {\n      changes.push({\n        type: \"trackedPlayer.yields\",\n        data: this.trackedPlayerYields,\n      });\n    }\n    if (this.tilesExplored.size) {\n      changes.push({\n        type: \"trackedPlayer.tilesExplored\",\n        data: Array.from(this.tilesExplored),\n      });\n    }\n\n    this.tiles.clear();\n\n    this.unitsDestroyed.clear();\n    this.units.clear();\n\n    this.cities.clear();\n    this.citiesDestroyed.clear();\n\n    this.areaTilesAdded.clear();\n    this.areaTilesRemoved.clear();\n\n    this.trackedPlayer = undefined;\n    this.tilesExplored.clear();\n\n    this.turn = 0;\n\n    return changes;\n  }\n\n  addAreaTiles(areaId: number, tiles: TileCore[]) {\n    if (!this.areaTilesAdded.has(areaId)) {\n      this.areaTilesAdded.set(areaId, tiles);\n    } else {\n      this.areaTilesAdded.get(areaId)!.push(...tiles);\n    }\n  }\n\n  removeAreaTiles(areaId: number, tiles: TileCore[]) {\n    if (!this.areaTilesRemoved.has(areaId)) {\n      this.areaTilesRemoved.set(areaId, tiles);\n    } else {\n      this.areaTilesRemoved.get(areaId)!.push(...tiles);\n    }\n  }\n}\n\nexport const collector = new Collector();\n","export class Debug {\n  revealMap = false;\n}\n","import { PlayerCore } from \"./player\";\nimport { TilesMapCore } from \"./tiles-map\";\nimport { UnitsManager } from \"./unit-manager\";\nimport { Debug } from \"./debug\";\nimport { CitiesManager } from \"./cities-manager\";\nimport { AreasManager } from \"./areas-manager\";\nimport { collector } from \"./collector\";\n\nexport class Game {\n  debug = new Debug();\n\n  map: TilesMapCore;\n\n  players: PlayerCore[] = [];\n\n  activePlayerIndex = -1;\n\n  trackedPlayer: PlayerCore;\n\n  humanPlayer: PlayerCore | null = null;\n\n  turn = 1;\n\n  areasManager = new AreasManager();\n\n  unitsManager = new UnitsManager(this);\n\n  citiesManager = new CitiesManager();\n\n  start() {\n    this.activePlayerIndex = -1;\n    this.nextPlayer();\n  }\n\n  addPlayer(player: PlayerCore) {\n    player.id = this.players.length;\n    this.players.push(player);\n    if (!this.trackedPlayer) {\n      this.trackedPlayer = player;\n    }\n  }\n\n  nextPlayer() {\n    this.activePlayerIndex++;\n    if (this.activePlayerIndex >= this.players.length) {\n      this.nextTurn();\n      this.activePlayerIndex = 0;\n    }\n    if (this.activePlayer.ai) {\n      this.activePlayer.ai.nextTurn();\n      this.nextPlayer();\n    } else {\n      if (this.trackedPlayer !== this.activePlayer) {\n        this.trackedPlayer = this.activePlayer;\n        collector.trackedPlayer = this.trackedPlayer;\n      }\n    }\n  }\n\n  nextTurn() {\n    this.unitsManager.nextTurn();\n    this.citiesManager.nextTurn();\n    for (const player of this.players) {\n      player.nextTurn();\n    }\n    this.turn++;\n    collector.turn = this.turn;\n  }\n\n  get activePlayer() {\n    return this.players[this.activePlayerIndex];\n  }\n}\n","import { ProductDefinition } from \"./product\";\nimport { Bonuses } from \"./bonus\";\nimport { IDLE_PRODUCTS } from \"../data/idle-products\";\n\nexport interface IdleProduct extends ProductDefinition {\n  bonuses: Bonuses;\n}\n\nexport const IDLE_PRODUCTS_MAP = new Map<string, IdleProduct>();\n\nfor (const definition of IDLE_PRODUCTS) {\n  IDLE_PRODUCTS_MAP.set(definition.id, definition);\n}\n","import { TileCore } from \"./tile\";\nimport { UnitCore } from \"./unit\";\n\nexport function findPath(unit: UnitCore, end: TileCore): TileCore[][] | null {\n  const startTime = performance.now();\n  const start = unit.tile;\n\n  if (start === end) {\n    return null;\n  }\n\n  if (start.passableArea !== end.passableArea) {\n    return null;\n  }\n\n  const visitedTiles = new Set<TileCore>();\n  const tilesToVisit = new Map<TileCore, number>();\n  const cameFrom = new Map<TileCore, [number, number, TileCore | null]>();\n  const costsSoFar = new Map<TileCore, number>();\n\n  const turnCost = 1 / unit.definition.actionPoints;\n  tilesToVisit.set(start, 0);\n  costsSoFar.set(start, 0);\n  cameFrom.set(start, [0, unit.definition.actionPoints, null]);\n\n  while (tilesToVisit.size) {\n    let nextTile!: TileCore;\n    let minEstimatedCost = Infinity;\n\n    for (const [tile, estimatedCost] of tilesToVisit.entries()) {\n      if (estimatedCost < minEstimatedCost) {\n        minEstimatedCost = estimatedCost;\n        nextTile = tile;\n      }\n    }\n\n    let [turn, actionPointsLeft, ..._] = cameFrom.get(nextTile)!;\n\n    if (!actionPointsLeft) {\n      actionPointsLeft = unit.definition.actionPoints;\n      turn++;\n    }\n\n    visitedTiles.add(nextTile);\n    tilesToVisit.delete(nextTile);\n\n    if (nextTile === end) {\n      const endTime = performance.now();\n      console.debug(`pathfinding took ${Math.round(endTime - startTime)}ms`);\n      return reconstructPath(cameFrom, end);\n    }\n\n    for (const neighbour of nextTile.neighbours) {\n      if (!visitedTiles.has(neighbour)) {\n        const isExplored = unit.player.exploredTiles.has(neighbour);\n        let moveCost = isExplored\n          ? nextTile.neighboursCosts.get(neighbour)!\n          : 1;\n\n        if (moveCost === Infinity) {\n          continue;\n        }\n\n        let newActionPointsLeft = Math.max(0, actionPointsLeft - moveCost);\n\n        moveCost *= turnCost;\n\n        if (!newActionPointsLeft) {\n          moveCost = 1; // ??\n        }\n\n        const costSoFar = costsSoFar.get(nextTile)! + moveCost;\n\n        if (\n          !costsSoFar.has(neighbour) ||\n          costSoFar < costsSoFar.get(neighbour)!\n        ) {\n          costsSoFar.set(neighbour, costSoFar);\n          tilesToVisit.set(\n            neighbour,\n            costSoFar + getEuclideanDistance(neighbour, end) * turnCost,\n          );\n          cameFrom.set(neighbour, [turn, newActionPointsLeft, nextTile]);\n        }\n      }\n    }\n  }\n\n  const endTime = performance.now();\n  console.debug(`pathfinding took ${Math.round(endTime - startTime)}ms`);\n  return null;\n}\n\nfunction getEuclideanDistance(start: TileCore, end: TileCore) {\n  return Math.sqrt(\n    (start.x - end.x) * (start.x - end.x) +\n      (start.y - end.y) * (start.y - end.y),\n  );\n}\n\nfunction reconstructPath(\n  cameFrom: Map<TileCore, [number, number, TileCore | null]>,\n  target: TileCore,\n): TileCore[][] {\n  let lastTile = target;\n  let lastTurn: number | null = null;\n\n  let turnPath: TileCore[] = [target];\n  const path: TileCore[][] = [turnPath];\n  while (true) {\n    const [turn, _, tile] = cameFrom.get(lastTile)!;\n    if (!tile || !cameFrom.has(tile)) {\n      return path;\n    }\n    if (turn !== lastTurn) {\n      lastTurn = turn;\n      turnPath = [];\n      path.unshift(turnPath);\n    }\n    turnPath.unshift(tile!);\n    lastTile = tile!;\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { UnitCore } from \"./unit\";\nimport { Game } from \"./game\";\nimport { CityCore } from \"./city\";\nimport { AIPlayer } from \"../ai/ai-player\";\nimport {\n  EMPTY_YIELDS,\n  zeroYields,\n  addYields,\n  subtractYields,\n  copyYields,\n} from \"./yields\";\nimport { collector } from \"./collector\";\nimport { PlayerYields } from \"../shared\";\n\nexport const PLAYER_COLORS: number[] = [\n  0xff0000,\n  0x00ff00,\n  0x0000ff,\n  0xffff00,\n  0x00ffff,\n  0xff00ff,\n  0x999999,\n  0xdddddd,\n  0xfbacac,\n  0xe6b873,\n  0x39862b,\n  0x2e716e,\n  0x7457bb,\n  0xab57bb,\n  0x79583c,\n  0xb6bbe6,\n  0xb6bce6,\n];\n\nexport class PlayerCore {\n  id: number;\n\n  exploredTiles = new Set<TileCore>();\n\n  visibleTiles = new Set<TileCore>();\n\n  units: UnitCore[] = [];\n\n  cities: CityCore[] = [];\n\n  citiesWithoutProduction: CityCore[] = [];\n\n  unitsWithoutOrders: UnitCore[] = [];\n\n  yields: PlayerYields = {\n    costs: { ...EMPTY_YIELDS },\n    income: { ...EMPTY_YIELDS },\n    total: { ...EMPTY_YIELDS },\n    perTurn: { ...EMPTY_YIELDS },\n  };\n\n  area = this.game.areasManager.make();\n\n  ai: AIPlayer | null = null;\n\n  constructor(public game: Game, public color: number) {}\n\n  exploreTiles(tiles: Iterable<TileCore>) {\n    for (const tile of tiles) {\n      if (!this.exploredTiles.has(tile)) {\n        this.exploredTiles.add(tile);\n        if (this.id === this.game.trackedPlayer.id) {\n          collector.tilesExplored.add(tile.id);\n        }\n      }\n    }\n  }\n\n  updateYields() {\n    zeroYields(this.yields.income);\n    zeroYields(this.yields.costs);\n    zeroYields(this.yields.perTurn);\n\n    for (const city of this.cities) {\n      for (const tile of city.tiles) {\n        if (!tile.city) {\n          if (tile.improvement !== null) {\n            this.yields.costs.publicWorks++;\n          }\n          if (tile.road !== null) {\n            this.yields.costs.publicWorks++;\n          }\n        }\n      }\n      addYields(this.yields.income, city.yields);\n    }\n\n    copyYields(this.yields.perTurn, this.yields.income);\n    subtractYields(this.yields.perTurn, this.yields.costs);\n\n    if (this === this.game.trackedPlayer) {\n      collector.trackedPlayerYields = this.yields;\n    }\n  }\n\n  nextTurn() {\n    this.updateYields();\n    addYields(this.yields.total, this.yields.perTurn);\n    this.yields.total.publicWorks = Math.max(0, this.yields.total.publicWorks);\n\n    this.updateCitiesWithoutProduction();\n    this.updateUnitsWithoutOrders();\n  }\n\n  updateCitiesWithoutProduction() {\n    this.citiesWithoutProduction = this.cities.filter((c) => !c.product);\n  }\n\n  updateUnitsWithoutOrders() {\n    this.unitsWithoutOrders = this.units.filter(\n      (c) => !c.order && c.actionPointsLeft,\n    );\n  }\n\n  addCity(city: CityCore) {\n    this.cities.push(city);\n  }\n}\n","import { CityCore } from \"./city\";\n\nexport abstract class ProductRequirement {\n  static id: string;\n  abstract check(city: CityCore): boolean;\n}\n\nexport interface ProductDefinition {\n  id: string;\n  name: string;\n  productionCost: number;\n\n  // product will be hidden from products list\n  requirements: ProductRequirement[];\n\n  // product will be disabled on the products list\n  weakRequirements: ProductRequirement[];\n}\n\nexport class BuildingRequirement extends ProductRequirement {\n  id = \"building\";\n\n  constructor(public buildingId: string) {\n    super();\n  }\n\n  check(city: CityCore) {\n    return city.buildingsIds.has(this.buildingId);\n  }\n}\n\nexport class SizeRequirement extends ProductRequirement {\n  id = \"size\";\n\n  constructor(public size: number) {\n    super();\n  }\n\n  check(city: CityCore) {\n    return city.size >= this.size;\n  }\n}\n","import { Yields } from \"../yields\";\nimport { ProductType, CityCore } from \"../city\";\nimport { Game } from \"../game\";\nimport { PlayerCore } from \"../player\";\nimport { BaseTile, PlayerYields } from \"src/app/shared\";\nimport { TilesMapCore } from \"../tiles-map\";\nimport { UnitOrder, UnitCore } from \"../unit\";\nimport { TileCore } from \"../tile\";\n\nexport interface GameChanneled {\n  turn: number;\n  map: MapChanneled;\n  players: PlayerChanneled[];\n  trackedPlayer: TrackedPlayerChanneled;\n  units: UnitChanneled[];\n  cities: CityChanneled[];\n}\n\nexport interface MapChanneled {\n  width: number;\n  height: number;\n  tiles: TileChanneled[][];\n}\n\nexport interface TileChanneled extends BaseTile {\n  areaOf: number | null;\n  cityId: number | null;\n  unitsIds: number[];\n}\n\nexport interface CityChanneled {\n  id: number;\n  name: string;\n  size: number;\n  tileId: number;\n  playerId: number;\n\n  totalFood: number;\n  foodToGrow: number;\n  foodPerTurn: number;\n  turnsToGrow: number;\n\n  totalProduction: number;\n  productionPerTurn: number;\n  productionRequired: number | null;\n  turnsToProductionEnd: number | null;\n  productName: string | null;\n}\n\nexport interface CityDetailsChanneled {\n  id: number;\n  name: string;\n  size: number;\n  tileId: number;\n  playerId: number;\n\n  totalFood: number;\n  foodToGrow: number;\n  turnsToGrow: number;\n\n  totalProduction: number;\n  turnsToProductionEnd: number | null;\n  foodConsumed: number;\n\n  totalCulture: number;\n  cultureToExpand: number;\n\n  tileYields: Yields;\n  yields: Yields;\n  perTurn: Yields;\n\n  productId: string | null;\n  productType: ProductType | null;\n\n  buildingsIds: string[];\n\n  tiles: number[];\n\n  workedTiles: number[];\n\n  availableBuildings: string[];\n\n  disabledBuildings: string[];\n\n  availableUnits: string[];\n  disabledUnits: string[];\n\n  availableIdleProducts: string[];\n  disabledIdleProducts: string[];\n}\n\nexport interface PlayerChanneled {\n  id: number;\n  color: number;\n  areaId: number;\n}\n\nexport interface TrackedPlayerChanneled {\n  id: number;\n  color: number;\n  exploredTiles: number[];\n  units: number[];\n  cities: number[];\n\n  yields: PlayerYields;\n}\n\nexport interface UnitChanneled {\n  id: number;\n  tileId: number;\n  definitionId: string;\n  playerId: number;\n}\n\nexport interface UnitDetailsChanneled {\n  id: number;\n  tileId: number;\n  definitionId: string;\n  playerId: number;\n  actionPointsLeft: number;\n  order: UnitOrder;\n  path: number[][] | null;\n}\n\nexport function gameToChannel(game: Game): GameChanneled {\n  return {\n    turn: game.turn,\n    map: mapToChannel(game.map),\n    players: game.players.map((p) => playerToChannel(p)),\n    trackedPlayer: trackedPlayerToChannel(game.trackedPlayer),\n    units: game.unitsManager.units.map((u) => unitToChannel(u)),\n    cities: game.citiesManager.cities.map((c) => cityToChannel(c)),\n  };\n}\n\nexport function mapToChannel(map: TilesMapCore): MapChanneled {\n  const tiles: TileChanneled[][] = [];\n  for (let x = 0; x < map.width; x++) {\n    const row: TileChanneled[] = [];\n    tiles.push(row);\n    for (let y = 0; y < map.height; y++) {\n      row.push(tileToChannel(map.tiles[x][y]));\n    }\n  }\n\n  return {\n    width: map.width,\n    height: map.height,\n    tiles,\n  };\n}\n\nexport function tileToChannel(tile: TileCore): TileChanneled {\n  return {\n    id: tile.id,\n    x: tile.x,\n    y: tile.y,\n    climate: tile.climate,\n    forest: tile.forest,\n    improvement: tile.improvement,\n    landForm: tile.landForm,\n    riverParts: tile.riverParts,\n    road: tile.road,\n    seaLevel: tile.seaLevel,\n    wetlands: tile.wetlands,\n    yields: tile.yields,\n    areaOf: tile.areaOf ? tile.areaOf.id : null,\n    unitsIds: tile.units.map((u) => u.id),\n    cityId: tile.city ? tile.city.id : null,\n  };\n}\n\nexport function cityToChannel(city: CityCore): CityChanneled {\n  return {\n    id: city.id,\n    name: city.name,\n    size: city.size,\n    playerId: city.player.id,\n    tileId: city.tile.id,\n\n    totalFood: city.totalFood,\n    foodToGrow: city.foodToGrow,\n    foodPerTurn: city.perTurn.food,\n    turnsToGrow: city.turnsToGrow,\n\n    totalProduction: city.totalProduction,\n    productionPerTurn: city.yields.production,\n    productionRequired: city.product\n      ? city.product.productDefinition.productionCost\n      : null,\n    turnsToProductionEnd: city.turnsToProductionEnd,\n    productName: city.product ? city.product.productDefinition.name : null,\n  };\n}\n\nexport function cityDetailsToChannel(city: CityCore): CityDetailsChanneled {\n  city.updateProductsList();\n\n  return {\n    id: city.id,\n    name: city.name,\n    size: city.size,\n    playerId: city.player.id,\n    tileId: city.tile.id,\n\n    totalFood: city.totalFood,\n    foodToGrow: city.foodToGrow,\n    turnsToGrow: city.turnsToGrow,\n\n    totalProduction: city.totalProduction,\n    turnsToProductionEnd: city.turnsToProductionEnd,\n    availableBuildings: city.availableBuildings.map((b) => b.id),\n    availableIdleProducts: city.availableIdleProducts.map((p) => p.id),\n    availableUnits: city.availableUnits.map((u) => u.id),\n    buildingsIds: Array.from(city.buildingsIds),\n    cultureToExpand: city.cultureToExpand,\n    disabledBuildings: Array.from(city.disabledBuildings).map((b) => b.id),\n    disabledIdleProducts: Array.from(city.disabledIdleProducts).map(\n      (p) => p.id,\n    ),\n    disabledUnits: Array.from(city.disabledUnits).map((u) => u.id),\n    foodConsumed: city.foodConsumed,\n    perTurn: city.perTurn,\n    productId: city.product?.productDefinition.id || null,\n    productType: city.product?.type || null,\n    tileYields: city.tileYields,\n    tiles: Array.from(city.tiles).map((t) => t.id),\n    totalCulture: city.totalCulture,\n    workedTiles: Array.from(city.workedTiles).map((t) => t.id),\n    yields: city.yields,\n  };\n}\n\nexport function playerToChannel(player: PlayerCore): PlayerChanneled {\n  return {\n    id: player.id,\n    color: player.color,\n    areaId: player.area.id,\n  };\n}\n\nexport function trackedPlayerToChannel(\n  player: PlayerCore,\n): TrackedPlayerChanneled {\n  return {\n    id: player.id,\n    color: player.color,\n    exploredTiles: Array.from(player.exploredTiles).map((t) => t.id),\n    units: player.units.map((u) => u.id),\n    cities: player.cities.map((c) => c.id),\n    yields: player.yields,\n  };\n}\n\nexport function unitToChannel(unit: UnitCore): UnitChanneled {\n  return {\n    id: unit.id,\n    tileId: unit.tile.id,\n    definitionId: unit.definition.id,\n    playerId: unit.player.id,\n  };\n}\n\nexport function unitDetailsToChannel(unit: UnitCore): UnitDetailsChanneled {\n  return {\n    id: unit.id,\n    tileId: unit.tile.id,\n    definitionId: unit.definition.id,\n    playerId: unit.player.id,\n    actionPointsLeft: unit.actionPointsLeft,\n    order: unit.order,\n    path: unit.path?.map((row) => row.map((tile) => tile.id)) || null,\n  };\n}\n","import { Game } from \"../game\";\nimport { ProductDefinition } from \"../product\";\nimport { ProductType, CityCore } from \"../city\";\nimport { BUILDINGS_MAP } from \"../buildings\";\nimport { IDLE_PRODUCTS_MAP } from \"../idle-product\";\nimport { Yields } from \"../yields\";\nimport { PlayerCore } from \"../player\";\nimport { AIPlayer } from \"src/app/ai/ai-player\";\nimport { Climate, LandForm, SeaLevel, TileDirection } from \"src/app/shared\";\nimport { TileImprovement, TileRoad } from \"../tile-improvements\";\nimport { TileCore } from \"../tile\";\nimport { TilesMapCore } from \"../tiles-map\";\nimport { UnitCore, UnitOrder } from \"../unit\";\n\nexport interface GameSerialized {\n  turn: number;\n  map: MapSerialized;\n  players: PlayerSerialized[];\n  activePlayerIndex: number;\n  trackedPlayerId: number;\n  units: UnitSerialized[];\n  cities: CitySerialized[];\n}\n\ninterface MapSerialized {\n  width: number;\n  height: number;\n  tiles: TileSerialized[];\n}\n\ninterface TileSerialized {\n  climate?: Climate;\n  landForm?: LandForm;\n  seaLevel?: SeaLevel;\n  improvement?: TileImprovement | null;\n  road?: TileRoad | null;\n  riverParts?: TileDirection[];\n  forest?: boolean;\n  wetlands?: boolean;\n}\n\ninterface ProductSerialized {\n  type: ProductType;\n  id: string;\n}\n\ninterface CitySerialized {\n  id: number;\n  name: string;\n  size: number;\n  tile: number;\n  player: number;\n  totalFood: number;\n  totalCulture: number;\n  totalProduction: number;\n  product: ProductSerialized | null;\n  tiles: number[];\n  workedTiles: number[];\n  buildings: string[];\n}\n\ninterface PlayerSerialized {\n  id: number;\n  ai: boolean;\n  color: number;\n  exploredTiles: number[];\n  yieldsTotal: Yields;\n}\n\ninterface UnitSerialized {\n  id: number;\n  tile: number;\n  definition: string;\n  actionPointsLeft: number;\n  player: number;\n  order: UnitOrder;\n  path: number[][] | null;\n}\n\nexport function dumpGame(game: Game): GameSerialized {\n  return {\n    turn: game.turn,\n    trackedPlayerId: game.trackedPlayer.id,\n    activePlayerIndex: game.activePlayerIndex,\n    map: dumpMap(game.map),\n    players: game.players.map((p) => dumpPlayer(p)),\n    units: game.unitsManager.units.map((u) => dumpUnit(u)),\n    cities: game.citiesManager.cities.map((c) => dumpCity(c)),\n  };\n}\n\nexport function loadGame(data: GameSerialized) {\n  const game = new Game();\n\n  game.turn = data.turn;\n\n  // First deserialize map as other entities depend on it.\n  game.map = loadMap(data.map);\n\n  // Then players as unit deserialization needs them.\n  for (const playerData of data.players) {\n    const player = loadPlayer(game, playerData);\n    game.addPlayer(player);\n  }\n  game.activePlayerIndex = data.activePlayerIndex;\n\n  for (const unit of data.units) {\n    loadUnit(game, unit);\n  }\n\n  for (const city of data.cities) {\n    loadCity(game, city);\n  }\n\n  for (const player of game.players) {\n    player.updateCitiesWithoutProduction();\n    player.updateUnitsWithoutOrders();\n    player.updateYields();\n  }\n\n  return game;\n}\n\nfunction dumpMap(map: TilesMapCore): MapSerialized {\n  return {\n    width: map.width,\n    height: map.height,\n    tiles: dumpTiles(map),\n  };\n}\n\nfunction dumpTiles(map: TilesMapCore): TileSerialized[] {\n  // Store only changes from the last tile to keep save size minimal\n  const result: Partial<TileCore>[] = [];\n  let lastTile: Partial<TileCore> = {};\n  for (let x = 0; x < map.width; x++) {\n    for (let y = 0; y < map.height; y++) {\n      const tile = map.tiles[x][y];\n      const diff: Partial<TileCore> = {};\n\n      if (tile.seaLevel !== lastTile.seaLevel) {\n        diff.seaLevel = tile.seaLevel;\n      }\n      if (tile.climate !== lastTile.climate) {\n        diff.climate = tile.climate;\n      }\n      if (tile.landForm !== lastTile.landForm) {\n        diff.landForm = tile.landForm;\n      }\n      if (tile.forest !== lastTile.forest) {\n        diff.forest = tile.forest;\n      }\n      if (tile.wetlands !== lastTile.wetlands) {\n        diff.wetlands = tile.wetlands;\n      }\n      if (tile.improvement !== lastTile.improvement) {\n        diff.improvement = tile.improvement;\n      }\n      if (tile.road !== lastTile.road) {\n        diff.road = tile.road;\n      }\n\n      // The rivers tends to not repeat in subsequent tiles so instead of using diff let's just ignore empty rivers.\n      if (tile.riverParts.length) {\n        diff.riverParts = tile.riverParts;\n      }\n\n      result.push(diff);\n      lastTile = tile;\n    }\n  }\n  return result;\n}\n\nfunction loadMap(mapData: MapSerialized) {\n  const map = new TilesMapCore(mapData.width, mapData.height);\n  let lastTile: TileCore = map.tiles[0][0];\n  let index = 0;\n\n  for (let x = 0; x < mapData.width; x++) {\n    for (let y = 0; y < mapData.height; y++) {\n      const tileData = mapData.tiles[index];\n      const tile = map.tiles[x][y];\n\n      tile.climate =\n        tileData.climate !== undefined ? tileData.climate! : lastTile.climate;\n\n      tile.seaLevel =\n        tileData.seaLevel !== undefined\n          ? tileData.seaLevel!\n          : lastTile.seaLevel;\n\n      tile.landForm =\n        tileData.landForm !== undefined\n          ? tileData.landForm!\n          : lastTile.landForm;\n\n      tile.improvement =\n        tileData.improvement !== undefined\n          ? tileData.improvement!\n          : lastTile.improvement;\n\n      tile.road = tileData.road !== undefined ? tileData.road! : lastTile.road;\n\n      tile.riverParts = tileData.riverParts || [];\n\n      tile.forest =\n        tileData.forest !== undefined ? tileData.forest! : lastTile.forest;\n\n      lastTile = tile;\n      index++;\n    }\n  }\n\n  map.precompute();\n\n  return map;\n}\n\nfunction dumpPlayer(player: PlayerCore): PlayerSerialized {\n  return {\n    id: player.id,\n    ai: !!player.ai,\n    color: player.color,\n    exploredTiles: Array.from(player.exploredTiles).map((t) => t.id),\n    yieldsTotal: player.yields.total,\n  };\n}\n\nfunction loadPlayer(game: Game, data: PlayerSerialized) {\n  const player = new PlayerCore(game, data.color || 0);\n\n  if (data.ai) {\n    player.ai = new AIPlayer(player);\n  }\n\n  for (const tileId of data.exploredTiles) {\n    player.exploredTiles.add(game.map.tilesMap.get(tileId)!);\n  }\n  player.yields.total = data.yieldsTotal;\n  player.updateYields();\n  return player;\n}\n\nfunction loadCity(game: Game, cityData: CitySerialized) {\n  const tile = game.map.tilesMap.get(cityData.tile)!;\n  const player = game.players[cityData.player];\n  const city = game.citiesManager.spawn(tile, player, false);\n\n  if (!city) {\n    return;\n  }\n\n  city.name = cityData.name;\n  city.size = cityData.size;\n  city.totalFood = cityData.totalFood;\n  city.totalProduction = cityData.totalProduction;\n  city.totalCulture = cityData.totalCulture;\n\n  for (const tileIndex of cityData.tiles) {\n    city.addTile(game.map.tilesMap.get(tileIndex)!);\n  }\n\n  for (const tileIndex of cityData.workedTiles) {\n    city.workTile(game.map.tilesMap.get(tileIndex)!);\n  }\n\n  if (cityData.product) {\n    let productDefinition: ProductDefinition;\n\n    if (cityData.product.type === \"unit\") {\n      productDefinition = game.unitsManager.definitions.get(\n        cityData.product.id,\n      )!;\n    } else if (cityData.product.type === \"building\") {\n      productDefinition = BUILDINGS_MAP.get(cityData.product.id)!;\n    } else {\n      productDefinition = IDLE_PRODUCTS_MAP.get(cityData.product.id)!;\n    }\n\n    city.product = {\n      type: cityData.product.type,\n      productDefinition,\n    };\n  }\n\n  city.buildings = cityData.buildings.map((b) => BUILDINGS_MAP.get(b)!);\n  city.buildingsIds = new Set(city.buildings.map((b) => b.id));\n  city.updateYields();\n}\n\nfunction dumpCity(city: CityCore): CitySerialized {\n  return {\n    id: city.id,\n    name: city.name,\n    size: city.size,\n    player: city.player.id,\n    tile: city.tile.id,\n    totalFood: city.totalFood,\n    totalProduction: city.totalProduction,\n    totalCulture: city.totalCulture,\n    product: city.product\n      ? {\n          type: city.product.type,\n          id: city.product.productDefinition.id,\n        }\n      : null,\n    tiles: Array.from(city.tiles).map((tile) => tile.id),\n    workedTiles: Array.from(city.workedTiles).map((tile) => tile.id),\n    buildings: city.buildings.map((b) => b.id),\n  };\n}\n\nfunction dumpUnit(unit: UnitCore): UnitSerialized {\n  return {\n    id: unit.id,\n    tile: unit.tile.id,\n    definition: unit.definition.id,\n    actionPointsLeft: unit.actionPointsLeft,\n    player: unit.player.id,\n    order: unit.order,\n    path: unit.path?.map((row) => row.map((tile) => tile.id)) || null,\n  };\n}\n\nfunction loadUnit(game: Game, unitData: UnitSerialized) {\n  const tile = game.map.tilesMap.get(unitData.tile)!;\n  const player = game.players[unitData.player];\n  const unit = game.unitsManager.spawn(unitData.definition, tile, player);\n  unit.actionPointsLeft = unitData.actionPointsLeft;\n  unit.order = unitData.order;\n\n  unit.path =\n    unitData.path?.map((row) =>\n      row.map((tileId) => game.map.tilesMap.get(tileId)!),\n    ) || null;\n}\n","export enum TileImprovement {\n  farm,\n  mine,\n  sawmill,\n}\n\nexport enum TileRoad {\n  road,\n}\n\nexport const IMPROVEMENT_PUBLIC_WORKS_COSTS: Record<TileImprovement, number> = {\n  [TileImprovement.farm]: 15,\n  [TileImprovement.mine]: 15,\n  [TileImprovement.sawmill]: 15,\n};\n\nexport const IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN: Record<\n  TileImprovement,\n  number\n> = {\n  [TileImprovement.farm]: 1,\n  [TileImprovement.mine]: 1,\n  [TileImprovement.sawmill]: 1,\n};\n\nexport const ROAD_PUBLIC_WORKS_COSTS: Record<TileRoad, number> = {\n  [TileRoad.road]: 15,\n};\n\nexport const ROAD_PUBLIC_WORKS_COSTS_PER_TURN: Record<TileRoad, number> = {\n  [TileRoad.road]: 1,\n};\n","import { Yields, EMPTY_YIELDS } from \"./yields\";\nimport { TileImprovement, TileRoad } from \"./tile-improvements\";\nimport {\n  Climate,\n  LandForm,\n  SeaLevel,\n  TileDirection,\n  BaseTile,\n} from \"../shared\";\nimport { UnitCore } from \"./unit\";\nimport { CityCore } from \"./city\";\nimport { collector } from \"./collector\";\n\nconst BASE_CLIMATE_YIELDS: Record<Climate, Yields> = {\n  [Climate.arctic]: { ...EMPTY_YIELDS },\n  [Climate.continental]: { ...EMPTY_YIELDS, food: 1, production: 1 },\n  [Climate.desert]: {\n    ...EMPTY_YIELDS,\n  },\n  [Climate.oceanic]: { ...EMPTY_YIELDS, food: 2, production: 1 },\n  [Climate.savanna]: { ...EMPTY_YIELDS, food: 1, production: 1 },\n  [Climate.tropical]: { ...EMPTY_YIELDS, food: 1 },\n  [Climate.tundra]: { ...EMPTY_YIELDS, production: 1 },\n};\n\nconst BASE_LAND_FORM_YIELDS: Record<LandForm, Yields> = {\n  [LandForm.plains]: { ...EMPTY_YIELDS },\n  [LandForm.hills]: { ...EMPTY_YIELDS, food: -1 },\n  [LandForm.mountains]: { ...EMPTY_YIELDS, food: -Infinity, production: -5 },\n};\n\nexport class TileCore implements BaseTile {\n  climate = Climate.continental;\n  landForm = LandForm.plains;\n  seaLevel = SeaLevel.deep;\n  riverParts: TileDirection[] = [];\n  forest = false;\n  wetlands = false;\n  improvement: TileImprovement | null = null;\n  road: TileRoad | null = null;\n\n  units: UnitCore[] = [];\n  city: CityCore | null = null;\n  areaOf: CityCore | null = null;\n\n  yields: Yields = { ...EMPTY_YIELDS };\n\n  // cached data\n  neighbours: TileCore[] = [];\n  fullNeighbours: (TileCore | null)[] = []; // keeps neighbours in all directions, null if map border, can be indexed with TileDirection\n  neighboursCosts = new Map<TileCore, number>();\n  sweetSpotValue = 0; // used by ai to find good city location\n  passableArea = 0; // used by pathfinding to quickly decide if a path between two tiles exists\n\n  constructor(public id: number, public x: number, public y: number) {}\n\n  computeMovementCosts() {\n    for (const neighbour of this.neighbours) {\n      const dir = this.getDirectionTo(neighbour);\n      let cost = 1;\n      if (neighbour.seaLevel !== SeaLevel.none) {\n        cost = Infinity;\n      } else if (neighbour.landForm === LandForm.mountains) {\n        cost = Infinity;\n      } else if (neighbour.landForm === LandForm.hills) {\n        cost = 2;\n      } else {\n        if (this.riverParts.includes(dir)) {\n          cost = 3;\n        } else if (this.riverParts.length && neighbour.riverParts.length) {\n          cost = 0.5;\n        }\n      }\n      if (neighbour.road === TileRoad.road) {\n        cost /= 3;\n      }\n      this.neighboursCosts.set(neighbour, cost);\n    }\n  }\n\n  getDirectionTo(tile: TileCore): TileDirection {\n    if (tile.x === this.x - (this.y % 2 ? 0 : 1) && tile.y === this.y - 1) {\n      return TileDirection.NW;\n    }\n    if (tile.x === this.x + (this.y % 2 ? 1 : 0) && tile.y === this.y - 1) {\n      return TileDirection.NE;\n    }\n    if (tile.x === this.x + 1 && tile.y === this.y) {\n      return TileDirection.E;\n    }\n    if (tile.x === this.x + (this.y % 2 ? 1 : 0) && tile.y === this.y + 1) {\n      return TileDirection.SE;\n    }\n    if (tile.x === this.x - (this.y % 2 ? 0 : 1) && tile.y === this.y + 1) {\n      return TileDirection.SW;\n    }\n    if (tile.x === this.x - 1 && tile.y === this.y) {\n      return TileDirection.W;\n    }\n    return TileDirection.NONE;\n  }\n\n  getDistanceTo(tile: TileCore) {\n    // This is imprecise but good enough for now.\n    return Math.abs(this.x - tile.x) + Math.abs(this.y - tile.y);\n  }\n\n  computeYields() {\n    if (this.seaLevel === SeaLevel.deep) {\n      this.yields.food = 0;\n      this.yields.production = 0;\n    } else if (this.seaLevel === SeaLevel.shallow) {\n      this.yields.food = 1;\n      this.yields.production = 0;\n    } else {\n      const climateYields = BASE_CLIMATE_YIELDS[this.climate];\n      const landFormYields = BASE_LAND_FORM_YIELDS[this.landForm];\n      this.yields.food = climateYields.food + landFormYields.food;\n      this.yields.production =\n        climateYields.production + landFormYields.production;\n\n      if (this.forest) {\n        this.yields.food--;\n        this.yields.production++;\n      }\n\n      if (this.wetlands) {\n        this.yields.food--;\n        this.yields.production--;\n      }\n\n      if (this.riverParts.length) {\n        this.yields.food += this.climate === Climate.desert ? 3 : 1;\n      }\n\n      if (this.improvement === TileImprovement.farm) {\n        this.yields.food++;\n      } else if (this.improvement === TileImprovement.mine) {\n        this.yields.production++;\n      } else if (this.improvement === TileImprovement.sawmill) {\n        this.yields.production++;\n      }\n\n      this.yields.food = Math.max(0, this.yields.food);\n      this.yields.production = Math.max(0, this.yields.production);\n    }\n  }\n\n  get totalYields(): number {\n    return this.yields.food + this.yields.production;\n  }\n\n  getTilesInRange(range: number): Set<TileCore> {\n    const result = new Set<TileCore>([this]);\n    for (let i = 0; i < range; i++) {\n      let neighbours = new Set<TileCore>();\n      for (const tile of result) {\n        for (const neighbour of tile.neighbours) {\n          neighbours.add(neighbour);\n        }\n      }\n      for (const tile of neighbours) {\n        result.add(tile);\n      }\n    }\n    return result;\n  }\n\n  computeSweetSpotValue() {\n    this.sweetSpotValue = 0;\n    if (\n      this.areaOf ||\n      this.landForm === LandForm.mountains ||\n      this.seaLevel !== SeaLevel.none\n    ) {\n      return;\n    }\n    const tiles = this.getTilesInRange(3);\n    for (const tile of tiles) {\n      this.sweetSpotValue += tile.yields.food;\n      this.sweetSpotValue += tile.yields.production;\n    }\n  }\n\n  update() {\n    this.computeYields();\n    this.computeMovementCosts();\n    for (const neighbour of this.neighbours) {\n      // TODO this loop can be optimized by computing only the cost from neighbour to this tile.\n      neighbour.computeMovementCosts();\n    }\n    collector.tiles.add(this);\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { getTileNeighbours, getTileFullNeighbours } from \"../shared/hex-math\";\nimport { LandForm, SeaLevel } from \"../shared\";\n\nexport class TilesMapCore {\n  tiles: TileCore[][] = [];\n  tilesMap = new Map<number, TileCore>();\n\n  constructor(public width: number, public height: number) {\n    for (let x = 0; x < width; x++) {\n      const row: TileCore[] = [];\n      this.tiles.push(row);\n      for (let y = 0; y < height; y++) {\n        const tile = new TileCore(x * width + y, x, y);\n        row.push(tile);\n        this.tilesMap.set(tile.id, tile);\n      }\n    }\n\n    for (let x = 0; x < width; x++) {\n      for (let y = 0; y < height; y++) {\n        this.tiles[x][y].neighbours = getTileNeighbours(this.tiles, x, y);\n        this.tiles[x][y].fullNeighbours = getTileFullNeighbours(\n          this.tiles,\n          x,\n          y,\n        );\n      }\n    }\n  }\n\n  precompute() {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.tiles[x][y];\n        tile.computeYields();\n        tile.computeMovementCosts();\n        tile.computeSweetSpotValue();\n      }\n    }\n    this.precomputePassableAreas();\n  }\n\n  private precomputePassableAreas() {\n    const visited = new Set<TileCore>();\n    let areaId = 1;\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.tiles[x][y];\n        if (visited.has(tile)) {\n          continue;\n        }\n\n        if (tile.landForm === LandForm.mountains) {\n          continue;\n        }\n\n        this.computePassableArea(tile, areaId++, visited);\n      }\n    }\n  }\n\n  private computePassableArea(\n    startTile: TileCore,\n    areaId: number,\n    visited: Set<TileCore>,\n  ) {\n    // Cannot use recursion here because it fails with too many recursion levels on bigger maps. Using queue instead.\n    const queue: TileCore[] = [startTile];\n    visited.add(startTile);\n\n    while (queue.length) {\n      const tile = queue.shift()!;\n      tile.passableArea = areaId;\n\n      for (const neighbour of tile.neighbours) {\n        if (visited.has(neighbour)) {\n          continue;\n        }\n\n        const isMountains = neighbour.landForm === LandForm.mountains;\n\n        const areBothLand =\n          tile.seaLevel === SeaLevel.none &&\n          neighbour.seaLevel === SeaLevel.none;\n\n        const areBothWater =\n          tile.seaLevel !== SeaLevel.none &&\n          neighbour.seaLevel !== SeaLevel.none;\n\n        if (!isMountains && (areBothLand || areBothWater)) {\n          visited.add(neighbour);\n          queue.push(neighbour);\n        }\n      }\n    }\n  }\n\n  get(x: number, y: number): TileCore | null {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return null;\n    }\n    return this.tiles[x][y];\n  }\n}\n","import { Game } from \"./game\";\nimport { UnitCore } from \"./unit\";\nimport {\n  TileImprovement,\n  TileRoad,\n  IMPROVEMENT_PUBLIC_WORKS_COSTS,\n  IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN,\n  ROAD_PUBLIC_WORKS_COSTS,\n  ROAD_PUBLIC_WORKS_COSTS_PER_TURN,\n} from \"./tile-improvements\";\nimport { isImprovementPossible, isRoadPossible } from \"../shared\";\n\nexport type UnitAction =\n  | \"foundCity\"\n  | \"buildRoad\"\n  | \"buildFarm\"\n  | \"buildMine\"\n  | \"buildSawmill\";\n\nconst ACTION_TO_IMPROVEMENT: Partial<Record<UnitAction, TileImprovement>> = {\n  buildFarm: TileImprovement.farm,\n  buildMine: TileImprovement.mine,\n  buildSawmill: TileImprovement.sawmill,\n};\n\nexport function getPublicWorksRequired(action: UnitAction) {\n  if (action === \"buildRoad\") {\n    return ROAD_PUBLIC_WORKS_COSTS[TileRoad.road];\n  }\n  const improvement = ACTION_TO_IMPROVEMENT[action];\n  if (improvement !== undefined) {\n    return IMPROVEMENT_PUBLIC_WORKS_COSTS[improvement];\n  }\n  return 0;\n}\n\nexport function getPublicWorksPerTurn(action: UnitAction) {\n  if (action === \"buildRoad\") {\n    return ROAD_PUBLIC_WORKS_COSTS_PER_TURN[TileRoad.road];\n  }\n  const improvement = ACTION_TO_IMPROVEMENT[action];\n  if (improvement !== undefined) {\n    return IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN[improvement];\n  }\n  return 0;\n}\n\nexport abstract class ActionRequirement {\n  static id: string;\n\n  id: string;\n\n  constructor() {\n    this.id = this.constructor[\"id\"];\n  }\n\n  abstract check(unit: UnitCore, action: UnitAction): boolean;\n}\n\nexport class OwnTileRequirement extends ActionRequirement {\n  id = \"ownTile\";\n\n  check(unit: UnitCore) {\n    return unit.tile.areaOf?.player === unit.player;\n  }\n}\n\nexport class NotForeignTileRequirement extends ActionRequirement {\n  id = \"notForeignTile\";\n\n  check(unit: UnitCore) {\n    return !unit.tile.areaOf || unit.tile.areaOf?.player === unit.player;\n  }\n}\n\nexport class ImprovementNotYetBuiltRequirement extends ActionRequirement {\n  id = \"sameImprovement\";\n\n  constructor(public improvement: TileImprovement) {\n    super();\n  }\n\n  check(unit: UnitCore) {\n    return unit.tile.improvement !== this.improvement;\n  }\n}\nexport class IsImprovementPossibleRequirement extends ActionRequirement {\n  id = \"improvementPossible\";\n\n  constructor(public improvement: TileImprovement) {\n    super();\n  }\n\n  check(unit: UnitCore) {\n    return isImprovementPossible(unit.tile, this.improvement);\n  }\n}\n\nexport class NoRoadRequirement extends ActionRequirement {\n  id = \"noRoad\";\n\n  check(unit: UnitCore) {\n    return unit.tile.road === null;\n  }\n}\n\nexport class isRoadPossibleRequirement extends ActionRequirement {\n  id = \"roadPossible\";\n\n  check(unit: UnitCore) {\n    return isRoadPossible(unit.tile);\n  }\n}\n\nexport class PublicWorksPointsRequirement extends ActionRequirement {\n  id = \"publicWorks\";\n\n  check(unit: UnitCore, action: UnitAction) {\n    return (\n      unit.player.yields.total.publicWorks >= getPublicWorksRequired(action)\n    );\n  }\n}\n\ninterface ActionDefinition {\n  action: UnitAction;\n  name: string;\n  fn: (game: Game, unit: UnitCore) => void;\n  requirements: ActionRequirement[];\n}\n\nfunction foundCity(game: Game, unit: UnitCore) {\n  const city = game.citiesManager.spawn(unit.tile, unit.player);\n  if (city) {\n    game.unitsManager.destroy(unit);\n  }\n}\n\nfunction buildImprovement(\n  game: Game,\n  unit: UnitCore,\n  improvement: TileImprovement,\n) {\n  unit.actionPointsLeft = 0;\n  unit.tile.improvement = improvement;\n  unit.tile.update();\n  unit.player.updateUnitsWithoutOrders();\n\n  unit.player.yields.total.publicWorks -=\n    IMPROVEMENT_PUBLIC_WORKS_COSTS[improvement];\n\n  unit.player.yields.costs.publicWorks +=\n    IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN[improvement];\n\n  unit.player.yields.perTurn.publicWorks -=\n    IMPROVEMENT_PUBLIC_WORKS_COSTS_PER_TURN[improvement];\n}\n\nfunction buildRoad(game: Game, unit: UnitCore) {\n  unit.actionPointsLeft = 0;\n  unit.tile.road = TileRoad.road;\n  unit.tile.update();\n  for (const neighbour of unit.tile.neighbours) {\n    neighbour.update();\n  }\n  unit.player.updateUnitsWithoutOrders();\n\n  unit.player.yields.total.publicWorks -=\n    ROAD_PUBLIC_WORKS_COSTS[TileRoad.road];\n\n  unit.player.yields.costs.publicWorks +=\n    ROAD_PUBLIC_WORKS_COSTS_PER_TURN[TileRoad.road];\n\n  unit.player.yields.perTurn.publicWorks -=\n    ROAD_PUBLIC_WORKS_COSTS_PER_TURN[TileRoad.road];\n}\n\nexport const ACTIONS: Record<UnitAction, ActionDefinition> = {\n  foundCity: {\n    action: \"foundCity\",\n    name: \"Found a city\",\n    fn: foundCity,\n    requirements: [new NotForeignTileRequirement()], // TODO add minimal distance to other city\n  },\n  buildFarm: {\n    action: \"buildFarm\",\n    name: \"Build a farm\",\n    fn: (game, unit) => buildImprovement(game, unit, TileImprovement.farm),\n    requirements: [\n      new OwnTileRequirement(),\n      new ImprovementNotYetBuiltRequirement(TileImprovement.farm),\n      new IsImprovementPossibleRequirement(TileImprovement.farm),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n  buildMine: {\n    action: \"buildMine\",\n    name: \"Build a mine\",\n    fn: (game, unit) => buildImprovement(game, unit, TileImprovement.mine),\n    requirements: [\n      new OwnTileRequirement(),\n      new ImprovementNotYetBuiltRequirement(TileImprovement.mine),\n      new IsImprovementPossibleRequirement(TileImprovement.mine),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n  buildSawmill: {\n    action: \"buildSawmill\",\n    name: \"Build a sawmill\",\n    fn: (game, unit) => buildImprovement(game, unit, TileImprovement.sawmill),\n    requirements: [\n      new OwnTileRequirement(),\n      new ImprovementNotYetBuiltRequirement(TileImprovement.sawmill),\n      new IsImprovementPossibleRequirement(TileImprovement.sawmill),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n  buildRoad: {\n    action: \"buildRoad\",\n    name: \"Build a road\",\n    fn: (game, unit) => buildRoad(game, unit),\n    requirements: [\n      new NoRoadRequirement(),\n      new isRoadPossibleRequirement(),\n      new PublicWorksPointsRequirement(),\n    ],\n  },\n};\n","import { UnitDefinition } from \"./unit.interface\";\nimport { UnitCore } from \"./unit\";\nimport { BehaviorSubject, Subject } from \"rxjs\";\nimport { UNITS_DEFINITIONS } from \"../data/units\";\nimport { PlayerCore } from \"./player\";\nimport { TileCore } from \"./tile\";\nimport { Game } from \"./game\";\nimport { collector } from \"./collector\";\n\nexport class UnitsManager {\n  definitions = new Map<string, UnitDefinition>();\n\n  units: UnitCore[] = [];\n\n  unitsMap = new Map<number, UnitCore>();\n\n  private lastId = 0;\n\n  constructor(private game: Game) {\n    for (const definition of UNITS_DEFINITIONS) {\n      this.definitions.set(definition.id, definition);\n    }\n  }\n\n  spawn(id: string, tile: TileCore, player: PlayerCore) {\n    const definition = this.definitions.get(id);\n    if (!definition) {\n      throw Error(`UnitsManager: No unit with id \"${id}\"`);\n    }\n\n    const unit = new UnitCore(tile, definition, player);\n    unit.id = this.lastId++;\n\n    this.units.push(unit);\n    this.unitsMap.set(unit.id, unit);\n    player.units.push(unit);\n    tile.units.push(unit);\n\n    unit.player.exploreTiles(unit.tile.getTilesInRange(2));\n\n    unit.player.unitsWithoutOrders.push(unit);\n\n    collector.units.add(unit);\n\n    return unit;\n  }\n\n  destroy(unit: UnitCore) {\n    // TODO rewrite to sets for better performance?\n\n    this.unitsMap.delete(unit.id);\n\n    let index = this.units.indexOf(unit);\n    if (index !== -1) {\n      this.units.splice(index, 1);\n    }\n\n    index = unit.player.units.indexOf(unit);\n    if (index !== -1) {\n      unit.player.units.splice(index, 1);\n    }\n\n    index = unit.tile.units.indexOf(unit);\n    if (index !== -1) {\n      unit.tile.units.splice(index, 1);\n    }\n\n    unit.player.updateUnitsWithoutOrders();\n    collector.unitsDestroyed.add(unit.id);\n  }\n\n  private move(unit: UnitCore, tile: TileCore) {\n    if (!unit.actionPointsLeft) {\n      return;\n    }\n\n    const cost = this.getMovementCost(unit, tile);\n    if (cost === Infinity) {\n      return;\n    }\n\n    if (unit.definition.power) {\n      if (\n        tile.units.length &&\n        tile.units.find((u) => u.player !== unit.player)\n      ) {\n        // battle\n      } else if (tile.city && tile.city.player !== unit.player) {\n        tile.city.changeOwner(unit.player);\n      }\n    }\n\n    const index = unit.tile.units.indexOf(unit);\n    if (index !== -1) {\n      unit.tile.units.splice(index, 1);\n    }\n    tile.units.push(unit);\n    unit.tile = tile;\n\n    unit.actionPointsLeft = Math.max(unit.actionPointsLeft - cost, 0);\n\n    unit.player.exploreTiles(tile.getTilesInRange(2));\n  }\n\n  moveAlongPath(unit: UnitCore) {\n    if (!unit.path) {\n      unit.setOrder(null);\n      return;\n    }\n\n    unit.setOrder(unit.path.length ? \"go\" : null);\n\n    collector.units.add(unit);\n\n    while (unit.actionPointsLeft && unit.path.length) {\n      this.move(unit, unit.path[0][0]);\n      unit.path[0].shift();\n      if (!unit.path[0].length) {\n        unit.path.shift();\n      }\n      if (!unit.path.length) {\n        unit.path = null;\n        unit.setOrder(null);\n        return;\n      }\n    }\n  }\n\n  getMovementCost(unit: UnitCore, target: TileCore) {\n    return unit.tile.neighboursCosts.get(target) || Infinity;\n  }\n\n  nextTurn() {\n    for (const unit of this.units) {\n      if (unit.path) {\n        this.moveAlongPath(unit);\n      }\n      if (unit.order === \"skip\") {\n        unit.setOrder(null);\n      }\n      unit.actionPointsLeft = unit.definition.actionPoints;\n    }\n  }\n}\n","import { TileCore } from \"./tile\";\nimport { UnitDefinition } from \"./unit.interface\";\nimport { PlayerCore } from \"./player\";\nimport { UnitAction, ACTIONS } from \"./unit-actions\";\nimport { UNITS_DEFINITIONS } from \"../data/units\";\nimport { collector } from \"./collector\";\n\nexport type UnitOrder = \"go\" | \"skip\" | \"sleep\" | null;\n\nexport const UNITS_MAP = new Map<string, UnitDefinition>();\n\nfor (const definition of UNITS_DEFINITIONS) {\n  UNITS_MAP.set(definition.id, definition);\n}\n\nexport class UnitCore {\n  id: number;\n  actionPointsLeft: number;\n  path: TileCore[][] | null;\n\n  order: UnitOrder = null;\n\n  constructor(\n    public tile: TileCore,\n    public definition: UnitDefinition,\n    public player: PlayerCore,\n  ) {\n    this.actionPointsLeft = definition.actionPoints;\n  }\n\n  doAction(action: UnitAction) {\n    if (!this.canDoAction(action)) {\n      return;\n    }\n\n    ACTIONS[action].fn(this.player.game, this);\n    collector.units.add(this);\n  }\n\n  canDoAction(action: UnitAction): boolean {\n    if (!this.actionPointsLeft) {\n      return false;\n    }\n\n    if (!this.definition.actions.includes(action)) {\n      return false;\n    }\n\n    for (const r of ACTIONS[action].requirements) {\n      if (!r.check(this, action)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getFailedActionRequirements(action: UnitAction): string[] {\n    return ACTIONS[action].requirements\n      .filter((r) => !r.check(this, action))\n      .map((r) => r.id);\n  }\n\n  setOrder(order: UnitOrder) {\n    this.order = order;\n    this.player.updateUnitsWithoutOrders();\n  }\n\n  getPathDestination(): TileCore | null {\n    if (!this.path) {\n      return null;\n    }\n\n    const lastPathTurn = this.path[this.path.length - 1];\n    return lastPathTurn[lastPathTurn.length - 1];\n  }\n\n  getRange(): Set<TileCore> {\n    const result = new Set<TileCore>();\n    const actionPointsLeftAtTile = new Map<TileCore, number>();\n\n    this._getRange(\n      this.tile,\n      this.actionPointsLeft,\n      result,\n      actionPointsLeftAtTile,\n    );\n\n    if (result.size === 1) {\n      result.delete(this.tile);\n    }\n\n    return result;\n  }\n\n  private _getRange(\n    tile = this.tile,\n    actionPointsLeft = this.actionPointsLeft,\n    result: Set<TileCore>,\n    actionPointsLeftAtTile: Map<TileCore, number>,\n  ) {\n    result.add(tile);\n\n    if (actionPointsLeft <= 0) {\n      return result;\n    }\n\n    for (const neighbour of tile.neighbours) {\n      const oldActionPointsLeft = actionPointsLeftAtTile.get(neighbour);\n\n      const cost = tile.neighboursCosts.get(neighbour)!;\n      if (cost === Infinity) {\n        continue;\n      }\n\n      const newActionPointsLeft = actionPointsLeft - cost;\n\n      if (!oldActionPointsLeft || newActionPointsLeft > oldActionPointsLeft) {\n        actionPointsLeftAtTile.set(neighbour, newActionPointsLeft);\n\n        this._getRange(\n          neighbour,\n          newActionPointsLeft,\n          result,\n          actionPointsLeftAtTile,\n        );\n      }\n    }\n\n    return result;\n  }\n}\n","export interface Yields {\n  food: number;\n  production: number;\n  culture: number;\n  publicWorks: number;\n}\n\nexport const EMPTY_YIELDS: Yields = {\n  food: 0,\n  production: 0,\n  culture: 0,\n  publicWorks: 0,\n};\n\nexport function zeroYields(yields: Yields) {\n  yields.food = 0;\n  yields.production = 0;\n  yields.culture = 0;\n  yields.publicWorks = 0;\n}\n\nexport function addYields(targetYields: Yields, yields: Yields) {\n  targetYields.food += yields.food;\n  targetYields.production += yields.production;\n  targetYields.culture += yields.culture;\n  targetYields.publicWorks += yields.publicWorks;\n}\n\nexport function subtractYields(targetYields: Yields, yields: Yields) {\n  targetYields.food -= yields.food;\n  targetYields.production -= yields.production;\n  targetYields.culture -= yields.culture;\n  targetYields.publicWorks -= yields.publicWorks;\n}\n\nexport function copyYields(targetYields: Yields, yields: Yields) {\n  targetYields.food = yields.food;\n  targetYields.production = yields.production;\n  targetYields.culture = yields.culture;\n  targetYields.publicWorks = yields.publicWorks;\n}\n\nexport function roundYields(yields: Yields) {\n  yields.food = Math.ceil(yields.food);\n  yields.production = Math.ceil(yields.production);\n  yields.culture = Math.ceil(yields.culture);\n  yields.publicWorks = Math.ceil(yields.publicWorks);\n}\n","import { Building } from \"../core/buildings\";\nimport { BuildingRequirement } from \"../core/product\";\n\nexport const BUILDINGS: Building[] = [\n  {\n    id: \"granary\",\n    name: \"Granary\",\n    productionCost: 40,\n    bonuses: { yieldValue: { food: 3 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"well\",\n    name: \"Well\",\n    productionCost: 20,\n    bonuses: { yieldValue: { food: 1 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"bigGranary\",\n    name: \"Grand granary\",\n    productionCost: 100,\n    bonuses: { yieldFactor: { food: 0.2 } },\n    requirements: [new BuildingRequirement(\"granary\")],\n    weakRequirements: [],\n  },\n  {\n    id: \"workshop\",\n    name: \"Workshop\",\n    productionCost: 80,\n    bonuses: { yieldValue: { production: 5 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"bigWorkshop\",\n    name: \"Grand workshop\",\n    productionCost: 200,\n    bonuses: { yieldFactor: { production: 0.2 } },\n    requirements: [new BuildingRequirement(\"workshop\")],\n    weakRequirements: [],\n  },\n  {\n    id: \"slaveMarket\",\n    name: \"Slave market\",\n    productionCost: 50,\n    bonuses: { yieldValue: { publicWorks: 2 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"bigWorkshop\",\n    name: \"Grand workshop\",\n    productionCost: 200,\n    bonuses: { yieldFactor: { production: 0.2 } },\n    requirements: [new BuildingRequirement(\"workshop\")],\n    weakRequirements: [],\n  },\n  {\n    id: \"monument\",\n    name: \"Monument\",\n    productionCost: 30,\n    bonuses: { yieldValue: { culture: 2 } },\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"allDoingBuilding\",\n    name: \"All doing building\",\n    productionCost: 500,\n    bonuses: {\n      yieldValue: { food: 1, production: 1 },\n      yieldFactor: { food: 0.1, production: 0.1 },\n    },\n    requirements: [\n      new BuildingRequirement(\"bigGranary\"),\n      new BuildingRequirement(\"bigWorkshop\"),\n    ],\n    weakRequirements: [],\n  },\n];\n","import { IdleProduct } from \"../core/idle-product\";\n\nexport const IDLE_PRODUCTS: IdleProduct[] = [\n  {\n    id: \"growth\",\n    name: \"Growth\",\n    productionCost: Infinity,\n    requirements: [],\n    weakRequirements: [],\n    bonuses: { transferProductionToFood: 0.25 },\n  },\n  {\n    id: \"culture\",\n    name: \"Culture\",\n    productionCost: Infinity,\n    requirements: [],\n    weakRequirements: [],\n    bonuses: { transferProductionToCulture: 0.25 },\n  },\n  {\n    id: \"public-works\",\n    name: \"Public works\",\n    productionCost: Infinity,\n    requirements: [],\n    weakRequirements: [],\n    bonuses: { transferProductionToPublicWorks: 0.25 },\n  },\n];\n","import { UnitDefinition } from \"../core/unit.interface\";\nimport { BuildingRequirement, SizeRequirement } from \"../core/product\";\n\nexport const UNITS_DEFINITIONS: UnitDefinition[] = [\n  {\n    id: \"settler\",\n    name: \"Settler\",\n    type: \"civilian\",\n    actionPoints: 2,\n    power: 0,\n    actions: [\"foundCity\"],\n    productionCost: 50,\n    requirements: [],\n    weakRequirements: [\n      new BuildingRequirement(\"granary\"),\n      new SizeRequirement(3),\n    ],\n  },\n  {\n    id: \"worker\",\n    name: \"Worker\",\n    type: \"civilian\",\n    actionPoints: 2,\n    power: 0,\n    actions: [\"buildFarm\", \"buildMine\", \"buildSawmill\", \"buildRoad\"],\n    productionCost: 20,\n    requirements: [],\n    weakRequirements: [new SizeRequirement(2)],\n  },\n  {\n    id: \"scout\",\n    name: \"Scout\",\n    type: \"military\",\n    actionPoints: 2,\n    power: 2,\n    actions: [],\n    productionCost: 10,\n    requirements: [],\n    weakRequirements: [],\n  },\n  {\n    id: \"warrior\",\n    name: \"Warrior\",\n    type: \"military\",\n    actionPoints: 2,\n    power: 5,\n    actions: [],\n    productionCost: 30,\n    requirements: [],\n    weakRequirements: [],\n  },\n];\n","import * as SimplexNoise from \"simplex-noise\";\n\nimport { MapGenerator } from \"./map-generator.interface\";\nimport { TilesMapCore } from \"../core/tiles-map\";\nimport {\n  findCoastline,\n  placeRiverBetweenTiles,\n  POSSIBLE_BORDER_PATHS,\n} from \"./utils\";\nimport { TileCore } from \"../core/tile\";\nimport {\n  LandForm,\n  Climate,\n  SeaLevel,\n  TileDirection,\n  areWetlandsPossible,\n  isForestable,\n} from \"../shared\";\nimport { getTileInDirection } from \"../shared/hex-math\";\n\ninterface TileMetadata {\n  height: number;\n  humidity: number;\n  temperature: number;\n}\n\nexport class SimplexMapGenerator implements MapGenerator {\n  private map: TilesMapCore;\n\n  private width: number;\n\n  private height: number;\n\n  private seed: string | undefined;\n\n  private uniformity: number;\n\n  private seaLevel: number;\n\n  private startingLocations: TileCore[] = [];\n\n  private riversSources: TileCore[] = [];\n\n  private metadata = new Map<TileCore, TileMetadata>();\n\n  constructor(private startingLocationsCount: number) {}\n\n  getStartingLocations() {\n    return this.startingLocations;\n  }\n\n  generate(\n    width: number,\n    height: number,\n    seed: string | undefined = undefined,\n    uniformity: number = 0.5,\n    seaLevel = 0,\n  ) {\n    this.map = new TilesMapCore(width, height);\n    this.width = width;\n    this.height = height;\n    this.seed = seed;\n    this.uniformity = uniformity;\n    this.seaLevel = seaLevel;\n\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const metadata: TileMetadata = {\n          height: 0,\n          humidity: 0,\n          temperature: 0,\n        };\n        this.metadata.set(this.map.tiles[x][y], metadata);\n      }\n    }\n\n    this.generateHeightmap();\n\n    this.generateTemperature();\n\n    this.generateHumidity();\n\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.map.tiles[x][y];\n        const metadata = this.metadata.get(tile)!;\n        if (metadata.height > 1.3) {\n          tile.landForm = LandForm.mountains;\n        } else if (metadata.height > 0.25) {\n          tile.landForm = LandForm.hills;\n        }\n\n        if (metadata.temperature < 0.2) {\n          if (metadata.temperature < 0.07) {\n            tile.climate = Climate.arctic;\n          } else {\n            tile.climate = Climate.tundra;\n          }\n          continue;\n        }\n\n        if (metadata.humidity < 0.1) {\n          tile.climate = Climate.desert;\n        } else if (metadata.humidity < 0.3) {\n          tile.climate = Climate.savanna;\n        } else if (metadata.humidity < 0.7 && metadata.temperature < 0.5) {\n          tile.climate = Climate.continental;\n        } else {\n          tile.climate =\n            metadata.temperature > 0.5 ? Climate.tropical : Climate.oceanic;\n        }\n      }\n    }\n\n    for (const [tile, value, _] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.015, 1],\n          [0.06, 1],\n          [0.3, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      const bonus = tile.climate === Climate.tropical ? 0.3 : 0;\n      if (value + bonus > -0.2 && isForestable(tile)) {\n        tile.forest = true;\n      }\n    }\n\n    this.fixShallowWater();\n\n    this.adjustHeightmap();\n\n    this.placeRivers();\n\n    this.placeWetlands();\n\n    this.findStartingPositions();\n\n    return this.map;\n  }\n\n  private generateHeightmap() {\n    const size = Math.max(this.width, this.height);\n    const noiseLayersCount = Math.floor(Math.pow(size, 0.4));\n\n    const noiseScales: number[][] = [];\n    for (let i = 0; i < noiseLayersCount; i++) {\n      noiseScales.push([Math.pow(0.6, i + 4), 1 + this.uniformity * i]);\n    }\n    const maxValue = noiseScales.reduce(\n      (total, scaleAndIntensity) => total + scaleAndIntensity[1],\n      0,\n    );\n    const seaLevel = maxValue * this.seaLevel;\n\n    const coastlineNoise = new ComplexNoise(noiseScales, this.seed);\n\n    const heightmapNoise = new ComplexNoise(\n      [\n        [0.015, 1],\n        [0.06, 1],\n        [0.3, 1],\n      ],\n      this.seed,\n    );\n\n    for (let [tile, value, _] of this.getNoisedTiles(coastlineNoise)) {\n      let height = 0;\n\n      // Adjust horizontal edges to be more likely sea.\n      const distanceToEdge = Math.min(tile.x, this.width - tile.x);\n      const edgeThrehold = this.width * 0.1;\n      if (distanceToEdge < edgeThrehold) {\n        value -=\n          (maxValue / 2) *\n          Math.cos((Math.PI / 2 / edgeThrehold) * distanceToEdge);\n      }\n\n      if (value > seaLevel) {\n        height = value;\n        tile.seaLevel = SeaLevel.none;\n        if (value > 0.05 && Math.random() > 0.97) {\n          this.riversSources.push(tile);\n        }\n        height = heightmapNoise.at(tile.x, tile.y);\n      }\n      this.metadata.get(tile)!.height = height;\n    }\n  }\n\n  private generateTemperature() {\n    for (const [tile, value, longitude] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.012, 1],\n          [0.07, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      const base = (1 - longitude) / 2;\n      const noise = ((value + 1) / 2) * (1 - longitude);\n      const metadata = this.metadata.get(tile)!;\n      metadata.temperature = Math.max(base, Math.min(1, base + noise));\n    }\n  }\n\n  private generateHumidity() {\n    for (const [tile, value, longitude] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.025, 1],\n          [0.2, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      const x = longitude * 10;\n      const base = x < Math.PI * 1.5 ? (Math.cos(x) + 1) / 2 - 0.5 : 0;\n      const noise = (value + 1) / 2;\n      const metadata = this.metadata.get(tile)!;\n      metadata.humidity = Math.max(0, Math.min(1, base * 0.8 + noise));\n    }\n  }\n\n  private *getNoisedTiles(\n    noise: ComplexNoise,\n  ): Iterable<[TileCore, number, number]> {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const noiseValue = noise.at(x, y);\n        const halfHeight = Math.floor(this.height / 2);\n        const longitude = Math.abs((y - halfHeight) / halfHeight);\n        yield [this.map.tiles[x][y], noiseValue, longitude];\n      }\n    }\n  }\n\n  private fixShallowWater() {\n    for (let x = 0; x < this.width; x++) {\n      for (let y = 0; y < this.height; y++) {\n        const tile = this.map.tiles[x][y];\n        if (tile.seaLevel === SeaLevel.none) {\n          for (const neighbour of tile.neighbours) {\n            if (neighbour.seaLevel === SeaLevel.deep) {\n              neighbour.seaLevel = SeaLevel.shallow;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private adjustHeightmap() {\n    // Make heighmap suitable for rivers placement - the deeper into land the higher.\n    let currentTiles = findCoastline(this.map.tiles);\n    const nextTiles = new Set<TileCore>();\n    const visitedTiles = new Set<TileCore>(currentTiles);\n    let offset = 0;\n    while (currentTiles.length) {\n      offset += 0.7;\n      for (const tile of currentTiles) {\n        for (const neighbour of tile.neighbours) {\n          if (\n            neighbour.seaLevel === SeaLevel.none &&\n            !visitedTiles.has(neighbour)\n          ) {\n            visitedTiles.add(neighbour);\n            nextTiles.add(neighbour);\n            this.metadata.get(neighbour)!.height += offset;\n          }\n        }\n      }\n      currentTiles = Array.from(nextTiles);\n      nextTiles.clear();\n    }\n  }\n\n  private placeRivers() {\n    for (const tile of this.riversSources) {\n      if (tile.riverParts.length) {\n        continue;\n      }\n\n      let ok = true;\n      for (const neighbour of tile.neighbours) {\n        if (neighbour.seaLevel !== SeaLevel.none) {\n          ok = false;\n        }\n      }\n\n      if (ok) {\n        this.buildRiverPath(tile, Math.round(Math.random() * 5));\n      }\n    }\n  }\n\n  private buildRiverPath(tile: TileCore, direction: TileDirection) {\n    if (direction === TileDirection.NONE) {\n      return;\n    }\n\n    const possibleNeighboursDirections = POSSIBLE_BORDER_PATHS[direction];\n\n    const pairs = possibleNeighboursDirections\n      .map((pair) => {\n        return pair.map((dir) => {\n          if (dir === TileDirection.NONE) {\n            return tile;\n          }\n          return getTileInDirection(this.map.tiles, tile, dir);\n        });\n      })\n      .filter(\n        (pair) =>\n          pair[0] &&\n          pair[1] &&\n          pair[0].seaLevel === SeaLevel.none &&\n          pair[1].seaLevel === SeaLevel.none &&\n          pair[0].riverParts.length < 4 && // small loops prevention, big loops are still an issue\n          pair[1].riverParts.length < 4,\n      ) as [TileCore, TileCore][];\n\n    if (pairs.length === 0) {\n      return;\n    }\n\n    let pairToPlace: [TileCore, TileCore];\n\n    if (pairs.length === 1) {\n      pairToPlace = pairs[0];\n    } else {\n      const [pairA, pairB] = pairs;\n\n      const heightA =\n        (this.metadata.get(pairA[0])!.height +\n          this.metadata.get(pairA[1])!.height) /\n        2;\n      const heightB =\n        (this.metadata.get(pairB[0])!.height +\n          this.metadata.get(pairB[1])!.height) /\n        2;\n\n      pairToPlace = heightA < heightB ? pairA : pairB;\n    }\n\n    if (placeRiverBetweenTiles(...pairToPlace)) {\n      this.buildRiverPath(\n        pairToPlace[0],\n        pairToPlace[0].getDirectionTo(pairToPlace[1]),\n      );\n    }\n  }\n\n  placeWetlands() {\n    for (const [tile, value, _] of this.getNoisedTiles(\n      new ComplexNoise(\n        [\n          [0.021, 1],\n          [0.08, 1],\n          [0.2, 1],\n        ],\n        this.seed,\n      ),\n    )) {\n      if (value > 0 && areWetlandsPossible(tile)) {\n        tile.wetlands = true;\n      }\n    }\n  }\n\n  private findStartingPositions() {\n    const maxTries = 10000;\n    let tries = 0;\n    while (\n      tries < maxTries &&\n      this.startingLocations.length < this.startingLocationsCount\n    ) {\n      const x = Math.floor(Math.random() * this.width);\n      const y = Math.floor(Math.random() * this.height);\n      const tile = this.map.tiles[x][y];\n      if (\n        tile.seaLevel === SeaLevel.none &&\n        tile.landForm !== LandForm.mountains &&\n        !this.startingLocations.includes(tile)\n      ) {\n        this.startingLocations.push(tile);\n      }\n      tries++;\n    }\n  }\n}\n\nclass ComplexNoise {\n  private noises: SimplexNoise[];\n\n  constructor(private scales: number[][], seed: string | undefined) {\n    this.noises = scales.map(() => new SimplexNoise(seed));\n  }\n\n  at(x: number, y: number) {\n    let noiseValue = 0;\n    for (let i = 0; i < this.noises.length; i++) {\n      const [scale, intensity] = this.scales[i];\n      noiseValue += this.noises[i].noise2D(x * scale, y * scale) * intensity;\n    }\n    return noiseValue;\n  }\n}\n","import { TileCore } from \"../core/tile\";\nimport { SeaLevel, TileDirection } from \"../shared\";\n\nexport function findCoastline(tiles: TileCore[][]): TileCore[] {\n  const coastline: TileCore[] = [];\n  for (let x = 0; x < tiles.length; x++) {\n    for (let y = 0; y < tiles[x].length; y++) {\n      const tile = tiles[x][y];\n      if (tile.seaLevel !== SeaLevel.none) {\n        continue;\n      }\n      if (tile.neighbours.find((t) => t.seaLevel !== SeaLevel.none)) {\n        coastline.push(tile);\n      }\n    }\n  }\n  return coastline;\n}\n\nexport function placeRiverBetweenTiles(tileA: TileCore, tileB: TileCore) {\n  const direction = tileA.getDirectionTo(tileB);\n  if (tileA.riverParts.includes(direction)) {\n    return false;\n  }\n  tileA.riverParts.push(direction);\n  tileB.riverParts.push(OPPOSITE_DIRECTIONS[direction]);\n  return true;\n}\n\n// first direction is clockwise, second is counterclockwise\nexport const POSSIBLE_RIVER_DIRECTION_FROM_WATER_TILE: Record<\n  TileDirection,\n  [TileDirection, TileDirection]\n> = {\n  [TileDirection.NW]: [TileDirection.NE, TileDirection.W],\n  [TileDirection.NE]: [TileDirection.E, TileDirection.NW],\n  [TileDirection.E]: [TileDirection.SE, TileDirection.NE],\n  [TileDirection.SE]: [TileDirection.SW, TileDirection.E],\n  [TileDirection.SW]: [TileDirection.W, TileDirection.SE],\n  [TileDirection.W]: [TileDirection.NW, TileDirection.SW],\n  [TileDirection.NONE]: [TileDirection.NONE, TileDirection.NONE],\n};\n\n// flow is clockwise for first tile\nexport const POSSIBLE_BORDER_PATHS: Record<\n  TileDirection,\n  [[TileDirection, TileDirection], [TileDirection, TileDirection]]\n> = {\n  [TileDirection.NW]: [\n    [TileDirection.NE, TileDirection.NW],\n    [TileDirection.NONE, TileDirection.NE],\n  ],\n  [TileDirection.NE]: [\n    [TileDirection.E, TileDirection.NE],\n    [TileDirection.NONE, TileDirection.E],\n  ],\n  [TileDirection.E]: [\n    [TileDirection.SE, TileDirection.E],\n    [TileDirection.NONE, TileDirection.SE],\n  ],\n  [TileDirection.SE]: [\n    [TileDirection.SW, TileDirection.SE],\n    [TileDirection.NONE, TileDirection.SW],\n  ],\n  [TileDirection.SW]: [\n    [TileDirection.W, TileDirection.SW],\n    [TileDirection.NONE, TileDirection.W],\n  ],\n  [TileDirection.W]: [\n    [TileDirection.NW, TileDirection.W],\n    [TileDirection.NONE, TileDirection.NW],\n  ],\n  [TileDirection.NONE]: [\n    [TileDirection.NONE, TileDirection.NONE],\n    [TileDirection.NONE, TileDirection.NONE],\n  ],\n};\n\nexport const OPPOSITE_DIRECTIONS: Record<TileDirection, TileDirection> = {\n  [TileDirection.NW]: TileDirection.SE,\n  [TileDirection.NE]: TileDirection.SW,\n  [TileDirection.E]: TileDirection.W,\n  [TileDirection.SE]: TileDirection.NW,\n  [TileDirection.SW]: TileDirection.NE,\n  [TileDirection.W]: TileDirection.E,\n  [TileDirection.NONE]: TileDirection.NONE,\n};\n","import { TileDirection } from \"../shared\";\nimport { BaseTile } from \"./tile.interface\";\n\nexport function getTileFullNeighbours<T extends BaseTile>(\n  tiles: T[][],\n  x: number,\n  y: number,\n): (T | null)[] {\n  return [\n    getTileInDirection(tiles, tiles[x][y], TileDirection.NW),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.NE),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.E),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.SE),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.SW),\n    getTileInDirection(tiles, tiles[x][y], TileDirection.W),\n  ];\n}\n\nexport function getTileNeighbours<T extends BaseTile>(\n  tiles: T[][],\n  x: number,\n  y: number,\n): T[] {\n  return getTileFullNeighbours(tiles, x, y).filter((t) => !!t) as T[];\n}\n\nexport function getTileInDirection<T extends BaseTile>(\n  tiles: T[][],\n  tile: T,\n  direction: TileDirection,\n): T | null {\n  switch (direction) {\n    case TileDirection.NW:\n      if ((tile.y % 2 === 0 && tile.x === 0) || tile.y === 0) {\n        return null;\n      }\n      return tiles[tile.x - (tile.y % 2 ? 0 : 1)][tile.y - 1];\n\n    case TileDirection.NE:\n      if ((tile.y % 2 && tile.x === tiles.length - 1) || tile.y === 0) {\n        return null;\n      }\n      return tiles[tile.x + (tile.y % 2 ? 1 : 0)][tile.y - 1];\n\n    case TileDirection.E:\n      if (tile.x === tiles.length - 1) {\n        return null;\n      }\n      return tiles[tile.x + 1][tile.y];\n\n    case TileDirection.SE:\n      if (\n        (tile.y % 2 && tile.x === tiles.length - 1) ||\n        tile.y === tiles[tile.x].length - 1\n      ) {\n        return null;\n      }\n      return tiles[tile.x + (tile.y % 2 ? 1 : 0)][tile.y + 1];\n\n    case TileDirection.SW:\n      if (\n        (tile.y % 2 === 0 && tile.x === 0) ||\n        tile.y === tiles[tile.x].length - 1\n      ) {\n        return null;\n      }\n      return tiles[tile.x - (tile.y % 2 ? 0 : 1)][tile.y + 1];\n\n    case TileDirection.W:\n      if (tile.x === 0) {\n        return null;\n      }\n      return tiles[tile.x - 1][tile.y];\n  }\n  return null;\n}\n\nexport function getDirectionTo(\n  fromtile: BaseTile,\n  toTile: BaseTile,\n): TileDirection {\n  if (\n    toTile.x === fromtile.x - (fromtile.y % 2 ? 0 : 1) &&\n    toTile.y === fromtile.y - 1\n  ) {\n    return TileDirection.NW;\n  }\n  if (\n    toTile.x === fromtile.x + (fromtile.y % 2 ? 1 : 0) &&\n    toTile.y === fromtile.y - 1\n  ) {\n    return TileDirection.NE;\n  }\n  if (toTile.x === fromtile.x + 1 && toTile.y === fromtile.y) {\n    return TileDirection.E;\n  }\n  if (\n    toTile.x === fromtile.x + (fromtile.y % 2 ? 1 : 0) &&\n    toTile.y === fromtile.y + 1\n  ) {\n    return TileDirection.SE;\n  }\n  if (\n    toTile.x === fromtile.x - (fromtile.y % 2 ? 0 : 1) &&\n    toTile.y === fromtile.y + 1\n  ) {\n    return TileDirection.SW;\n  }\n  if (toTile.x === fromtile.x - 1 && toTile.y === fromtile.y) {\n    return TileDirection.W;\n  }\n  return TileDirection.NONE;\n}\n\nexport function getTilesInRange(tile: BaseTile, range: number): Set<BaseTile> {\n  const result = new Set<BaseTile>([tile]);\n  for (let i = 0; i < range; i++) {\n    let neighbours = new Set<BaseTile>();\n    for (const tile of result) {\n      for (const neighbour of (tile as any).neighbours) {\n        // TODO fix typing\n        neighbours.add(neighbour);\n      }\n    }\n    for (const tile of neighbours) {\n      result.add(tile);\n    }\n  }\n  return result;\n}\n","import { TileImprovement, TileRoad } from \"../core/tile-improvements\";\nimport { Yields } from \"../core/yields\";\n\nexport enum TileDirection {\n  NW,\n  NE,\n  E,\n  SE,\n  SW,\n  W,\n  NONE,\n}\n\nexport enum Climate {\n  tropical,\n  savanna,\n  desert,\n  continental,\n  oceanic,\n  tundra,\n  arctic,\n}\n\nexport enum LandForm {\n  plains,\n  hills,\n  mountains,\n}\n\nexport enum SeaLevel {\n  none,\n  shallow,\n  deep,\n}\n\nexport interface BaseTile {\n  id: number;\n\n  x: number;\n  y: number;\n\n  climate: Climate;\n  landForm: LandForm;\n  seaLevel: SeaLevel;\n  riverParts: TileDirection[];\n  forest: boolean;\n  wetlands: boolean;\n  improvement: TileImprovement | null;\n  road: TileRoad | null;\n\n  yields: Yields;\n}\n\nexport const FORESTABLE_CLIMATES = new Set<Climate>([\n  Climate.continental,\n  Climate.oceanic,\n  Climate.tropical,\n  Climate.tundra,\n]);\n\nexport const WETLANDS_CLIMATES = new Set<Climate>([\n  Climate.continental,\n  Climate.oceanic,\n  Climate.tropical,\n]);\n\nexport function isForestable(tile: BaseTile): boolean {\n  return (\n    tile.seaLevel === SeaLevel.none &&\n    tile.landForm === LandForm.plains &&\n    FORESTABLE_CLIMATES.has(tile.climate)\n  );\n}\n\nexport function areWetlandsPossible(tile: BaseTile): boolean {\n  return !!(\n    tile.seaLevel === SeaLevel.none &&\n    tile.landForm === LandForm.plains &&\n    tile.riverParts.length &&\n    WETLANDS_CLIMATES.has(tile.climate)\n  );\n}\n\nexport function isImprovementPossible(\n  tile: BaseTile,\n  improvement: TileImprovement | null,\n): boolean {\n  if (improvement === null) {\n    return true;\n  } else if (improvement === TileImprovement.farm) {\n    return (\n      tile.seaLevel === SeaLevel.none &&\n      tile.landForm === LandForm.plains &&\n      tile.climate !== Climate.arctic &&\n      !tile.forest &&\n      !tile.wetlands\n    );\n  } else if (improvement === TileImprovement.mine) {\n    return tile.landForm === LandForm.hills;\n  } else if (improvement === TileImprovement.sawmill) {\n    return tile.forest && !tile.wetlands;\n  } else {\n    return false;\n  }\n}\n\nexport function isRoadPossible(tile: BaseTile) {\n  return (\n    tile.seaLevel === SeaLevel.none && tile.landForm !== LandForm.mountains\n  );\n}\n"]}